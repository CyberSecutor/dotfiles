
<!-- saved from url=(0111)http://svn.openkomodo.com/openkomodo/checkout/openkomodo/trunk/src/codeintel/lib/codeintel2/stdlibs/php-5.5.cix -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style type="text/css"></style></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;codeintel description="PHP 5.5 sources from PHP.net" name="PHP 5.5" version="2.0"&gt;
  &lt;file lang="PHP" mtime="1376337190" path="php-5.5.cix"&gt;
    &lt;scope id="global" ilk="blob" lang="PHP" name="*"&gt;
      &lt;scope ilk="class" name="Generator"&gt;
        &lt;scope doc="Rewind the generator" ilk="function" name="rewind" returns="void" signature="rewind()" src="zend_generators.c" /&gt;
        &lt;scope doc="Check whether the generator is valid" ilk="function" name="valid" returns="bool" signature="valid()" src="zend_generators.c" /&gt;
        &lt;scope doc="Get the current value" ilk="function" name="current" returns="mixed" signature="current()" src="zend_generators.c" /&gt;
        &lt;scope doc="Get the current key" ilk="function" name="key" returns="mixed" signature="key()" src="zend_generators.c" /&gt;
        &lt;scope doc="Advances the generator" ilk="function" name="next" returns="void" signature="next()" src="zend_generators.c" /&gt;
        &lt;scope doc="Sends a value to the generator" ilk="function" name="send" returns="mixed" signature="send(mixed $value)" src="zend_generators.c" /&gt;
        &lt;scope doc="Throws an exception into the generator" ilk="function" name="throw" returns="mixed" signature="throw(Exception $exception)" src="zend_generators.c" /&gt;
        &lt;scope doc="Throws an Exception as generators can&amp;apos;t be serialized" ilk="function" name="__wakeup" returns="void" signature="__wakeup()" src="zend_generators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="Closure"&gt;
        &lt;scope doc="Create a closure from another one and bind to another&amp;#xA;object and scope" ilk="function" name="bind" returns="Closure" signature="bind(Closure $old, object $to [, mixed $scope = &amp;quot;static&amp;quot; ] )" src="zend_closures.c" /&gt;
        &lt;scope doc="Private constructor preventing instantiation" ilk="function" name="__construct" signature="__construct()" src="zend_closures.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="Exception"&gt;
        &lt;scope doc="Clone the exception object" ilk="function" name="__clone" returns="Exception" signature="__clone()" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Exception constructor" ilk="function" name="__construct" signature="__construct(string message, int code [, Exception previous])" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Get the file in which the exception occurred" ilk="function" name="getFile" returns="string" signature="getFile()" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Get the line in which the exception occurred" ilk="function" name="getLine" returns="int" signature="getLine()" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Get the exception message" ilk="function" name="getMessage" returns="string" signature="getMessage()" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Get the exception code" ilk="function" name="getCode" returns="int" signature="getCode()" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Get the stack trace for the location in which the&amp;#xA;exception occurred" ilk="function" name="getTrace" returns="array" signature="getTrace()" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Obtain the backtrace for the exception as a string&amp;#xA;instead of an array" ilk="function" name="getTraceAsString" returns="string" signature="getTraceAsString()" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Return previous Exception or NULL" ilk="function" name="getPrevious" returns="string" signature="getPrevious()" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Obtain the string representation of the Exception&amp;#xA;object" ilk="function" name="__toString" returns="string" signature="__toString()" src="zend_exceptions.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="Exception" ilk="class" name="ErrorException"&gt;
        &lt;scope doc="ErrorException constructor" ilk="function" name="__construct" signature="__construct(string message, int code, int severity [, string filename [, int lineno [, Exception previous]]])" src="zend_exceptions.c" /&gt;
        &lt;scope doc="Get the exception severity" ilk="function" name="getSeverity" returns="int" signature="getSeverity()" src="zend_exceptions.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="MessageFormatter"&gt;
        &lt;scope doc="Format a message" ilk="function" name="format" returns="mixed" signature="format( array $args )" src="msgformat_format.c" /&gt;
        &lt;scope doc="Parse a message" ilk="function" name="formatMessage" returns="array" signature="formatMessage( string $locale, string $pattern, string $source )" src="msgformat_parse.c" /&gt;
        &lt;scope doc="MessageFormatter object constructor" ilk="function" name="__construct" returns="void" signature="__construct( string $locale, string $pattern )" src="msgformat.c" /&gt;
        &lt;scope doc="Get formatter&amp;apos;s last error code" ilk="function" name="getErrorCode" returns="int" signature="getErrorCode()" src="msgformat.c" /&gt;
        &lt;scope doc="Get text description for formatter&amp;apos;s last error code" ilk="function" name="getErrorMessage" returns="string" signature="getErrorMessage( )" src="msgformat.c" /&gt;
        &lt;scope doc="Parse a message" ilk="function" name="parse" returns="array" signature="parse( string $source )" src="msgformat_parse.c" /&gt;
        &lt;scope doc="Get formatter pattern" ilk="function" name="getPattern" returns="string" signature="getPattern( )" src="msgformat_attr.c" /&gt;
        &lt;scope doc="Set formatter pattern" ilk="function" name="setPattern" returns="bool" signature="setPattern( string $pattern )" src="msgformat_attr.c" /&gt;
        &lt;scope doc="Get formatter locale" ilk="function" name="getLocale" returns="string" signature="getLocale()" src="msgformat_attr.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="MesssageFormatter"&gt;
        &lt;scope doc="Create formatter" ilk="function" name="create" returns="MessageFormatter" signature="create( string $locale, string $pattern )" src="msgformat.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="Spoofchecker"&gt;
        &lt;scope doc="Checks if a given text contains any suspicious&amp;#xA;characters" ilk="function" name="isSuspicious" returns="bool" signature="isSuspicious( string text[, int &amp;amp;error_code ] )" src="spoofchecker_main.c" /&gt;
        &lt;scope doc="Checks if a given text contains any confusable&amp;#xA;characters" ilk="function" name="areConfusable" returns="bool" signature="areConfusable( string str1, string str2[, int &amp;amp;error_code ] )" src="spoofchecker_main.c" /&gt;
        &lt;scope doc="Locales to use when running checks" ilk="function" name="setAllowedLocales" returns="void" signature="setAllowedLocales( string locales )" src="spoofchecker_main.c" /&gt;
        &lt;scope doc="Set the checks to run" ilk="function" name="setChecks" returns="void" signature="setChecks( int checks )" src="spoofchecker_main.c" /&gt;
        &lt;scope doc="Spoofchecker object constructor" ilk="function" name="__construct" returns="Spoofchecker" signature="__construct()" src="spoofchecker_create.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="IntlDateFormatter"&gt;
        &lt;scope doc="Parse the string value starting at parse pos to a Unix&amp;#xA;timestamp -int" ilk="function" name="parse" returns="integer" signature="parse( string $text_to_parse  [, int $parse_pos] )" src="dateformat_parse.c" /&gt;
        &lt;scope doc="Parse the string value to a localtime array" ilk="function" name="localtime" returns="integer" signature="localtime( string $text_to_parse[, int $parse_pos] )" src="dateformat_parse.c" /&gt;
        &lt;scope doc="Format the time value as a string" ilk="function" name="format" returns="string" signature="format( [mixed]int $args or array $args )" src="dateformat_format.c" /&gt;
        &lt;scope doc="Get formatter&amp;apos;s last error code" ilk="function" name="getErrorCode" returns="int" signature="getErrorCode()" src="dateformat.c" /&gt;
        &lt;scope doc="Get text description for formatter&amp;apos;s last error code" ilk="function" name="getErrorMessage" returns="string" signature="getErrorMessage( )" src="dateformat.c" /&gt;
        &lt;scope doc="Create formatter" ilk="function" name="create" returns="IntlDateFormatter" signature="create(string $locale, long date_type, long time_type[, string $timezone_str, long $calendar, string $pattern] )" src="dateformat_create.cpp" /&gt;
        &lt;scope doc="IntlDateFormatter object constructor" ilk="function" name="__construct" returns="void" signature="__construct(string $locale, long date_type, long time_type[, string $timezone_str, long $calendar, string $pattern])" src="dateformat_create.cpp" /&gt;
        &lt;scope doc="Get formatter datetype" ilk="function" name="getDateType" returns="unicode" signature="getDateType( )" src="dateformat_attr.c" /&gt;
        &lt;scope doc="Get formatter timetype" ilk="function" name="getTimeType" returns="unicode" signature="getTimeType( )" src="dateformat_attr.c" /&gt;
        &lt;scope doc="Get formatter pattern" ilk="function" name="getPattern" returns="string" signature="getPattern( )" src="dateformat_attr.c" /&gt;
        &lt;scope doc="Set formatter pattern" ilk="function" name="setPattern" returns="bool" signature="setPattern( string $pattern )" src="dateformat_attr.c" /&gt;
        &lt;scope doc="Get formatter locale" ilk="function" name="getLocale" returns="string" signature="getLocale()" src="dateformat_attr.c" /&gt;
        &lt;scope doc="Get formatter isLenient" ilk="function" name="isLenient" returns="string" signature="isLenient()" src="dateformat_attr.c" /&gt;
        &lt;scope doc="Set formatter lenient" ilk="function" name="setLenient" returns="string" signature="setLenient()" src="dateformat_attr.c" /&gt;
        &lt;scope doc="Get formatter timezone id" ilk="function" name="getTimeZoneId" returns="string" signature="getTimeZoneId()" src="dateformat_attrcpp.cpp" /&gt;
        &lt;scope doc="Get formatter timezone" ilk="function" name="getTimeZone" returns="IntlTimeZone" signature="getTimeZone()" src="dateformat_attrcpp.cpp" /&gt;
        &lt;scope doc="Set formatter&amp;apos;s timezone" ilk="function" name="setTimeZone" returns="boolean" signature="setTimeZone(mixed $timezone)" src="dateformat_attrcpp.cpp" /&gt;
        &lt;scope doc="Get formatter calendar type" ilk="function" name="getCalendar" returns="int" signature="getCalendar( )" src="dateformat_attrcpp.cpp" /&gt;
        &lt;scope doc="Get formatter calendar" ilk="function" name="getCalendarObject" returns="IntlCalendar" signature="getCalendarObject()" src="dateformat_attrcpp.cpp" /&gt;
        &lt;scope doc="Set formatter&amp;apos;s calendar" ilk="function" name="setCalendar" returns="bool" signature="setCalendar(mixed $calendar)" src="dateformat_attrcpp.cpp" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="UConverter"&gt;
        &lt;scope doc="" ilk="function" name="setSourceEncoding" returns="bool" signature="setSourceEncoding(string encoding)" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="setDestinationEncoding" returns="bool" signature="setDestinationEncoding(string encoding)" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getSourceEncoding" returns="string" signature="getSourceEncoding()" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getDestinationEncoding" returns="string" signature="getDestinationEncoding()" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getSourceType" returns="long" signature="getSourceType()" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getDestinationType" returns="long" signature="getDestinationType()" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="__construct" returns="void" signature="__construct([string dest = &amp;apos;utf-8&amp;apos;,[string src = &amp;apos;utf-8&amp;apos;]])" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="setSubstChars" returns="bool" signature="setSubstChars(string $chars)" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getSubstChars" returns="string" signature="getSubstChars()" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="reasonText" returns="string" signature="reasonText(long reason)" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="convert" returns="string" signature="convert(string str[, bool reverse])" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="transcode" returns="string" signature="transcode(string $str, string $toEncoding, string $fromEncoding[, Array $options = array()" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getErrorCode" returns="int" signature="getErrorCode()" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getErrorMessage" returns="string" signature="getErrorMessage()" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getAvailable" returns="array" signature="getAvailable()" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getAliases" returns="array" signature="getAliases(string name)" src="converter.c" /&gt;
        &lt;scope doc="" ilk="function" name="getStandards" returns="array" signature="getStandards()" src="converter.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="NumberFormatter"&gt;
        &lt;scope doc="Parse a number" ilk="function" name="parse" returns="mixed" signature="parse( string $str[, int $type, int &amp;amp;$position ])" src="formatter_parse.c" /&gt;
        &lt;scope doc="Parse a number as currency" ilk="function" name="parseCurrency" returns="double" signature="parseCurrency( string $str, string $&amp;amp;currency[, int $&amp;amp;position] )" src="formatter_parse.c" /&gt;
        &lt;scope doc="Get formatter attribute value" ilk="function" name="getAttribute" returns="mixed" signature="getAttribute( int $attr )" src="formatter_attr.c" /&gt;
        &lt;scope doc="Get formatter attribute value" ilk="function" name="getTextAttribute" returns="string" signature="getTextAttribute( int $attr )" src="formatter_attr.c" /&gt;
        &lt;scope doc="Get formatter attribute value" ilk="function" name="setAttribute" returns="bool" signature="setAttribute( int $attr, mixed $value )" src="formatter_attr.c" /&gt;
        &lt;scope doc="Get formatter attribute value" ilk="function" name="setTextAttribute" returns="bool" signature="setTextAttribute( int $attr, string $value )" src="formatter_attr.c" /&gt;
        &lt;scope doc="Get formatter symbol value" ilk="function" name="getSymbol" returns="string" signature="getSymbol( int $attr )" src="formatter_attr.c" /&gt;
        &lt;scope doc="Set formatter symbol value" ilk="function" name="setSymbol" returns="bool" signature="setSymbol( int $attr, string $symbol )" src="formatter_attr.c" /&gt;
        &lt;scope doc="Get formatter pattern" ilk="function" name="getPattern" returns="string" signature="getPattern( )" src="formatter_attr.c" /&gt;
        &lt;scope doc="Set formatter pattern" ilk="function" name="setPattern" returns="bool" signature="setPattern( string $pattern )" src="formatter_attr.c" /&gt;
        &lt;scope doc="Get formatter locale" ilk="function" name="getLocale" returns="string" signature="getLocale([int type])" src="formatter_attr.c" /&gt;
        &lt;scope doc="Format a number" ilk="function" name="format" returns="mixed" signature="format( mixed $num[, int $type] )" src="formatter_format.c" /&gt;
        &lt;scope doc="Format a number as currency" ilk="function" name="formatCurrency" returns="mixed" signature="formatCurrency( double $num, string $currency )" src="formatter_format.c" /&gt;
        &lt;scope doc="Create number formatter" ilk="function" name="create" returns="NumberFormatter" signature="create( string $locale, int style[, string $pattern ] )" src="formatter_main.c" /&gt;
        &lt;scope doc="NumberFormatter object constructor" ilk="function" name="__construct" returns="void" signature="__construct( string $locale, int style[, string $pattern ] )" src="formatter_main.c" /&gt;
        &lt;scope doc="Get formatter&amp;apos;s last error code" ilk="function" name="getErrorCode" returns="int" signature="getErrorCode()" src="formatter_main.c" /&gt;
        &lt;scope doc="Get text description for formatter&amp;apos;s last error code" ilk="function" name="getErrorMessage" returns="string" signature="getErrorMessage( )" src="formatter_main.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ResourceBundle"&gt;
        &lt;scope doc="ResourceBundle object constructor" ilk="function" name="__construct" returns="void" signature="__construct( string $locale [, string $bundlename [, bool $fallback = true ]] )" src="resourcebundle_class.c" /&gt;
        &lt;scope doc="proto ResourceBundle resourcebundle create string&amp;#xA;locale string bundlename bool fallback true" ilk="function" name="create" returns="ResourceBundle" signature="create( string $locale [, string $bundlename [, bool $fallback = true ]] )" src="resourcebundle_class.c" /&gt;
        &lt;scope doc="proto mixed resourcebundle get ResourceBundle rb&amp;#xA;integer" ilk="function" name="get" returns="mixed" signature="get( integer" src="resourcebundle_class.c" /&gt;
        &lt;scope doc="proto int resourcebundle count ResourceBundle bundle&amp;#xA;Get resources count" ilk="function" name="count" returns="int" signature="count()" src="resourcebundle_class.c" /&gt;
        &lt;scope doc="proto array resourcebundle locales string bundlename&amp;#xA;Get available locales from ResourceBundle name" ilk="function" name="getLocales" returns="array" signature="getLocales( string $bundlename )" src="resourcebundle_class.c" /&gt;
        &lt;scope doc="proto string resourcebundle get error code&amp;#xA;ResourceBundle bundle Get text description for&amp;#xA;ResourceBundle&amp;apos;s last error code" ilk="function" name="getErrorCode" returns="string" signature="getErrorCode( )" src="resourcebundle_class.c" /&gt;
        &lt;scope doc="proto string resourcebundle get error message&amp;#xA;ResourceBundle bundle Get text description for&amp;#xA;ResourceBundle&amp;apos;s last error" ilk="function" name="getErrorMessage" returns="string" signature="getErrorMessage( )" src="resourcebundle_class.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="Transliterator"&gt;
        &lt;scope doc="Opens a transliterator by id" ilk="function" name="create" returns="Transliterator" signature="create( string id [, int direction ] )" src="transliterator_methods.c" /&gt;
        &lt;scope doc="Opens a transliterator by id" ilk="function" name="createFromRules" returns="Transliterator" signature="createFromRules( string rules [, int direction ] )" src="transliterator_methods.c" /&gt;
        &lt;scope doc="Opens the inverse transliterator transliterator" ilk="function" name="createInverse" returns="Transliterator" signature="createInverse()" src="transliterator_methods.c" /&gt;
        &lt;scope doc="Return an array with the registered transliterator IDs" ilk="function" name="listIDs" returns="array" signature="listIDs()" src="transliterator_methods.c" /&gt;
        &lt;scope doc="Transliterate a string" ilk="function" name="transliterate" returns="string" signature="transliterate( string subject [, int start = 0 [, int end = -1 ]] )" src="transliterator_methods.c" /&gt;
        &lt;scope doc="Get the last error code for this transliterator" ilk="function" name="getErrorCode" returns="int" signature="getErrorCode()" src="transliterator_methods.c" /&gt;
        &lt;scope doc="Get the last error message for this transliterator" ilk="function" name="getErrorMessage" returns="string" signature="getErrorMessage()" src="transliterator_methods.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="Locale"&gt;
        &lt;scope doc="Get default locale" ilk="function" name="getDefault" returns="string" signature="getDefault(  )" src="locale_methods.c" /&gt;
        &lt;scope doc="Set default locale" ilk="function" name="setDefault" returns="string" signature="setDefault( string $locale )" src="locale_methods.c" /&gt;
        &lt;scope doc="gets the script for the locale" ilk="function" name="getScript" returns="string" signature="getScript($locale)" src="locale_methods.c" /&gt;
        &lt;scope doc="gets the region for the locale" ilk="function" name="getRegion" returns="string" signature="getRegion($locale)" src="locale_methods.c" /&gt;
        &lt;scope doc="gets the primary language for the locale" ilk="function" name="getPrimaryLanguage" returns="string" signature="getPrimaryLanguage($locale)" src="locale_methods.c" /&gt;
        &lt;scope doc="gets the name for the locale in in locale or default&amp;#xA;locale" ilk="function" name="getDisplayName" returns="string" signature="getDisplayName($locale[, $in_locale = null])" src="locale_methods.c" /&gt;
        &lt;scope doc="gets the language for the locale in in locale or&amp;#xA;default locale" ilk="function" name="getDisplayLanguage" returns="string" signature="getDisplayLanguage($locale[, $in_locale = null])" src="locale_methods.c" /&gt;
        &lt;scope doc="gets the script for the locale in in locale or default&amp;#xA;locale" ilk="function" name="getDisplayScript" returns="string" signature="getDisplayScript($locale, $in_locale = null)" src="locale_methods.c" /&gt;
        &lt;scope doc="gets the region for the locale in in locale or default&amp;#xA;locale" ilk="function" name="getDisplayRegion" returns="string" signature="getDisplayRegion($locale, $in_locale = null)" src="locale_methods.c" /&gt;
        &lt;scope doc="return string the canonicalized locale" ilk="function" name="canonicalize" returns="string" signature="canonicalize($locale)" src="locale_methods.c" /&gt;
        &lt;scope doc="Creates a locale by combining the parts of locale-ID&amp;#xA;passed" ilk="function" name="composeLocale" returns="string" signature="composeLocale($array)" src="locale_methods.c" /&gt;
        &lt;scope doc="parses a locale-id into an array the different parts of&amp;#xA;it" ilk="function" name="parseLocale" returns="array" signature="parseLocale($locale)" src="locale_methods.c" /&gt;
        &lt;scope doc="gets an array containing the list of variants or null" ilk="function" name="getAllVariants" returns="array" signature="getAllVariants($locale)" src="locale_methods.c" /&gt;
        &lt;scope doc="Checks if a langtag filter matches with locale&amp;#xA;according to RFC &amp;apos;s basic filtering algorithm" ilk="function" name="filterMatches" returns="boolean" signature="filterMatches(string $langtag, string $locale[, bool $canonicalize])" src="locale_methods.c" /&gt;
        &lt;scope doc="Searchs the items in langtag for the best match to the&amp;#xA;language range" ilk="function" name="lookup" returns="string" signature="lookup(array $langtag, string $locale[, bool $canonicalize[, string $default = null]])" src="locale_methods.c" /&gt;
        &lt;scope doc="Tries to find out best available locale based on HTTP&amp;#xA;Accept-Language header" ilk="function" name="acceptFromHttp" returns="string" signature="acceptFromHttp(string $http_accept)" src="locale_methods.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="Normalizer"&gt;
        &lt;scope doc="Normalize a string" ilk="function" name="normalize" returns="string" signature="normalize( string $input [, string $form = FORM_C] )" src="normalizer_normalize.c" /&gt;
        &lt;scope doc="Test if a string is in a given normalization form" ilk="function" name="isNormalized" returns="bool" signature="isNormalized( string $input [, string $form = FORM_C] )" src="normalizer_normalize.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="Collator"&gt;
        &lt;scope doc="arr int sort flags Sort array using specified collator" ilk="function" name="sort" returns="bool" signature="sort( Collator $coll, array(string)" src="collator_sort.c" /&gt;
        &lt;scope doc="arr Equivalent to standard PHP sort using Collator Uses&amp;#xA;ICU ucol getSortKey for performance" ilk="function" name="sortWithSortKeys" returns="bool" signature="sortWithSortKeys( Collator $coll, array(string)" src="collator_sort.c" /&gt;
        &lt;scope doc="arr Sort array using specified collator maintaining&amp;#xA;index association" ilk="function" name="asort" returns="bool" signature="asort( Collator $coll, array(string)" src="collator_sort.c" /&gt;
        &lt;scope doc="Get a sort key for a string from a Collator" ilk="function" name="getSortKey" returns="bool" signature="getSortKey( Collator $coll, string $str )" src="collator_sort.c" /&gt;
        &lt;scope doc="Compare two strings" ilk="function" name="compare" returns="int" signature="compare( string $str1, string $str2 )" src="collator_compare.c" /&gt;
        &lt;scope doc="Gets the locale name of the collator" ilk="function" name="getLocale" returns="string" signature="getLocale( int $type )" src="collator_locale.c" /&gt;
        &lt;scope doc="Collator object constructor" ilk="function" name="__construct" returns="Collator" signature="__construct( string $locale )" src="collator_create.c" /&gt;
        &lt;scope doc="Get collation attribute value" ilk="function" name="getAttribute" returns="bool" signature="getAttribute( int $attr )" src="collator_attr.c" /&gt;
        &lt;scope doc="Returns the current collation strength" ilk="function" name="getStrength" returns="int" signature="getStrength()" src="collator_attr.c" /&gt;
        &lt;scope doc="Set the collation strength" ilk="function" name="setStrength" returns="bool" signature="setStrength(int strength)" src="collator_attr.c" /&gt;
        &lt;scope doc="Get collator&amp;apos;s last error code" ilk="function" name="getErrorCode" returns="int" signature="getErrorCode( Collator $coll )" src="collator_error.c" /&gt;
        &lt;scope doc="Get text description for collator&amp;apos;s last error code" ilk="function" name="getErrorMessage" returns="string" signature="getErrorMessage( Collator $coll )" src="collator_error.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SNMP"&gt;
        &lt;scope doc="Creates a new SNMP session to specified host" ilk="function" name="__construct" returns="SNMP" signature="__construct(int version, string hostname, string community" src="snmp.c" /&gt;
        &lt;scope doc="Close SNMP session" ilk="function" name="close" returns="bool" signature="close()" src="snmp.c" /&gt;
        &lt;scope doc="Fetch a SNMP object returning scalar for single OID and&amp;#xA;array of oid- gt value pairs for multi OID request" ilk="function" name="get" returns="mixed" signature="get(mixed object_id [, bool preserve_keys])" src="snmp.c" /&gt;
        &lt;scope doc="Fetch a SNMP object returning scalar for single OID and&amp;#xA;array of oid- gt value pairs for multi OID request" ilk="function" name="getnext" returns="mixed" signature="getnext(mixed object_id)" src="snmp.c" /&gt;
        &lt;scope doc="Return all objects including their respective object id&amp;#xA;withing the specified one as array of oid- gt value&amp;#xA;pairs" ilk="function" name="walk" returns="mixed" signature="walk(mixed object_id [, bool $suffix_as_key = FALSE [, int $max_repetitions [, int $non_repeaters]])" src="snmp.c" /&gt;
        &lt;scope doc="Set the value of a SNMP object" ilk="function" name="set" returns="bool" signature="set(mixed object_id, mixed type, mixed value)" src="snmp.c" /&gt;
        &lt;scope doc="Set SNMPv security-related session parameters" ilk="function" name="setSecurity" returns="bool" signature="setSecurity(string sec_level, [ string auth_protocol, string auth_passphrase [, string priv_protocol, string priv_passphrase [, string contextName [, string contextEngineID]]]])" src="snmp.c" /&gt;
        &lt;scope doc="Get last error code number" ilk="function" name="getErrno" returns="long" signature="getErrno()" src="snmp.c" /&gt;
        &lt;scope doc="Get last error message" ilk="function" name="getError" returns="long" signature="getError()" src="snmp.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="XMLReader"&gt;
        &lt;scope doc="Closes xmlreader - current frees resources until&amp;#xA;xmlTextReaderClose is fixed in libxml" ilk="function" name="close" returns="boolean" signature="close()" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Get value of an attribute from current element" ilk="function" name="getAttribute" returns="string" signature="getAttribute(string name)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Get value of an attribute at index from current element" ilk="function" name="getAttributeNo" returns="string" signature="getAttributeNo(int index)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Get value of a attribute via name and namespace from&amp;#xA;current element" ilk="function" name="getAttributeNs" returns="string" signature="getAttributeNs(string name, string namespaceURI)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Indicates whether given property one of the parser&amp;#xA;option constants is set or not on parser" ilk="function" name="getParserProperty" returns="boolean" signature="getParserProperty(int property)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Returns boolean indicating if parsed document is valid&amp;#xA;or not Must set XMLREADER LOADDTD or XMLREADER VALIDATE&amp;#xA;parser option prior" ilk="function" name="isValid" returns="boolean" signature="isValid()" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Return namespaceURI for associated prefix on current&amp;#xA;node" ilk="function" name="lookupNamespace" returns="string" signature="lookupNamespace(string prefix)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Positions reader at specified attribute - Returns TRUE&amp;#xA;on success and FALSE on failure" ilk="function" name="moveToAttribute" returns="boolean" signature="moveToAttribute(string name)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Positions reader at attribute at specified index&amp;#xA;Returns TRUE on success and FALSE on failure" ilk="function" name="moveToAttributeNo" returns="boolean" signature="moveToAttributeNo(int index)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Positions reader at attribute spcified by name and&amp;#xA;namespaceURI Returns TRUE on success and FALSE on&amp;#xA;failure" ilk="function" name="moveToAttributeNs" returns="boolean" signature="moveToAttributeNs(string name, string namespaceURI)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Moves the position of the current instance to the node&amp;#xA;that contains the current Attribute node" ilk="function" name="moveToElement" returns="boolean" signature="moveToElement()" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Moves the position of the current instance to the first&amp;#xA;attribute associated with the current node" ilk="function" name="moveToFirstAttribute" returns="boolean" signature="moveToFirstAttribute()" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Moves the position of the current instance to the next&amp;#xA;attribute associated with the current node" ilk="function" name="moveToNextAttribute" returns="boolean" signature="moveToNextAttribute()" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Moves the position of the current instance to the next&amp;#xA;node in the stream" ilk="function" name="read" returns="boolean" signature="read()" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Moves the position of the current instance to the next&amp;#xA;node in the stream" ilk="function" name="next" returns="boolean" signature="next([string localname])" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Sets the URI that the XMLReader will parse" ilk="function" name="open" returns="boolean" signature="open(string URI [, string encoding [, int options]])" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Reads the contents of the current node including child&amp;#xA;nodes and markup" ilk="function" name="readInnerXml" returns="string" signature="readInnerXml()" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Reads the contents of the current node including child&amp;#xA;nodes and markup" ilk="function" name="readOuterXml" returns="boolean" signature="readOuterXml()" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Reads the contents of an element or a text node as a&amp;#xA;string" ilk="function" name="readString" returns="boolean" signature="readString()" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Use W C XSD schema to validate the document as it is&amp;#xA;processed Activation is only possible before the first" ilk="function" name="setSchema" returns="boolean" signature="setSchema(string filename)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Sets parser property one of the parser option constants&amp;#xA;Properties must be set after open or XML and before the" ilk="function" name="setParserProperty" returns="boolean" signature="setParserProperty(int property, boolean value)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Sets the string that the XMLReader will parse" ilk="function" name="setRelaxNGSchema" returns="boolean" signature="setRelaxNGSchema(string filename)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Sets the string that the XMLReader will parse" ilk="function" name="setRelaxNGSchemaSource" returns="boolean" signature="setRelaxNGSchemaSource(string source)" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Sets the string that the XMLReader will parse" ilk="function" name="XML" returns="boolean" signature="XML(string source [, string encoding [, int options]])" src="php_xmlreader.c" /&gt;
        &lt;scope doc="Moves the position of the current instance to the next&amp;#xA;node in the stream" ilk="function" name="expand" returns="boolean" signature="expand()" src="php_xmlreader.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="PDO"&gt;
        &lt;scope doc="Returns true if the copy worked fine or false if error" ilk="function" name="pgsqlCopyFromArray" returns="string" signature="pgsqlCopyFromArray(string $table_name , array $rows [, string $delimiter [, string $null_as ] [, string $fields])" src="pgsql_driver.c" /&gt;
        &lt;scope doc="Returns true if the copy worked fine or false if error" ilk="function" name="pgsqlCopyFromFile" returns="string" signature="pgsqlCopyFromFile(string $table_name , string $filename [, string $delimiter [, string $null_as ] [, string $fields])" src="pgsql_driver.c" /&gt;
        &lt;scope doc="Returns true if the copy worked fine or false if error" ilk="function" name="pgsqlCopyToFile" returns="string" signature="pgsqlCopyToFile(string $table_name , $filename, [string $delimiter [, string $null_as [, string $fields]]])" src="pgsql_driver.c" /&gt;
        &lt;scope doc="Returns true if the copy worked fine or false if error" ilk="function" name="pgsqlCopyToArray" returns="string" signature="pgsqlCopyToArray(string $table_name , [string $delimiter [, string $null_as [, string $fields]]])" src="pgsql_driver.c" /&gt;
        &lt;scope doc="Creates a new large object returning its identifier&amp;#xA;Must be called inside a transaction" ilk="function" name="pgsqlLOBCreate" returns="string" signature="pgsqlLOBCreate()" src="pgsql_driver.c" /&gt;
        &lt;scope doc="Opens an existing large object stream Must be called&amp;#xA;inside a transaction" ilk="function" name="pgsqlLOBOpen" returns="resource" signature="pgsqlLOBOpen(string oid [, string mode = &amp;apos;rb&amp;apos;])" src="pgsql_driver.c" /&gt;
        &lt;scope doc="Deletes the large object identified by oid Must be&amp;#xA;called inside a transaction" ilk="function" name="pgsqlLOBUnlink" returns="bool" signature="pgsqlLOBUnlink(string oid)" src="pgsql_driver.c" /&gt;
        &lt;scope doc="" ilk="function" name="__construct" returns="void" signature="__construct(string dsn, string username, string passwd [, array options])" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Prepares a statement for execution and returns a&amp;#xA;statement object" ilk="function" name="prepare" returns="PDOStatement" signature="prepare(string statment [, array options])" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Initiates a transaction" ilk="function" name="beginTransaction" returns="bool" signature="beginTransaction()" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Commit a transaction" ilk="function" name="commit" returns="bool" signature="commit()" src="pdo_dbh.c" /&gt;
        &lt;scope doc="roll back a transaction" ilk="function" name="rollBack" returns="bool" signature="rollBack()" src="pdo_dbh.c" /&gt;
        &lt;scope doc="determine if inside a transaction" ilk="function" name="inTransaction" returns="bool" signature="inTransaction()" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Set an attribute" ilk="function" name="setAttribute" returns="bool" signature="setAttribute(long attribute, mixed value)" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Get an attribute" ilk="function" name="getAttribute" returns="mixed" signature="getAttribute(long attribute)" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Execute a query that does not return a row set&amp;#xA;returning the number of affected rows" ilk="function" name="exec" returns="long" signature="exec(string query)" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Returns the id of the last row that we affected on this&amp;#xA;connection Some databases require a sequence or table" ilk="function" name="lastInsertId" returns="string" signature="lastInsertId([string seqname])" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Fetch the error code associated with the last operation&amp;#xA;on the database handle" ilk="function" name="errorCode" returns="string" signature="errorCode()" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Fetch extended error information associated with the&amp;#xA;last operation on the database handle" ilk="function" name="errorInfo" returns="int" signature="errorInfo()" src="pdo_dbh.c" /&gt;
        &lt;scope doc="args Prepare and execute sql returns the statement&amp;#xA;object for iteration" ilk="function" name="query" returns="object" signature="query(string sql [, PDOStatement::setFetchMode()" src="pdo_dbh.c" /&gt;
        &lt;scope doc="quotes string for use in a query The optional paramtype&amp;#xA;acts as a hint for drivers that have alternate quoting" ilk="function" name="quote" returns="string" signature="quote(string string [, int paramtype])" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Prevents use of a PDO instance that has been&amp;#xA;unserialized" ilk="function" name="__wakeup" returns="int" signature="__wakeup()" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Prevents serialization of a PDO instance" ilk="function" name="__sleep" returns="int" signature="__sleep()" src="pdo_dbh.c" /&gt;
        &lt;scope doc="Return array of available PDO drivers" ilk="function" name="getAvailableDrivers" returns="array" signature="getAvailableDrivers()" src="pdo_dbh.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SessionHandler"&gt;
        &lt;scope doc="Wraps the old open handler" ilk="function" name="open" returns="bool" signature="open(string save_path, string session_name)" src="mod_user_class.c" /&gt;
        &lt;scope doc="Wraps the old close handler" ilk="function" name="close" returns="bool" signature="close()" src="mod_user_class.c" /&gt;
        &lt;scope doc="Wraps the old read handler" ilk="function" name="read" returns="bool" signature="read(string id)" src="mod_user_class.c" /&gt;
        &lt;scope doc="Wraps the old write handler" ilk="function" name="write" returns="bool" signature="write(string id, string data)" src="mod_user_class.c" /&gt;
        &lt;scope doc="Wraps the old destroy handler" ilk="function" name="destroy" returns="bool" signature="destroy(string id)" src="mod_user_class.c" /&gt;
        &lt;scope doc="Wraps the old gc handler" ilk="function" name="gc" returns="bool" signature="gc(int maxlifetime)" src="mod_user_class.c" /&gt;
        &lt;scope doc="Wraps the old create sid handler" ilk="function" name="create_sid" returns="char" signature="create_sid()" src="mod_user_class.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="SimpleXMLElement" ilk="class" name="SimpleXMLIterator"&gt;
        &lt;scope doc="Rewind to first element" ilk="function" name="rewind" returns="void" signature="rewind()" src="sxe.c" /&gt;
        &lt;scope doc="Check whether iteration is valid" ilk="function" name="valid" returns="bool" signature="valid()" src="sxe.c" /&gt;
        &lt;scope doc="Get current element" ilk="function" name="current" returns="SimpleXMLIterator" signature="current()" src="sxe.c" /&gt;
        &lt;scope doc="Get name of current child element" ilk="function" name="key" returns="string" signature="key()" src="sxe.c" /&gt;
        &lt;scope doc="Move to next element" ilk="function" name="next" returns="void" signature="next()" src="sxe.c" /&gt;
        &lt;scope doc="Check whether element has children elements" ilk="function" name="hasChildren" returns="bool" signature="hasChildren()" src="sxe.c" /&gt;
        &lt;scope doc="Get child element iterator" ilk="function" name="getChildren" returns="SimpleXMLIterator" signature="getChildren()" src="sxe.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SimpleXMLElement"&gt;
        &lt;scope doc="Runs XPath query on the XML data" ilk="function" name="xpath" returns="array" signature="xpath(string path)" src="simplexml.c" /&gt;
        &lt;scope doc="Creates a prefix ns context for the next XPath query" ilk="function" name="registerXPathNamespace" returns="bool" signature="registerXPathNamespace(string prefix, string ns)" src="simplexml.c" /&gt;
        &lt;scope doc="Return a well-formed XML string based on SimpleXML&amp;#xA;element" ilk="function" name="asXML" returns="string" signature="asXML([string filename])" src="simplexml.c" /&gt;
        &lt;scope doc="Return all namespaces in use" ilk="function" name="getNamespaces" returns="string" signature="getNamespaces([bool recursve])" src="simplexml.c" /&gt;
        &lt;scope doc="Return all namespaces registered with document" ilk="function" name="getDocNamespaces" returns="string" signature="getDocNamespaces([bool recursive [, bool from_root])" src="simplexml.c" /&gt;
        &lt;scope doc="Finds children of given node" ilk="function" name="children" returns="object" signature="children([string ns [, bool is_prefix]])" src="simplexml.c" /&gt;
        &lt;scope doc="Finds children of given node" ilk="function" name="getName" returns="object" signature="getName()" src="simplexml.c" /&gt;
        &lt;scope doc="Identifies an element&amp;apos;s attributes" ilk="function" name="attributes" returns="array" signature="attributes([string ns [, bool is_prefix]])" src="simplexml.c" /&gt;
        &lt;scope doc="Add Element with optional namespace information" ilk="function" name="addChild" returns="void" signature="addChild(string qName [, string value [, string ns]])" src="simplexml.c" /&gt;
        &lt;scope doc="Add Attribute with optional namespace information" ilk="function" name="addAttribute" returns="void" signature="addAttribute(string qName, string value [,string ns])" src="simplexml.c" /&gt;
        &lt;scope doc="U Returns the string content" ilk="function" name="__toString" returns="object" signature="__toString()" src="simplexml.c" /&gt;
        &lt;scope doc="Get number of child elements" ilk="function" name="count" returns="int" signature="count()" src="simplexml.c" /&gt;
        &lt;scope doc="SimpleXMLElement constructor" ilk="function" name="__construct" signature="__construct(string data [, int options [, bool data_is_url [, string ns [, bool is_prefix]]]])" src="simplexml.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMNode" ilk="class" name="DOMEntityReference"&gt;
        &lt;scope doc="Creates a new DOMEntityReference object" ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;variable citdl="int" name="code" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMNode" ilk="class" name="DOMProcessingInstruction"&gt;
        &lt;scope doc="Creates a new DOMProcessingInstruction object" ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;variable citdl="string" name="data" /&gt;
        &lt;variable citdl="string" name="target" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMNode" ilk="class" name="DOMDocumentFragment"&gt;
        &lt;scope doc="Append XML data" ilk="function" name="appendXML" signature="appendXML()" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMNode" ilk="class" name="DOMDocument"&gt;
        &lt;scope doc="Creates a new DOMDocument object" ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope doc="Create new attribute" ilk="function" name="createAttribute" signature="createAttribute()" /&gt;
        &lt;scope doc="Create new attribute node with an associated namespace" ilk="function" name="createAttributeNS" signature="createAttributeNS()" /&gt;
        &lt;scope doc="Create new cdata node" ilk="function" name="createCDATASection" signature="createCDATASection()" /&gt;
        &lt;scope doc="Create new comment node" ilk="function" name="createComment" signature="createComment()" /&gt;
        &lt;scope doc="Create new document fragment" ilk="function" name="createDocumentFragment" signature="createDocumentFragment()" /&gt;
        &lt;scope doc="Create new element node" ilk="function" name="createElement" signature="createElement()" /&gt;
        &lt;scope doc="Create new element node with an associated namespace" ilk="function" name="createElementNS" signature="createElementNS()" /&gt;
        &lt;scope doc="Create new entity reference node" ilk="function" name="createEntityReference" signature="createEntityReference()" /&gt;
        &lt;scope doc="Creates new PI node" ilk="function" name="createProcessingInstruction" signature="createProcessingInstruction()" /&gt;
        &lt;scope doc="Create new text node" ilk="function" name="createTextNode" signature="createTextNode()" /&gt;
        &lt;scope doc="Searches for an element with a certain id" ilk="function" name="getElementById" signature="getElementById()" /&gt;
        &lt;scope doc="Searches for all elements with given tag name" ilk="function" name="getElementsByTagName" signature="getElementsByTagName()" /&gt;
        &lt;scope doc="Searches for all elements with given tag name in specified namespace" ilk="function" name="getElementsByTagNameNS" signature="getElementsByTagNameNS()" /&gt;
        &lt;scope doc="Import node into current document" ilk="function" name="importNode" signature="importNode()" /&gt;
        &lt;scope doc="Load XML from a file" ilk="function" name="load" signature="load()" /&gt;
        &lt;scope doc="Load HTML from a string" ilk="function" name="loadHTML" signature="loadHTML()" /&gt;
        &lt;scope doc="Load HTML from a file" ilk="function" name="loadHTMLFile" signature="loadHTMLFile()" /&gt;
        &lt;scope doc="Load XML from a string" ilk="function" name="loadXML" signature="loadXML()" /&gt;
        &lt;scope doc="Normalizes the document" ilk="function" name="normalize" signature="normalize()" /&gt;
        &lt;scope doc="Performs relaxNG validation on the document" ilk="function" name="relaxNGValidate" signature="relaxNGValidate()" /&gt;
        &lt;scope doc="Performs relaxNG validation on the document" ilk="function" name="relaxNGValidateSource" signature="relaxNGValidateSource()" /&gt;
        &lt;scope doc="Dumps the internal XML tree back into a file" ilk="function" name="save" signature="save()" /&gt;
        &lt;scope doc="Dumps the internal document into a string using HTML formatting" ilk="function" name="saveHTML" signature="saveHTML()" /&gt;
        &lt;scope doc="Dumps the internal document into a file using HTML formatting" ilk="function" name="saveHTMLFile" signature="saveHTMLFile()" /&gt;
        &lt;scope doc="Dumps the internal XML tree back into a string" ilk="function" name="saveXML" signature="saveXML()" /&gt;
        &lt;scope doc="Validates a document based on a schema" ilk="function" name="schemaValidate" signature="schemaValidate()" /&gt;
        &lt;scope doc="Validates a document based on a schema" ilk="function" name="schemaValidateSource" signature="schemaValidateSource()" /&gt;
        &lt;scope doc="Validates the document based on its DTD" ilk="function" name="validate" signature="validate()" /&gt;
        &lt;scope doc="Substitutes XIncludes in a DOMDocument Object" ilk="function" name="xinclude" signature="xinclude()" /&gt;
        &lt;variable citdl="string" name="xmlVersion" /&gt;
        &lt;variable citdl="bool" name="xmlStandalone" /&gt;
        &lt;variable citdl="string" name="xmlEncoding" /&gt;
        &lt;variable citdl="string" name="version" /&gt;
        &lt;variable citdl="bool" name="validateOnParse" /&gt;
        &lt;variable citdl="bool" name="substituteEntities" /&gt;
        &lt;variable citdl="bool" name="strictErrorChecking" /&gt;
        &lt;variable citdl="bool" name="standalone" /&gt;
        &lt;variable citdl="bool" name="resolveExternals" /&gt;
        &lt;variable citdl="bool" name="recover" /&gt;
        &lt;variable citdl="bool" name="preserveWhiteSpace" /&gt;
        &lt;variable citdl="DOMImplementation" name="implementation" /&gt;
        &lt;variable citdl="bool" name="formatOutput" /&gt;
        &lt;variable citdl="string" name="encoding" /&gt;
        &lt;variable citdl="string" name="documentURI" /&gt;
        &lt;variable citdl="DOMElement" name="documentElement" /&gt;
        &lt;variable citdl="DOMDocumentType" name="doctype" /&gt;
        &lt;variable citdl="DOMConfiguration" name="config" /&gt;
        &lt;variable citdl="string" name="actualEncoding" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMXPath"&gt;
        &lt;scope doc="Creates a new DOMXPath object" ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope doc="Evaluates the given XPath expression and returns a typed result if possible." ilk="function" name="evaluate" signature="evaluate()" /&gt;
        &lt;scope doc="Evaluates the given XPath expression" ilk="function" name="query" signature="query()" /&gt;
        &lt;scope doc="Registers the namespace with the DOMXPath object" ilk="function" name="registerNamespace" signature="registerNamespace()" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMCharacterData" ilk="class" name="DOMComment"&gt;
        &lt;scope doc="Creates a new DOMComment object" ilk="function" name="__construct" signature="__construct()" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMText" ilk="class" name="DOMCdataSection"&gt;
        &lt;scope doc="" ilk="function" name="__construct" returns="void" signature="__construct(string value)" src="cdatasection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMNode" ilk="class" name="DOMAttr"&gt;
        &lt;scope doc="Creates a new DOMAttr object" ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope doc="Checks if attribute is a defined ID" ilk="function" name="isId" signature="isId()" /&gt;
        &lt;variable citdl="string" name="value" /&gt;
        &lt;variable citdl="bool" name="specified" /&gt;
        &lt;variable citdl="bool" name="schemaTypeInfo" /&gt;
        &lt;variable citdl="DOMElement" name="ownerElement" /&gt;
        &lt;variable citdl="string" name="name" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMNode"&gt;
        &lt;scope doc="Adds new child at the end of the children" ilk="function" name="appendChild" signature="appendChild()" /&gt;
        &lt;scope doc="Clones a node" ilk="function" name="cloneNode" signature="cloneNode()" /&gt;
        &lt;scope doc="Checks if node has attributes" ilk="function" name="hasAttributes" signature="hasAttributes()" /&gt;
        &lt;scope doc="Checks if node has children" ilk="function" name="hasChildNodes" signature="hasChildNodes()" /&gt;
        &lt;scope doc="Adds a new child before a reference node" ilk="function" name="insertBefore" signature="insertBefore()" /&gt;
        &lt;scope doc="Indicates if two nodes are the same node" ilk="function" name="isSameNode" signature="isSameNode()" /&gt;
        &lt;scope doc="Checks if feature is supported for specified version" ilk="function" name="isSupported" signature="isSupported()" /&gt;
        &lt;scope doc="Gets the namespace URI of the node based on the prefix" ilk="function" name="lookupNamespaceURI" signature="lookupNamespaceURI()" /&gt;
        &lt;scope doc="Gets the namespace prefix of the node based on the namespace URI" ilk="function" name="lookupPrefix" signature="lookupPrefix()" /&gt;
        &lt;scope doc="Normalizes the node" ilk="function" name="normalize" signature="normalize()" /&gt;
        &lt;scope doc="Removes child from list of children" ilk="function" name="removeChild" signature="removeChild()" /&gt;
        &lt;scope doc="Replaces a child" ilk="function" name="replaceChild" signature="replaceChild()" /&gt;
        &lt;variable citdl="string" name="textContent" /&gt;
        &lt;variable citdl="string" name="baseURI" /&gt;
        &lt;variable citdl="string" name="localName" /&gt;
        &lt;variable citdl="string" name="prefix" /&gt;
        &lt;variable citdl="string" name="namespaceURI" /&gt;
        &lt;variable citdl="DOMDocument" name="ownerDocument" /&gt;
        &lt;variable citdl="DOMNamedNodeMap" name="attributes" /&gt;
        &lt;variable citdl="DOMNode" name="nextSibling" /&gt;
        &lt;variable citdl="DOMNode" name="previousSibling" /&gt;
        &lt;variable citdl="DOMNode" name="lastChild" /&gt;
        &lt;variable citdl="DOMNode" name="firstChild" /&gt;
        &lt;variable citdl="DOMNodeList" name="childNodes" /&gt;
        &lt;variable citdl="DOMNode" name="parentNode" /&gt;
        &lt;variable citdl="int" name="nodeType" /&gt;
        &lt;variable citdl="string" name="nodeValue" /&gt;
        &lt;variable citdl="string" name="nodeName" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMNode" ilk="class" name="DOMElement"&gt;
        &lt;scope doc="Creates a new DOMElement object" ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope doc="Returns value of attribute" ilk="function" name="getAttribute" signature="getAttribute()" /&gt;
        &lt;scope doc="Returns attribute node" ilk="function" name="getAttributeNode" signature="getAttributeNode()" /&gt;
        &lt;scope doc="Returns attribute node" ilk="function" name="getAttributeNodeNS" signature="getAttributeNodeNS()" /&gt;
        &lt;scope doc="Returns value of attribute" ilk="function" name="getAttributeNS" signature="getAttributeNS()" /&gt;
        &lt;scope doc="Gets elements by tagname" ilk="function" name="getElementsByTagName" signature="getElementsByTagName()" /&gt;
        &lt;scope doc="Get elements by namespaceURI and localName" ilk="function" name="getElementsByTagNameNS" signature="getElementsByTagNameNS()" /&gt;
        &lt;scope doc="Checks to see if attribute exists" ilk="function" name="hasAttribute" signature="hasAttribute()" /&gt;
        &lt;scope doc="Checks to see if attribute exists" ilk="function" name="hasAttributeNS" signature="hasAttributeNS()" /&gt;
        &lt;scope doc="Removes attribute" ilk="function" name="removeAttribute" signature="removeAttribute()" /&gt;
        &lt;scope doc="Removes attribute" ilk="function" name="removeAttributeNode" signature="removeAttributeNode()" /&gt;
        &lt;scope doc="Removes attribute" ilk="function" name="removeAttributeNS" signature="removeAttributeNS()" /&gt;
        &lt;scope doc="Adds new attribute" ilk="function" name="setAttribute" signature="setAttribute()" /&gt;
        &lt;scope doc="Adds new attribute node to element" ilk="function" name="setAttributeNode" signature="setAttributeNode()" /&gt;
        &lt;scope doc="Adds new attribute node to element" ilk="function" name="setAttributeNodeNS" signature="setAttributeNodeNS()" /&gt;
        &lt;scope doc="Adds new attribute" ilk="function" name="setAttributeNS" signature="setAttributeNS()" /&gt;
        &lt;variable citdl="string" name="tagName" /&gt;
        &lt;variable citdl="bool" name="schemaTypeInfo" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMCharacterData" ilk="class" name="DOMText"&gt;
        &lt;scope doc="Creates a new DOMText object" ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope doc="Indicates whether this text node contains whitespace" ilk="function" name="isWhitespaceInElementContent" signature="isWhitespaceInElementContent()" /&gt;
        &lt;scope doc="Breaks this node into two nodes at the specified offset" ilk="function" name="splitText" signature="splitText()" /&gt;
        &lt;variable citdl="string" name="wholeText" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ZipArchive"&gt;
        &lt;scope doc="Create new zip using source uri for output return TRUE&amp;#xA;on success or the error code" ilk="function" name="open" returns="mixed" signature="open(string source [, int flags])" src="php_zip.c" /&gt;
        &lt;scope doc="close the zip archive" ilk="function" name="close" returns="bool" signature="close()" src="php_zip.c" /&gt;
        &lt;scope doc="Returns the status error message system and or zip&amp;#xA;messages" ilk="function" name="getStatusString" returns="string" signature="getStatusString()" src="php_zip.c" /&gt;
        &lt;scope doc="Returns the index of the entry named filename in the&amp;#xA;archive" ilk="function" name="createEmptyDir" returns="bool" signature="createEmptyDir(string dirname)" src="php_zip.c" /&gt;
        &lt;scope doc="Add files matching the glob pattern See php&amp;apos;s glob for&amp;#xA;the pattern syntax" ilk="function" name="addGlob" returns="bool" signature="addGlob(string pattern[,int flags [, array options]])" src="php_zip.c" /&gt;
        &lt;scope doc="Add files matching the pcre pattern See php&amp;apos;s pcre for&amp;#xA;the pattern syntax" ilk="function" name="addPattern" returns="bool" signature="addPattern(string pattern[, string path [, array options]])" src="php_zip.c" /&gt;
        &lt;scope doc="Add a file in a Zip archive using its path and the name&amp;#xA;to use" ilk="function" name="addFile" returns="bool" signature="addFile(string filepath[, string entryname[, int start [, int length]]])" src="php_zip.c" /&gt;
        &lt;scope doc="Add a file using content and the entry name" ilk="function" name="addFromString" returns="bool" signature="addFromString(string name, string content)" src="php_zip.c" /&gt;
        &lt;scope doc="Returns the information about a the zip entry filename" ilk="function" name="statName" returns="array" signature="statName(string filename[, int flags])" src="php_zip.c" /&gt;
        &lt;scope doc="Returns the zip entry informations using its index" ilk="function" name="statIndex" returns="resource" signature="statIndex(int index[, int flags])" src="php_zip.c" /&gt;
        &lt;scope doc="Returns the index of the entry named filename in the&amp;#xA;archive" ilk="function" name="locateName" returns="int" signature="locateName(string filename[, int flags])" src="php_zip.c" /&gt;
        &lt;scope doc="Returns the name of the file at position index" ilk="function" name="getNameIndex" returns="string" signature="getNameIndex(int index [, int flags])" src="php_zip.c" /&gt;
        &lt;scope doc="Set or remove NULL &amp;apos;&amp;apos; the comment of the archive" ilk="function" name="setArchiveComment" returns="bool" signature="setArchiveComment(string comment)" src="php_zip.c" /&gt;
        &lt;scope doc="Returns the comment of an entry using its index" ilk="function" name="getArchiveComment" returns="string" signature="getArchiveComment([int flags])" src="php_zip.c" /&gt;
        &lt;scope doc="Set or remove NULL &amp;apos;&amp;apos; the comment of an entry using its&amp;#xA;Name" ilk="function" name="setCommentName" returns="bool" signature="setCommentName(string name, string comment)" src="php_zip.c" /&gt;
        &lt;scope doc="Set or remove NULL &amp;apos;&amp;apos; the comment of an entry using its&amp;#xA;index" ilk="function" name="setCommentIndex" returns="bool" signature="setCommentIndex(int index, string comment)" src="php_zip.c" /&gt;
        &lt;scope doc="Returns the comment of an entry using its name" ilk="function" name="getCommentName" returns="string" signature="getCommentName(string name[, int flags])" src="php_zip.c" /&gt;
        &lt;scope doc="Returns the comment of an entry using its index" ilk="function" name="getCommentIndex" returns="string" signature="getCommentIndex(int index[, int flags])" src="php_zip.c" /&gt;
        &lt;scope doc="Delete a file using its index" ilk="function" name="deleteIndex" returns="bool" signature="deleteIndex(int index)" src="php_zip.c" /&gt;
        &lt;scope doc="Delete a file using its index" ilk="function" name="deleteName" returns="bool" signature="deleteName(string name)" src="php_zip.c" /&gt;
        &lt;scope doc="Rename an entry selected by its index to new name" ilk="function" name="renameIndex" returns="bool" signature="renameIndex(int index, string new_name)" src="php_zip.c" /&gt;
        &lt;scope doc="Rename an entry selected by its name to new name" ilk="function" name="renameName" returns="bool" signature="renameName(string name, string new_name)" src="php_zip.c" /&gt;
        &lt;scope doc="Changes to the file at position index are reverted" ilk="function" name="unchangeIndex" returns="bool" signature="unchangeIndex(int index)" src="php_zip.c" /&gt;
        &lt;scope doc="Changes to the file named &amp;apos;name&amp;apos; are reverted" ilk="function" name="unchangeName" returns="bool" signature="unchangeName(string name)" src="php_zip.c" /&gt;
        &lt;scope doc="All changes to files and global information in archive&amp;#xA;are reverted" ilk="function" name="unchangeAll" returns="bool" signature="unchangeAll()" src="php_zip.c" /&gt;
        &lt;scope doc="Revert all global changes to the archive archive For&amp;#xA;now this only reverts archive comment changes" ilk="function" name="unchangeArchive" returns="bool" signature="unchangeArchive()" src="php_zip.c" /&gt;
        &lt;scope doc="Extract one or more file from a zip archive" ilk="function" name="extractTo" returns="bool" signature="extractTo(string pathto[, mixed files])" src="php_zip.c" /&gt;
        &lt;scope doc="get the contents of an entry using its name" ilk="function" name="getFromName" returns="string" signature="getFromName(string entryname[, int len [, int flags]])" src="php_zip.c" /&gt;
        &lt;scope doc="get the contents of an entry using its index" ilk="function" name="getFromIndex" returns="string" signature="getFromIndex(int index[, int len [, int flags]])" src="php_zip.c" /&gt;
        &lt;scope doc="get a stream for an entry using its name" ilk="function" name="getStream" returns="resource" signature="getStream(string entryname)" src="php_zip.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="PDOStatement"&gt;
        &lt;scope doc="Execute a prepared statement optionally binding&amp;#xA;parameters" ilk="function" name="execute" returns="bool" signature="execute([array $bound_input_params])" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Fetches the next row and returns it or false if there&amp;#xA;are no more rows" ilk="function" name="fetch" returns="mixed" signature="fetch([int $how = PDO_FETCH_BOTH [, int $orientation [, int $offset]]])" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Fetches the next row and returns it as an object" ilk="function" name="fetchObject" returns="mixed" signature="fetchObject([string class_name [, NULL" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Returns a data of the specified column in the result&amp;#xA;set" ilk="function" name="fetchColumn" returns="string" signature="fetchColumn([int column_number])" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Returns an array of all of the results" ilk="function" name="fetchAll" returns="array" signature="fetchAll([int $how = PDO_FETCH_BOTH [, string class_name [, NULL" src="pdo_stmt.c" /&gt;
        &lt;scope doc="bind an input parameter to the value of a PHP variable&amp;#xA;paramno is the -based position of the placeholder in" ilk="function" name="bindValue" returns="bool" signature="bindValue(mixed $paramno, mixed $param [, int $type ])" src="pdo_stmt.c" /&gt;
        &lt;scope doc="bind a parameter to a PHP variable paramno is the&amp;#xA;-based position of the placeholder in the SQL statement&amp;#xA;but" ilk="function" name="bindParam" returns="bool" signature="bindParam(mixed $paramno, mixed &amp;amp;$param [, int $type [, int $maxlen [, mixed $driverdata]]])" src="pdo_stmt.c" /&gt;
        &lt;scope doc="bind a column to a PHP variable On each row fetch param&amp;#xA;will contain the value of the corresponding column" ilk="function" name="bindColumn" returns="bool" signature="bindColumn(mixed $column, mixed &amp;amp;$param [, int $type [, int $maxlen [, mixed $driverdata]]])" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Returns the number of rows in a result set or the&amp;#xA;number of rows affected by the last execute It" ilk="function" name="rowCount" returns="int" signature="rowCount()" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Fetch the error code associated with the last operation&amp;#xA;on the statement handle" ilk="function" name="errorCode" returns="string" signature="errorCode()" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Fetch extended error information associated with the&amp;#xA;last operation on the statement handle" ilk="function" name="errorInfo" returns="array" signature="errorInfo()" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Set an attribute" ilk="function" name="setAttribute" returns="bool" signature="setAttribute(long attribute, mixed value)" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Get an attribute" ilk="function" name="getAttribute" returns="mixed" signature="getAttribute(long attribute)" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Returns the number of columns in the result set" ilk="function" name="columnCount" returns="int" signature="columnCount()" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Returns meta data for a numbered column" ilk="function" name="getColumnMeta" returns="array" signature="getColumnMeta(int $column)" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Changes the default fetch mode for subsequent fetches&amp;#xA;params have different meaning for different fetch modes" ilk="function" name="setFetchMode" returns="bool" signature="setFetchMode(int mode [mixed* params])" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Advances to the next rowset in a multi-rowset statement&amp;#xA;handle Returns true if it succeded false otherwise" ilk="function" name="nextRowset" returns="bool" signature="nextRowset()" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Closes the cursor leaving the statement ready for&amp;#xA;re-execution" ilk="function" name="closeCursor" returns="bool" signature="closeCursor()" src="pdo_stmt.c" /&gt;
        &lt;scope doc="A utility for internals hackers to debug parameter&amp;#xA;internals" ilk="function" name="debugDumpParams" returns="void" signature="debugDumpParams()" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Prevents use of a PDOStatement instance that has been&amp;#xA;unserialized" ilk="function" name="__wakeup" returns="int" signature="__wakeup()" src="pdo_stmt.c" /&gt;
        &lt;scope doc="Prevents serialization of a PDOStatement instance" ilk="function" name="__sleep" returns="int" signature="__sleep()" src="pdo_stmt.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="Reflection"&gt;
        &lt;scope doc="Exports a reflection object Returns the output if TRUE&amp;#xA;is specified for return printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(Reflector r [, bool return])" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of modifier names" ilk="function" name="getModifierNames" returns="array" signature="getModifierNames(int modifiers)" src="php_reflection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="ReflectionFunctionAbstract" ilk="class" name="ReflectionFunction"&gt;
        &lt;scope doc="Exports a reflection object Returns the output if TRUE&amp;#xA;is specified for return printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(string name [, bool return])" src="php_reflection.c" /&gt;
        &lt;scope doc="Constructor Throws an Exception in case the given&amp;#xA;function does not exist" ilk="function" name="__construct" returns="void" signature="__construct(string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns this function&amp;apos;s name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this is a closure" ilk="function" name="isClosure" returns="bool" signature="isClosure()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns this pointer bound to closure" ilk="function" name="getClosureThis" returns="bool" signature="getClosureThis()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the scope associated to the closure" ilk="function" name="getClosureScopeClass" returns="ReflectionClass" signature="getClosureScopeClass()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a dynamically created closure for the function" ilk="function" name="getClosure" returns="mixed" signature="getClosure()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this is an internal function" ilk="function" name="isInternal" returns="bool" signature="isInternal()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this is an user-defined function" ilk="function" name="isUserDefined" returns="bool" signature="isUserDefined()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this function has been disabled or not" ilk="function" name="isDisabled" returns="bool" signature="isDisabled()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the filename of the file this function was&amp;#xA;declared in" ilk="function" name="getFileName" returns="string" signature="getFileName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the line this function&amp;apos;s declaration starts at" ilk="function" name="getStartLine" returns="int" signature="getStartLine()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the line this function&amp;apos;s declaration ends at" ilk="function" name="getEndLine" returns="int" signature="getEndLine()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the doc comment for this function" ilk="function" name="getDocComment" returns="string" signature="getDocComment()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an associative array containing this function&amp;apos;s&amp;#xA;static variables and their values" ilk="function" name="getStaticVariables" returns="array" signature="getStaticVariables()" src="php_reflection.c" /&gt;
        &lt;scope doc="Invokes the function" ilk="function" name="invoke" returns="mixed" signature="invoke([mixed* args])" src="php_reflection.c" /&gt;
        &lt;scope doc="Invokes the function and pass its arguments as array" ilk="function" name="invokeArgs" returns="mixed" signature="invokeArgs(array args)" src="php_reflection.c" /&gt;
        &lt;scope doc="Gets whether this function returns a reference" ilk="function" name="returnsReference" returns="bool" signature="returnsReference()" src="php_reflection.c" /&gt;
        &lt;scope doc="Gets the number of required parameters" ilk="function" name="getNumberOfParameters" returns="bool" signature="getNumberOfParameters()" src="php_reflection.c" /&gt;
        &lt;scope doc="Gets the number of required parameters" ilk="function" name="getNumberOfRequiredParameters" returns="bool" signature="getNumberOfRequiredParameters()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of parameter objects for this function" ilk="function" name="getParameters" returns="ReflectionParameter[]" signature="getParameters()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns NULL or the extension the function belongs to" ilk="function" name="getExtension" returns="ReflectionExtension" signature="getExtension()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns false or the name of the extension the function&amp;#xA;belongs to" ilk="function" name="getExtensionName" returns="string" signature="getExtensionName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this function is deprecated" ilk="function" name="isDeprecated" returns="bool" signature="isDeprecated()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this function is a generator" ilk="function" name="isGenerator" returns="bool" signature="isGenerator()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this function is defined in namespace" ilk="function" name="inNamespace" returns="bool" signature="inNamespace()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the name of namespace where this function is&amp;#xA;defined" ilk="function" name="getNamespaceName" returns="string" signature="getNamespaceName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the short name of the function without&amp;#xA;namespace part" ilk="function" name="getShortName" returns="string" signature="getShortName()" src="php_reflection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ReflectionParameter"&gt;
        &lt;scope doc="throws ReflectionException Exports a reflection object&amp;#xA;Returns the output if TRUE is specified for return&amp;#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed function, mixed parameter [, bool return])" src="php_reflection.c" /&gt;
        &lt;scope doc="Constructor Throws an Exception in case the given&amp;#xA;method does not exist" ilk="function" name="__construct" returns="void" signature="__construct(mixed function, mixed parameter)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns this parameters&amp;apos;s name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the ReflectionFunction for the function of this&amp;#xA;parameter" ilk="function" name="getDeclaringFunction" returns="ReflectionFunction" signature="getDeclaringFunction()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns in which class this parameter is defined not&amp;#xA;the typehint of the parameter" ilk="function" name="getDeclaringClass" returns="ReflectionClass" signature="getDeclaringClass()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns this parameters&amp;apos;s class hint or NULL if there&amp;#xA;is none" ilk="function" name="getClass" returns="ReflectionClass" signature="getClass()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether parameter MUST be an array" ilk="function" name="isArray" returns="bool" signature="isArray()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether parameter MUST be callable" ilk="function" name="isCallable" returns="bool" signature="isCallable()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether NULL is allowed as this parameters&amp;apos;s&amp;#xA;value" ilk="function" name="allowsNull" returns="bool" signature="allowsNull()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this parameters is passed to by&amp;#xA;reference" ilk="function" name="isPassedByReference" returns="bool" signature="isPassedByReference()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this parameter can be passed by value" ilk="function" name="canBePassedByValue" returns="bool" signature="canBePassedByValue()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this parameter is an optional parameter" ilk="function" name="getPosition" returns="bool" signature="getPosition()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this parameter is an optional parameter" ilk="function" name="isOptional" returns="bool" signature="isOptional()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether the default value of this parameter is&amp;#xA;available" ilk="function" name="isDefaultValueAvailable" returns="bool" signature="isDefaultValueAvailable()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the default value of this parameter or throws&amp;#xA;an exception" ilk="function" name="getDefaultValue" returns="bool" signature="getDefaultValue()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether the default value of this parameter is&amp;#xA;constant" ilk="function" name="isDefaultValueConstant" returns="bool" signature="isDefaultValueConstant()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the default value&amp;apos;s constant name if default&amp;#xA;value is constant or null" ilk="function" name="getDefaultValueConstantName" returns="mixed" signature="getDefaultValueConstantName()" src="php_reflection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="ReflectionFunctionAbstract" ilk="class" name="ReflectionMethod"&gt;
        &lt;scope doc="throws ReflectionException Exports a reflection object&amp;#xA;Returns the output if TRUE is specified for return&amp;#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed class, string name [, bool return])" src="php_reflection.c" /&gt;
        &lt;scope doc="Constructor Throws an Exception in case the given&amp;#xA;method does not exist" ilk="function" name="__construct" returns="void" signature="__construct(mixed class_or_method [, string name])" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" /&gt;
        &lt;scope doc="Invokes the function" ilk="function" name="getClosure" returns="mixed" signature="getClosure([mixed object])" src="php_reflection.c" /&gt;
        &lt;scope doc="Invokes the method" ilk="function" name="invoke" returns="mixed" signature="invoke(mixed object, mixed* args)" src="php_reflection.c" /&gt;
        &lt;scope doc="Invokes the function and pass its arguments as array" ilk="function" name="invokeArgs" returns="mixed" signature="invokeArgs(mixed object, array args)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this method is final" ilk="function" name="isFinal" returns="bool" signature="isFinal()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this method is abstract" ilk="function" name="isAbstract" returns="bool" signature="isAbstract()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this method is public" ilk="function" name="isPublic" returns="bool" signature="isPublic()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this method is private" ilk="function" name="isPrivate" returns="bool" signature="isPrivate()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this method is protected" ilk="function" name="isProtected" returns="bool" signature="isProtected()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this method is static" ilk="function" name="isStatic" returns="bool" signature="isStatic()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this method is the constructor" ilk="function" name="isConstructor" returns="bool" signature="isConstructor()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this method is static" ilk="function" name="isDestructor" returns="bool" signature="isDestructor()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a bitfield of the access modifiers for this&amp;#xA;method" ilk="function" name="getModifiers" returns="int" signature="getModifiers()" src="php_reflection.c" /&gt;
        &lt;scope doc="Get the declaring class" ilk="function" name="getDeclaringClass" returns="ReflectionClass" signature="getDeclaringClass()" src="php_reflection.c" /&gt;
        &lt;scope doc="Get the prototype" ilk="function" name="getPrototype" returns="ReflectionClass" signature="getPrototype()" src="php_reflection.c" /&gt;
        &lt;scope doc="Sets whether non-public methods can be invoked" ilk="function" name="setAccessible" returns="void" signature="setAccessible(bool visible)" src="php_reflection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ReflectionClass"&gt;
        &lt;scope doc="throws ReflectionException Exports a reflection object&amp;#xA;Returns the output if TRUE is specified for return&amp;#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed argument [, bool return])" src="php_reflection.c" /&gt;
        &lt;scope doc="throws ReflectionException Constructor Takes a string&amp;#xA;or an instance as an argument" ilk="function" name="__construct" returns="void" signature="__construct(mixed argument)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an associative array containing all static&amp;#xA;property values of the class" ilk="function" name="getStaticProperties" returns="array" signature="getStaticProperties()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the value of a static property" ilk="function" name="getStaticPropertyValue" returns="mixed" signature="getStaticPropertyValue(string name [, mixed default])" src="php_reflection.c" /&gt;
        &lt;scope doc="Sets the value of a static property" ilk="function" name="setStaticPropertyValue" returns="void" signature="setStaticPropertyValue($name, $value)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an associative array containing copies of all&amp;#xA;default property values of the class" ilk="function" name="getDefaultProperties" returns="array" signature="getDefaultProperties()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the class&amp;apos; name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is an internal class" ilk="function" name="isInternal" returns="bool" signature="isInternal()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is user-defined" ilk="function" name="isUserDefined" returns="bool" signature="isUserDefined()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the filename of the file this class was&amp;#xA;declared in" ilk="function" name="getFileName" returns="string" signature="getFileName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the line this class&amp;apos; declaration starts at" ilk="function" name="getStartLine" returns="int" signature="getStartLine()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the line this class&amp;apos; declaration ends at" ilk="function" name="getEndLine" returns="int" signature="getEndLine()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the doc comment for this class" ilk="function" name="getDocComment" returns="string" signature="getDocComment()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the class&amp;apos; constructor if there is one NULL&amp;#xA;otherwise" ilk="function" name="getConstructor" returns="ReflectionMethod" signature="getConstructor()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether a method exists or not" ilk="function" name="hasMethod" returns="bool" signature="hasMethod(string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="throws ReflectionException Returns the class&amp;apos; method&amp;#xA;specified by its name" ilk="function" name="getMethod" returns="ReflectionMethod" signature="getMethod(string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of this class&amp;apos; methods" ilk="function" name="getMethods" returns="ReflectionMethod[]" signature="getMethods([long $filter])" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether a property exists or not" ilk="function" name="hasProperty" returns="bool" signature="hasProperty(string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="throws ReflectionException Returns the class&amp;apos; property&amp;#xA;specified by its name" ilk="function" name="getProperty" returns="ReflectionProperty" signature="getProperty(string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of this class&amp;apos; properties" ilk="function" name="getProperties" returns="ReflectionProperty[]" signature="getProperties([long $filter])" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether a constant exists or not" ilk="function" name="hasConstant" returns="bool" signature="hasConstant(string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an associative array containing this class&amp;apos;&amp;#xA;constants and their values" ilk="function" name="getConstants" returns="array" signature="getConstants()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the class&amp;apos; constant specified by its name" ilk="function" name="getConstant" returns="mixed" signature="getConstant(string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is instantiable" ilk="function" name="isInstantiable" returns="bool" signature="isInstantiable()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is cloneable" ilk="function" name="isCloneable" returns="bool" signature="isCloneable()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this is an interface or a class" ilk="function" name="isInterface" returns="bool" signature="isInterface()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this is a trait" ilk="function" name="isTrait" returns="bool" signature="isTrait()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is final" ilk="function" name="isFinal" returns="bool" signature="isFinal()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is abstract" ilk="function" name="isAbstract" returns="bool" signature="isAbstract()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a bitfield of the access modifiers for this&amp;#xA;class" ilk="function" name="getModifiers" returns="int" signature="getModifiers()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether the given object is an instance of this&amp;#xA;class" ilk="function" name="isInstance" returns="bool" signature="isInstance(stdclass object)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an instance of this class" ilk="function" name="newInstance" returns="stdclass" signature="newInstance(mixed* args, ...)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an instance of this class without invoking its&amp;#xA;constructor" ilk="function" name="newInstanceWithoutConstructor" returns="stdclass" signature="newInstanceWithoutConstructor()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an instance of this class" ilk="function" name="newInstanceArgs" returns="stdclass" signature="newInstanceArgs([array args])" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of interfaces this class implements" ilk="function" name="getInterfaces" returns="ReflectionClass[]" signature="getInterfaces()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of names of interfaces this class&amp;#xA;implements" ilk="function" name="getInterfaceNames" returns="String[]" signature="getInterfaceNames()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of traits used by this class" ilk="function" name="getTraits" returns="ReflectionClass[]" signature="getTraits()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of names of traits used by this class" ilk="function" name="getTraitNames" returns="String[]" signature="getTraitNames()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of trait aliases" ilk="function" name="getTraitaliases" returns="arra" signature="getTraitaliases()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the class&amp;apos; parent class or if none exists FALSE" ilk="function" name="getParentClass" returns="ReflectionClass" signature="getParentClass()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is a subclass of another&amp;#xA;class" ilk="function" name="isSubclassOf" returns="bool" signature="isSubclassOf(string" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is a subclass of another&amp;#xA;class" ilk="function" name="implementsInterface" returns="bool" signature="implementsInterface(string" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is iterateable can be used&amp;#xA;inside foreach" ilk="function" name="isIterateable" returns="bool" signature="isIterateable()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns NULL or the extension the class belongs to" ilk="function" name="getExtension" returns="ReflectionExtension" signature="getExtension()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns false or the name of the extension the class&amp;#xA;belongs to" ilk="function" name="getExtensionName" returns="string" signature="getExtensionName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this class is defined in namespace" ilk="function" name="inNamespace" returns="bool" signature="inNamespace()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the name of namespace where this class is&amp;#xA;defined" ilk="function" name="getNamespaceName" returns="string" signature="getNamespaceName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the short name of the class without namespace&amp;#xA;part" ilk="function" name="getShortName" returns="string" signature="getShortName()" src="php_reflection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="ReflectionClass" ilk="class" name="ReflectionObject"&gt;
        &lt;scope doc="throws ReflectionException Exports a reflection object&amp;#xA;Returns the output if TRUE is specified for return&amp;#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed argument [, bool return])" src="php_reflection.c" /&gt;
        &lt;scope doc="throws ReflectionException Constructor Takes an&amp;#xA;instance as an argument" ilk="function" name="__construct" returns="void" signature="__construct(mixed argument)" src="php_reflection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ReflectionProperty"&gt;
        &lt;scope doc="throws ReflectionException Exports a reflection object&amp;#xA;Returns the output if TRUE is specified for return&amp;#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed class, string name [, bool return])" src="php_reflection.c" /&gt;
        &lt;scope doc="Constructor Throws an Exception in case the given&amp;#xA;property does not exist" ilk="function" name="__construct" returns="void" signature="__construct(mixed class, string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the class&amp;apos; name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this property is public" ilk="function" name="isPublic" returns="bool" signature="isPublic()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this property is private" ilk="function" name="isPrivate" returns="bool" signature="isPrivate()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this property is protected" ilk="function" name="isProtected" returns="bool" signature="isProtected()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this property is static" ilk="function" name="isStatic" returns="bool" signature="isStatic()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this property is default declared at&amp;#xA;compilation time" ilk="function" name="isDefault" returns="bool" signature="isDefault()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a bitfield of the access modifiers for this&amp;#xA;property" ilk="function" name="getModifiers" returns="int" signature="getModifiers()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns this property&amp;apos;s value" ilk="function" name="getValue" returns="mixed" signature="getValue([stdclass object])" src="php_reflection.c" /&gt;
        &lt;scope doc="Sets this property&amp;apos;s value" ilk="function" name="setValue" returns="void" signature="setValue([stdclass object,] mixed value)" src="php_reflection.c" /&gt;
        &lt;scope doc="Get the declaring class" ilk="function" name="getDeclaringClass" returns="ReflectionClass" signature="getDeclaringClass()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the doc comment for this property" ilk="function" name="getDocComment" returns="string" signature="getDocComment()" src="php_reflection.c" /&gt;
        &lt;scope doc="Sets whether non-public properties can be requested" ilk="function" name="setAccessible" returns="int" signature="setAccessible(bool visible)" src="php_reflection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ReflectionExtension"&gt;
        &lt;scope doc="throws ReflectionException Exports a reflection object&amp;#xA;Returns the output if TRUE is specified for return&amp;#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(string name [, bool return])" src="php_reflection.c" /&gt;
        &lt;scope doc="Constructor Throws an Exception in case the given&amp;#xA;extension does not exist" ilk="function" name="__construct" returns="void" signature="__construct(string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns this extension&amp;apos;s name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns this extension&amp;apos;s version" ilk="function" name="getVersion" returns="string" signature="getVersion()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array of this extension&amp;apos;s fuctions" ilk="function" name="getFunctions" returns="ReflectionFunction[]" signature="getFunctions()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an associative array containing this&amp;#xA;extension&amp;apos;s constants and their values" ilk="function" name="getConstants" returns="array" signature="getConstants()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an associative array containing this&amp;#xA;extension&amp;apos;s INI entries and their values" ilk="function" name="getINIEntries" returns="array" signature="getINIEntries()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array containing ReflectionClass objects for&amp;#xA;all classes of this extension" ilk="function" name="getClasses" returns="ReflectionClass[]" signature="getClasses()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array containing all names of all classes of&amp;#xA;this extension" ilk="function" name="getClassNames" returns="array" signature="getClassNames()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns an array containing all names of all extensions&amp;#xA;this extension depends on" ilk="function" name="getDependencies" returns="array" signature="getDependencies()" src="php_reflection.c" /&gt;
        &lt;scope doc="Prints phpinfo block for the extension" ilk="function" name="info" returns="void" signature="info()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this extension is persistent" ilk="function" name="isPersistent" returns="bool" signature="isPersistent()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns whether this extension is temporary" ilk="function" name="isTemporary" returns="bool" signature="isTemporary()" src="php_reflection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ReflectionZendExtension"&gt;
        &lt;scope doc="throws ReflectionException Exports a reflection object&amp;#xA;Returns the output if TRUE is specified for return&amp;#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(string name [, bool return])" src="php_reflection.c" /&gt;
        &lt;scope doc="Constructor Throws an Exception in case the given Zend&amp;#xA;extension does not exist" ilk="function" name="__construct" returns="void" signature="__construct(string name)" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the name of this Zend extension" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the version information of this Zend extension" ilk="function" name="getVersion" returns="string" signature="getVersion()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns the name of this Zend extension&amp;apos;s author" ilk="function" name="getAuthor" returns="void" signature="getAuthor()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns this Zend extension&amp;apos;s URL" ilk="function" name="getURL" returns="void" signature="getURL()" src="php_reflection.c" /&gt;
        &lt;scope doc="Returns this Zend extension&amp;apos;s copyright information" ilk="function" name="getCopyright" returns="void" signature="getCopyright()" src="php_reflection.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="tidyNode"&gt;
        &lt;scope doc="Returns true if this node has children" ilk="function" name="hasChildren" returns="boolean" signature="hasChildren()" src="tidy.c" /&gt;
        &lt;scope doc="Returns true if this node has siblings" ilk="function" name="hasSiblings" returns="boolean" signature="hasSiblings()" src="tidy.c" /&gt;
        &lt;scope doc="Returns true if this node represents a comment" ilk="function" name="isComment" returns="boolean" signature="isComment()" src="tidy.c" /&gt;
        &lt;scope doc="Returns true if this node is part of a HTML document" ilk="function" name="isHtml" returns="boolean" signature="isHtml()" src="tidy.c" /&gt;
        &lt;scope doc="Returns true if this node represents text no markup" ilk="function" name="isText" returns="boolean" signature="isText()" src="tidy.c" /&gt;
        &lt;scope doc="Returns true if this node is JSTE" ilk="function" name="isJste" returns="boolean" signature="isJste()" src="tidy.c" /&gt;
        &lt;scope doc="Returns true if this node is ASP" ilk="function" name="isAsp" returns="boolean" signature="isAsp()" src="tidy.c" /&gt;
        &lt;scope doc="Returns true if this node is PHP" ilk="function" name="isPhp" returns="boolean" signature="isPhp()" src="tidy.c" /&gt;
        &lt;scope doc="Returns the parent node if available or NULL" ilk="function" name="getParent" returns="tidyNode" signature="getParent()" src="tidy.c" /&gt;
        &lt;scope doc="constructor for tidyNode" ilk="function" name="__construct" returns="void" signature="__construct()" src="tidy.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="RecursiveDirectoryIterator" ilk="class" name="Phar"&gt;
        &lt;scope doc="return the name of the currently running phar archive&amp;#xA;If the optional parameter is set to true return the&amp;#xA;phar" ilk="function" name="running" returns="void" signature="running([bool retphar = true])" src="phar_object.c" /&gt;
        &lt;scope doc="mount an external file or path to a location within the&amp;#xA;phar This maps an external file or directory to" ilk="function" name="mount" returns="void" signature="mount(string pharpath, string externalfile)" src="phar_object.c" /&gt;
        &lt;scope doc="mapPhar for web-based phars Reads the currently&amp;#xA;executed file a phar and registers its manifest When&amp;#xA;executed in the CLI" ilk="function" name="webPhar" returns="void" signature="webPhar([string alias, [string index, [string f404, [array mimetypes, [callback rewrites]]]]])" src="phar_object.c" /&gt;
        &lt;scope doc="Defines a list of up to SERVER variables that should be&amp;#xA;modified for execution to mask the presence of the" ilk="function" name="mungServer" returns="void" signature="mungServer(array munglist)" src="phar_object.c" /&gt;
        &lt;scope doc="instructs phar to intercept fopen file get contents&amp;#xA;opendir and all of the stat-related functions and&amp;#xA;return stat on files" ilk="function" name="interceptFileFuncs" returns="void" signature="interceptFileFuncs()" src="phar_object.c" /&gt;
        &lt;scope doc="Return a stub that can be used to run a phar-based&amp;#xA;archive without the phar extension indexfile is the CLI" ilk="function" name="createDefaultStub" returns="array" signature="createDefaultStub([string indexfile[, string webindexfile]])" src="phar_object.c" /&gt;
        &lt;scope doc="Reads the currently executed file a phar and registers&amp;#xA;its manifest" ilk="function" name="mapPhar" returns="mixed" signature="mapPhar([string alias, [int dataoffset]])" src="phar_object.c" /&gt;
        &lt;scope doc="Loads any phar archive with an alias" ilk="function" name="loadPhar" returns="mixed" signature="loadPhar(string filename [, string alias])" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the api version" ilk="function" name="apiVersion" returns="string" signature="apiVersion()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns whether phar extension supports compression&amp;#xA;using zlib bzip" ilk="function" name="canCompress" returns="bool" signature="canCompress([int method])" src="phar_object.c" /&gt;
        &lt;scope doc="Returns whether phar extension supports writing and&amp;#xA;creating phars" ilk="function" name="canWrite" returns="bool" signature="canWrite()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns whether the given filename is a valid phar&amp;#xA;filename" ilk="function" name="isValidPharFilename" returns="bool" signature="isValidPharFilename(string filename[, bool executable = true])" src="phar_object.c" /&gt;
        &lt;scope doc="Construct a Phar archive object proto void PharData&amp;#xA;construct string fname int flags string alias int file&amp;#xA;format Phar TAR" ilk="function" name="__construct" returns="void" signature="__construct(string fname [, int flags [, string alias]])" src="phar_object.c" /&gt;
        &lt;scope doc="Return array of supported signature types" ilk="function" name="getSupportedSignatures" returns="array" signature="getSupportedSignatures()" src="phar_object.c" /&gt;
        &lt;scope doc="Return array of supported comparession algorithms" ilk="function" name="getSupportedCompression" returns="array" signature="getSupportedCompression()" src="phar_object.c" /&gt;
        &lt;scope doc="Completely remove a phar archive from memory and disk" ilk="function" name="unlinkArchive" returns="array" signature="unlinkArchive(string archive)" src="phar_object.c" /&gt;
        &lt;scope doc="if persistent remove from the cache" ilk="function" name="__destruct" returns="void" signature="__destruct()" src="phar_object.c" /&gt;
        &lt;scope doc="Construct a phar archive from an existing directory&amp;#xA;recursively Optional second parameter is a regular&amp;#xA;expression for filtering directory contents" ilk="function" name="buildFromDirectory" returns="array" signature="buildFromDirectory(string base_dir[, string regex])" src="phar_object.c" /&gt;
        &lt;scope doc="Construct a phar archive from an iterator The iterator&amp;#xA;must return a series of strings that are full paths to" ilk="function" name="buildFromIterator" returns="array" signature="buildFromIterator(Iterator iter[, string base_directory])" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the number of entries in the Phar archive" ilk="function" name="count" returns="int" signature="count()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns true if the phar archive is based on the tar&amp;#xA;zip phar file format depending on whether Phar TAR" ilk="function" name="isFileFormat" returns="bool" signature="isFileFormat(int format)" src="phar_object.c" /&gt;
        &lt;scope doc="Convert a phar tar or phar zip archive to the phar file&amp;#xA;format The optional parameter allows the user to" ilk="function" name="convertToExecutable" returns="object" signature="convertToExecutable([int format[, int compression [, string file_ext]]])" src="phar_object.c" /&gt;
        &lt;scope doc="Convert an archive to a non-executable tar or zip The&amp;#xA;optional parameter allows the user to determine the new&amp;#xA;filename" ilk="function" name="convertToData" returns="object" signature="convertToData([int format[, int compression [, string file_ext]]])" src="phar_object.c" /&gt;
        &lt;scope doc="Returns Phar GZ or PHAR BZ if the entire archive is&amp;#xA;compressed tar gz tar bz and so on or" ilk="function" name="isCompressed" returns="int" signature="isCompressed()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns true if phar readonly or phar is a PharData AND&amp;#xA;the actual file is writable" ilk="function" name="isWritable" returns="bool" signature="isWritable()" src="phar_object.c" /&gt;
        &lt;scope doc="Deletes a named file within the archive" ilk="function" name="delete" returns="bool" signature="delete(string entry)" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the alias for the Phar or NULL" ilk="function" name="getAlias" returns="int" signature="getAlias()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the real path to the phar archive on disk" ilk="function" name="getPath" returns="int" signature="getPath()" src="phar_object.c" /&gt;
        &lt;scope doc="Sets the alias for a Phar archive The default value is&amp;#xA;the full path to the archive" ilk="function" name="setAlias" returns="bool" signature="setAlias(string alias)" src="phar_object.c" /&gt;
        &lt;scope doc="Return version info of Phar archive" ilk="function" name="getVersion" returns="string" signature="getVersion()" src="phar_object.c" /&gt;
        &lt;scope doc="Do not flush a writeable phar save its contents until&amp;#xA;explicitly requested" ilk="function" name="startBuffering" returns="void" signature="startBuffering()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns whether write operations are flushing to disk&amp;#xA;immediately" ilk="function" name="isBuffering" returns="bool" signature="isBuffering()" src="phar_object.c" /&gt;
        &lt;scope doc="Saves the contents of a modified archive to disk" ilk="function" name="stopBuffering" returns="bool" signature="stopBuffering()" src="phar_object.c" /&gt;
        &lt;scope doc="Change the stub in a phar phar tar or phar zip archive&amp;#xA;to something other than the default The stub" ilk="function" name="setStub" returns="bool" signature="setStub(string" src="phar_object.c" /&gt;
        &lt;scope doc="In a pure phar archive sets a stub that can be used to&amp;#xA;run the archive regardless of whether the" ilk="function" name="setDefaultStub" returns="bool" signature="setDefaultStub([string index[, string webindex]])" src="phar_object.c" /&gt;
        &lt;scope doc="Sets the signature algorithm for a phar and applies it&amp;#xA;The signature algorithm must be one of Phar MD Phar" ilk="function" name="setSignatureAlgorithm" returns="array" signature="setSignatureAlgorithm(int sigtype[, string privatekey])" src="phar_object.c" /&gt;
        &lt;scope doc="Returns a hash signature or FALSE if the archive is&amp;#xA;unsigned" ilk="function" name="getSignature" returns="array" signature="getSignature()" src="phar_object.c" /&gt;
        &lt;scope doc="Return whether phar was modified" ilk="function" name="getModified" returns="bool" signature="getModified()" src="phar_object.c" /&gt;
        &lt;scope doc="Compress a tar or phar tar with whole-file compression&amp;#xA;The parameter can be one of Phar GZ or Phar BZ" ilk="function" name="compress" returns="object" signature="compress(int method[, string extension])" src="phar_object.c" /&gt;
        &lt;scope doc="Decompress a tar or phar tar with whole-file&amp;#xA;compression" ilk="function" name="decompress" returns="object" signature="decompress([string extension])" src="phar_object.c" /&gt;
        &lt;scope doc="Compress all files within a phar or zip archive using&amp;#xA;the specified compression The parameter can be one of&amp;#xA;Phar" ilk="function" name="compressFiles" returns="object" signature="compressFiles(int method)" src="phar_object.c" /&gt;
        &lt;scope doc="decompress every file" ilk="function" name="decompressFiles" returns="bool" signature="decompressFiles()" src="phar_object.c" /&gt;
        &lt;scope doc="copy a file internal to the phar archive to another new&amp;#xA;file within the phar" ilk="function" name="copy" returns="bool" signature="copy(string oldfile, string newfile)" src="phar_object.c" /&gt;
        &lt;scope doc="determines whether a file exists in the phar" ilk="function" name="offsetExists" returns="int" signature="offsetExists(string entry)" src="phar_object.c" /&gt;
        &lt;scope doc="get a PharFileInfo object for a specific file" ilk="function" name="offsetGet" returns="int" signature="offsetGet(string entry)" src="phar_object.c" /&gt;
        &lt;scope doc="set the contents of an internal file to those of an&amp;#xA;external file" ilk="function" name="offsetSet" returns="int" signature="offsetSet(string entry, string value)" src="phar_object.c" /&gt;
        &lt;scope doc="remove a file from a phar" ilk="function" name="offsetUnset" returns="int" signature="offsetUnset(string entry)" src="phar_object.c" /&gt;
        &lt;scope doc="Adds an empty directory to the phar archive" ilk="function" name="addEmptyDir" returns="string" signature="addEmptyDir(string dirname)" src="phar_object.c" /&gt;
        &lt;scope doc="Adds a file to the archive using the filename or the&amp;#xA;second parameter as the name within the archive" ilk="function" name="addFile" returns="string" signature="addFile(string filename[, string localname])" src="phar_object.c" /&gt;
        &lt;scope doc="Adds a file to the archive using its contents as a&amp;#xA;string" ilk="function" name="addFromString" returns="string" signature="addFromString(string localname, string contents)" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the stub at the head of a phar archive as a&amp;#xA;string" ilk="function" name="getStub" returns="string" signature="getStub()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns TRUE if the phar has global metadata FALSE&amp;#xA;otherwise" ilk="function" name="hasMetaData" returns="int" signature="hasMetaData()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the global metadata of the phar" ilk="function" name="getMetaData" returns="int" signature="getMetaData()" src="phar_object.c" /&gt;
        &lt;scope doc="Sets the global metadata of the phar" ilk="function" name="setMetaData" returns="int" signature="setMetaData(mixed $metadata)" src="phar_object.c" /&gt;
        &lt;scope doc="Deletes the global metadata of the phar" ilk="function" name="delMetadata" returns="int" signature="delMetadata()" src="phar_object.c" /&gt;
        &lt;scope doc="Extract one or more file from a phar archive optionally&amp;#xA;overwriting existing files" ilk="function" name="extractTo" returns="bool" signature="extractTo(string pathto[[, mixed files], bool overwrite])" src="phar_object.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="SplFileInfo" ilk="class" name="PharFileInfo"&gt;
        &lt;scope doc="Construct a Phar entry object" ilk="function" name="__construct" returns="void" signature="__construct(string entry)" src="phar_object.c" /&gt;
        &lt;scope doc="clean up directory-based entry objects" ilk="function" name="__destruct" returns="void" signature="__destruct()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the compressed size" ilk="function" name="getCompressedSize" returns="int" signature="getCompressedSize()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns whether the entry is compressed and whether it&amp;#xA;is compressed with Phar GZ or Phar BZ if specified" ilk="function" name="isCompressed" returns="bool" signature="isCompressed([int compression_type])" src="phar_object.c" /&gt;
        &lt;scope doc="Returns CRC code or throws an exception if not CRC&amp;#xA;checked" ilk="function" name="getCRC32" returns="int" signature="getCRC32()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns whether file entry is CRC checked" ilk="function" name="isCRCChecked" returns="int" signature="isCRCChecked()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the Phar file entry flags" ilk="function" name="getPharFlags" returns="int" signature="getPharFlags()" src="phar_object.c" /&gt;
        &lt;scope doc="set the file permissions for the Phar This only allows&amp;#xA;setting execution bit read write" ilk="function" name="chmod" returns="int" signature="chmod()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the metadata of the entry" ilk="function" name="hasMetaData" returns="int" signature="hasMetaData()" src="phar_object.c" /&gt;
        &lt;scope doc="Returns the metadata of the entry" ilk="function" name="getMetaData" returns="int" signature="getMetaData()" src="phar_object.c" /&gt;
        &lt;scope doc="Sets the metadata of the entry" ilk="function" name="setMetaData" returns="int" signature="setMetaData(mixed $metadata)" src="phar_object.c" /&gt;
        &lt;scope doc="Deletes the metadata of the entry" ilk="function" name="delMetaData" returns="bool" signature="delMetaData()" src="phar_object.c" /&gt;
        &lt;scope doc="return the complete file contents of the entry like&amp;#xA;file get contents" ilk="function" name="getContent" returns="string" signature="getContent()" src="phar_object.c" /&gt;
        &lt;scope doc="Instructs the Phar class to compress the current file&amp;#xA;using zlib or bzip compression" ilk="function" name="compress" returns="int" signature="compress(int compression_type)" src="phar_object.c" /&gt;
        &lt;scope doc="Instructs the Phar class to decompress the current file" ilk="function" name="decompress" returns="int" signature="decompress()" src="phar_object.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="CURLFile"&gt;
        &lt;scope doc="Create the CURLFile object" ilk="function" name="__construct" returns="void" signature="__construct(string $name, [string $mimetype [, string $postfilename]])" src="curl_file.c" /&gt;
        &lt;scope doc="Get file name" ilk="function" name="getFilename" returns="string" signature="getFilename()" src="curl_file.c" /&gt;
        &lt;scope doc="Get MIME type" ilk="function" name="getMimeType" returns="string" signature="getMimeType()" src="curl_file.c" /&gt;
        &lt;scope doc="Get file name for POST" ilk="function" name="getPostFilename" returns="string" signature="getPostFilename()" src="curl_file.c" /&gt;
        &lt;scope doc="Set MIME type" ilk="function" name="setMimeType" returns="void" signature="setMimeType(string $mime)" src="curl_file.c" /&gt;
        &lt;scope doc="Set file name for POST" ilk="function" name="setPostFilename" returns="void" signature="setPostFilename(string $name)" src="curl_file.c" /&gt;
        &lt;scope doc="Unserialization handler" ilk="function" name="__wakeup" returns="void" signature="__wakeup()" src="curl_file.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SQLite3"&gt;
        &lt;scope doc="Opens a SQLite Database if the build includes&amp;#xA;encryption then it will attempt to use the key" ilk="function" name="open" returns="void" signature="open(String filename [, int Flags [, string Encryption Key]])" src="sqlite3.c" /&gt;
        &lt;scope doc="Close a SQLite Database" ilk="function" name="close" returns="bool" signature="close()" src="sqlite3.c" /&gt;
        &lt;scope doc="Executes a result-less query against a given database" ilk="function" name="exec" returns="bool" signature="exec(String Query)" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns the SQLite Library version as a string constant&amp;#xA;and as a number" ilk="function" name="version" returns="Array" signature="version()" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns the rowid of the most recent INSERT into the&amp;#xA;database from the database connection" ilk="function" name="lastInsertRowID" returns="int" signature="lastInsertRowID()" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns the numeric result code of the most recent&amp;#xA;failed sqlite API call for the database connection" ilk="function" name="lastErrorCode" returns="int" signature="lastErrorCode()" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns english text describing the most recent failed&amp;#xA;sqlite API call for the database connection" ilk="function" name="lastErrorMsg" returns="string" signature="lastErrorMsg()" src="sqlite3.c" /&gt;
        &lt;scope doc="Sets a busy handler that will sleep until database is&amp;#xA;not locked or timeout is reached Passing a value less" ilk="function" name="busyTimeout" returns="bool" signature="busyTimeout(int msecs)" src="sqlite3.c" /&gt;
        &lt;scope doc="Attempts to load an SQLite extension library" ilk="function" name="loadExtension" returns="bool" signature="loadExtension(String Shared Library)" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns the number of database rows that were changed&amp;#xA;or inserted or deleted by the most recent SQL statement" ilk="function" name="changes" returns="int" signature="changes()" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns a string that has been properly escaped" ilk="function" name="escapeString" returns="String" signature="escapeString(String value)" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns a prepared SQL statement for execution" ilk="function" name="prepare" returns="SQLite3Stmt" signature="prepare(String Query)" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns true or false for queries that return data it&amp;#xA;will return a SQLite Result object" ilk="function" name="query" returns="SQLite3Result" signature="query(String Query)" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns a string of the first column or an array of the&amp;#xA;entire row" ilk="function" name="querySingle" returns="SQLite3Result" signature="querySingle(String Query [, bool entire_row = false])" src="sqlite3.c" /&gt;
        &lt;scope doc="Allows registration of a PHP function as a SQLite UDF&amp;#xA;that can be called within SQL statements" ilk="function" name="createFunction" returns="bool" signature="createFunction(string name, mixed callback [, int argcount])" src="sqlite3.c" /&gt;
        &lt;scope doc="Allows registration of a PHP function for use as an&amp;#xA;aggregate" ilk="function" name="createAggregate" returns="bool" signature="createAggregate(string name, mixed step, mixed final [, int argcount])" src="sqlite3.c" /&gt;
        &lt;scope doc="Registers a PHP function as a comparator that can be&amp;#xA;used with the SQL COLLATE operator Callback must accept&amp;#xA;two" ilk="function" name="createCollation" returns="bool" signature="createCollation(string name, mixed callback)" src="sqlite3.c" /&gt;
        &lt;scope doc="Open a blob as a stream which we can read write to" ilk="function" name="openBlob" returns="resource" signature="openBlob(string table, string column, int rowid [, string dbname])" src="sqlite3.c" /&gt;
        &lt;scope doc="Enables an exception error mode" ilk="function" name="enableExceptions" returns="bool" signature="enableExceptions([bool enableExceptions = false])" src="sqlite3.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SQLite3Stmt"&gt;
        &lt;scope doc="Returns the number of parameters within the prepared&amp;#xA;statement" ilk="function" name="paramCount" returns="int" signature="paramCount()" src="sqlite3.c" /&gt;
        &lt;scope doc="Closes the prepared statement" ilk="function" name="close" returns="bool" signature="close()" src="sqlite3.c" /&gt;
        &lt;scope doc="Reset the prepared statement to the state before it was&amp;#xA;executed bindings still remain" ilk="function" name="reset" returns="bool" signature="reset()" src="sqlite3.c" /&gt;
        &lt;scope doc="Clear all current bound parameters" ilk="function" name="clear" returns="bool" signature="clear()" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns true if a statement is definitely read only" ilk="function" name="readOnly" returns="bool" signature="readOnly()" src="sqlite3.c" /&gt;
        &lt;scope doc="Bind Parameter to a stmt variable" ilk="function" name="bindParam" returns="bool" signature="bindParam(int parameter_number, mixed parameter [, int type])" src="sqlite3.c" /&gt;
        &lt;scope doc="Bind Value of a parameter to a stmt variable" ilk="function" name="bindValue" returns="bool" signature="bindValue(int parameter_number, mixed parameter [, int type])" src="sqlite3.c" /&gt;
        &lt;scope doc="Executes a prepared statement and returns a result set&amp;#xA;object" ilk="function" name="execute" returns="SQLite3Result" signature="execute()" src="sqlite3.c" /&gt;
        &lt;scope doc="constructor for SQLite Stmt" ilk="function" name="__construct" returns="int" signature="__construct(SQLite3 dbobject, String Statement)" src="sqlite3.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SQLite3Result"&gt;
        &lt;scope doc="Number of columns in the result set" ilk="function" name="numColumns" returns="int" signature="numColumns()" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns the name of the nth column" ilk="function" name="columnName" returns="string" signature="columnName(int column)" src="sqlite3.c" /&gt;
        &lt;scope doc="Returns the type of the nth column" ilk="function" name="columnType" returns="int" signature="columnType(int column)" src="sqlite3.c" /&gt;
        &lt;scope doc="Fetch a result row as both an associative or&amp;#xA;numerically indexed array or both" ilk="function" name="fetchArray" returns="array" signature="fetchArray([int mode])" src="sqlite3.c" /&gt;
        &lt;scope doc="Resets the result set back to the first row" ilk="function" name="reset" returns="bool" signature="reset()" src="sqlite3.c" /&gt;
        &lt;scope doc="Closes the result set" ilk="function" name="finalize" returns="bool" signature="finalize()" src="sqlite3.c" /&gt;
        &lt;scope doc="constructor for SQLite Result" ilk="function" name="__construct" returns="int" signature="__construct()" src="sqlite3.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SoapServer"&gt;
        &lt;scope doc="Sets class which will handle SOAP requests" ilk="function" name="setClass" returns="void" signature="setClass(string class_name [, mixed args])" src="soap.c" /&gt;
        &lt;scope doc="Sets object which will handle SOAP requests" ilk="function" name="setObject" returns="void" signature="setObject(object)" src="soap.c" /&gt;
        &lt;scope doc="Returns list of defined functions" ilk="function" name="getFunctions" returns="array" signature="getFunctions(void)" src="soap.c" /&gt;
        &lt;scope doc="Adds one or several functions those will handle SOAP&amp;#xA;requests" ilk="function" name="addFunction" returns="void" signature="addFunction(mixed functions)" src="soap.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SoapClient"&gt;
        &lt;scope doc="Returns last SOAP request headers" ilk="function" name="__getLastRequestHeaders" returns="string" signature="__getLastRequestHeaders(void)" src="soap.c" /&gt;
        &lt;scope doc="Returns last SOAP response headers" ilk="function" name="__getLastResponseHeaders" returns="string" signature="__getLastResponseHeaders(void)" src="soap.c" /&gt;
        &lt;scope doc="SoapClient doRequest" ilk="function" name="__doRequest" returns="string" signature="__doRequest()" src="soap.c" /&gt;
        &lt;scope doc="Sets cookie thet will sent with SOAP request The call&amp;#xA;to this function will effect all folowing calls of SOAP" ilk="function" name="__setCookie" returns="void" signature="__setCookie(string name [, strung value])" src="soap.c" /&gt;
        &lt;scope doc="Sets SOAP headers for subsequent calls replaces any&amp;#xA;previous values If no value is specified all of the&amp;#xA;headers are" ilk="function" name="__setSoapHeaders" returns="void" signature="__setSoapHeaders(array SoapHeaders)" src="soap.c" /&gt;
        &lt;scope doc="Sets the location option the endpoint URL that will be&amp;#xA;touched by the following SOAP requests If new location&amp;#xA;is" ilk="function" name="__setLocation" returns="string" signature="__setLocation([string new_location])" src="soap.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DateTime"&gt;
        &lt;scope doc="Creates new DateTime object" ilk="function" name="__construct" signature="__construct([string time[, DateTimeZone object]])" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="__set_state" signature="__set_state()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="__wakeup" signature="__wakeup()" src="php_date.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DateTimeImmutable"&gt;
        &lt;scope doc="Creates new DateTimeImmutable object" ilk="function" name="__construct" signature="__construct([string time[, DateTimeZone object]])" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="__set_state" signature="__set_state()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="modify" signature="modify()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="add" signature="add()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="sub" signature="sub()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="setTimezone" signature="setTimezone()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="setTime" signature="setTime()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="setDate" signature="setDate()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="setISODate" signature="setISODate()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="setTimestamp" signature="setTimestamp()" src="php_date.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DateTimeZone"&gt;
        &lt;scope doc="Creates new DateTimeZone object" ilk="function" name="__construct" signature="__construct(string timezone)" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="__set_state" signature="__set_state()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="__wakeup" signature="__wakeup()" src="php_date.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DateInterval"&gt;
        &lt;scope doc="Creates new DateInterval object" ilk="function" name="__construct" signature="__construct([string interval_spec])" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="__set_state" signature="__set_state()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="__wakeup" signature="__wakeup()" src="php_date.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DatePeriod"&gt;
        &lt;scope doc="Creates new DatePeriod object" ilk="function" name="__construct" signature="__construct(DateTime $start, DateInterval $interval, int recurrences" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="__set_state" signature="__set_state()" src="php_date.c" /&gt;
        &lt;scope doc="" ilk="function" name="__wakeup" signature="__wakeup()" src="php_date.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="COMPersistHelper"&gt;
        &lt;scope doc="Determines the filename into which an object will be&amp;#xA;saved or false if none is set via IPersistFile&amp;#xA;GetCurFile" ilk="function" name="GetCurFile" returns="string" signature="GetCurFile()" src="com_persist.c" /&gt;
        &lt;scope doc="Persist object data to file via IPersistFile Save" ilk="function" name="SaveToFile" returns="bool" signature="SaveToFile(string filename [, bool remember])" src="com_persist.c" /&gt;
        &lt;scope doc="Load object data from file via IPersistFile Load" ilk="function" name="LoadFromFile" returns="bool" signature="LoadFromFile(string filename [, int flags])" src="com_persist.c" /&gt;
        &lt;scope doc="Gets maximum stream size required to store the object&amp;#xA;data via IPersistStream GetSizeMax or&amp;#xA;IPersistStreamInit GetSizeMax" ilk="function" name="GetMaxStreamSize" returns="int" signature="GetMaxStreamSize()" src="com_persist.c" /&gt;
        &lt;scope doc="Initializes the object to a default state via&amp;#xA;IPersistStreamInit InitNew" ilk="function" name="InitNew" returns="int" signature="InitNew()" src="com_persist.c" /&gt;
        &lt;scope doc="Initializes an object from the stream where it was&amp;#xA;previously saved via IPersistStream Load or&amp;#xA;OleLoadFromStream" ilk="function" name="LoadFromStream" returns="mixed" signature="LoadFromStream(resource stream)" src="com_persist.c" /&gt;
        &lt;scope doc="Saves the object to a stream via IPersistStream Save" ilk="function" name="SaveToStream" returns="int" signature="SaveToStream(resource stream)" src="com_persist.c" /&gt;
        &lt;scope doc="Creates a persistence helper object usually associated&amp;#xA;with a com object" ilk="function" name="__construct" returns="int" signature="__construct([object com_object])" src="com_persist.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SplFixedArray"&gt;
        &lt;scope doc="" ilk="function" name="__construct" returns="void" signature="__construct([int size])" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="" ilk="function" name="__wakeup" returns="void" signature="__wakeup()" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="" ilk="function" name="count" returns="int" signature="count(void)" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="" ilk="function" name="toArray" returns="object" signature="toArray()" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="" ilk="function" name="fromArray" returns="object" signature="fromArray(array data[, bool save_indexes])" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="" ilk="function" name="getSize" returns="int" signature="getSize(void)" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="" ilk="function" name="setSize" returns="bool" signature="setSize(int size)" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="U Returns whether the requested index exists" ilk="function" name="offsetExists" returns="bool" signature="offsetExists(mixed $index)" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="U Returns the value at the specified index" ilk="function" name="offsetGet" returns="mixed" signature="offsetGet(mixed $index)" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="U Sets the value at the specified index to newval" ilk="function" name="offsetSet" returns="void" signature="offsetSet(mixed $index, mixed $newval)" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="U Unsets the value at the specified index" ilk="function" name="offsetUnset" returns="void" signature="offsetUnset(mixed $index)" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="U Move to next entry" ilk="function" name="next" returns="void" signature="next()" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="U Check whether the datastructure contains more entries" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="U Rewind the datastructure back to the start" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_fixedarray.c" /&gt;
        &lt;scope doc="U Return current datastructure entry" ilk="function" name="current" returns="mixed" signature="current()" src="spl_fixedarray.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SplDoublyLinkedList"&gt;
        &lt;scope doc="U Push value on the SplDoublyLinkedList" ilk="function" name="push" returns="bool" signature="push(mixed $value)" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Unshift value on the SplDoublyLinkedList" ilk="function" name="unshift" returns="bool" signature="unshift(mixed $value)" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Pop an element out of the SplDoublyLinkedList" ilk="function" name="pop" returns="mixed" signature="pop()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Shift an element out of the SplDoublyLinkedList" ilk="function" name="shift" returns="mixed" signature="shift()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Peek at the top element of the SplDoublyLinkedList" ilk="function" name="top" returns="mixed" signature="top()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Peek at the bottom element of the SplDoublyLinkedList" ilk="function" name="bottom" returns="mixed" signature="bottom()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Return the number of elements in the datastructure" ilk="function" name="count" returns="int" signature="count()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Return true if the SplDoublyLinkedList is empty" ilk="function" name="isEmpty" returns="int" signature="isEmpty()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Set the mode of iteration" ilk="function" name="setIteratorMode" returns="int" signature="setIteratorMode($flags)" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Return the mode of iteration" ilk="function" name="getIteratorMode" returns="int" signature="getIteratorMode()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Returns whether the requested index exists" ilk="function" name="offsetExists" returns="bool" signature="offsetExists(mixed $index)" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Returns the value at the specified index" ilk="function" name="offsetGet" returns="mixed" signature="offsetGet(mixed $index)" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Sets the value at the specified index to newval" ilk="function" name="offsetSet" returns="void" signature="offsetSet(mixed $index, mixed $newval)" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Unsets the value at the specified index" ilk="function" name="offsetUnset" returns="void" signature="offsetUnset(mixed $index)" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Move to next entry" ilk="function" name="prev" returns="void" signature="prev()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Move to next entry" ilk="function" name="next" returns="void" signature="next()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Check whether the datastructure contains more entries" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Rewind the datastructure back to the start" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Return current datastructure entry" ilk="function" name="current" returns="mixed" signature="current()" src="spl_dllist.c" /&gt;
        &lt;scope doc="Serializes storage" ilk="function" name="serialize" returns="string" signature="serialize()" src="spl_dllist.c" /&gt;
        &lt;scope doc="Unserializes storage" ilk="function" name="unserialize" returns="void" signature="unserialize(string serialized)" src="spl_dllist.c" /&gt;
        &lt;scope doc="U Inserts a new entry before the specified index&amp;#xA;consisting of newval" ilk="function" name="add" returns="void" signature="add(mixed $index, mixed $newval)" src="spl_dllist.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ArrayObject"&gt;
        &lt;scope doc="proto bool ArrayIterator offsetExists mixed index&amp;#xA;Returns whether the requested index exists" ilk="function" name="offsetExists" returns="bool" signature="offsetExists(mixed $index)" src="spl_array.c" /&gt;
        &lt;scope doc="proto mixed ArrayIterator offsetGet mixed index Returns&amp;#xA;the value at the specified index" ilk="function" name="offsetGet" returns="mixed" signature="offsetGet(mixed $index)" src="spl_array.c" /&gt;
        &lt;scope doc="proto void ArrayIterator offsetSet mixed index mixed&amp;#xA;newval Sets the value at the specified index to newval" ilk="function" name="offsetSet" returns="void" signature="offsetSet(mixed $index, mixed $newval)" src="spl_array.c" /&gt;
        &lt;scope doc="proto void ArrayIterator append mixed newval Appends&amp;#xA;the value cannot be called for objects" ilk="function" name="append" returns="void" signature="append(mixed $newval)" src="spl_array.c" /&gt;
        &lt;scope doc="proto void ArrayIterator offsetUnset mixed index Unsets&amp;#xA;the value at the specified index" ilk="function" name="offsetUnset" returns="void" signature="offsetUnset(mixed $index)" src="spl_array.c" /&gt;
        &lt;scope doc="proto array ArrayIterator getArrayCopy Return a copy of&amp;#xA;the contained array" ilk="function" name="getArrayCopy" returns="array" signature="getArrayCopy()" src="spl_array.c" /&gt;
        &lt;scope doc="int flags string iterator class quot ArrayIterator quot&amp;#xA;proto void ArrayIterator construct array" ilk="function" name="__construct" returns="void" signature="__construct(array" src="spl_array.c" /&gt;
        &lt;scope doc="Set the class used in getIterator" ilk="function" name="setIteratorClass" returns="void" signature="setIteratorClass(string iterator_class)" src="spl_array.c" /&gt;
        &lt;scope doc="Get the class used in getIterator" ilk="function" name="getIteratorClass" returns="string" signature="getIteratorClass()" src="spl_array.c" /&gt;
        &lt;scope doc="Get flags" ilk="function" name="getFlags" returns="int" signature="getFlags()" src="spl_array.c" /&gt;
        &lt;scope doc="Set flags" ilk="function" name="setFlags" returns="void" signature="setFlags(int flags)" src="spl_array.c" /&gt;
        &lt;scope doc="Replace the referenced array or object with a new one&amp;#xA;and return the old one right now copy - to" ilk="function" name="exchangeArray" returns="Array" signature="exchangeArray(Array" src="spl_array.c" /&gt;
        &lt;scope doc="Create a new iterator from a ArrayObject instance" ilk="function" name="getIterator" returns="ArrayIterator" signature="getIterator()" src="spl_array.c" /&gt;
        &lt;scope doc="proto int ArrayIterator count Return the number of&amp;#xA;elements in the Iterator" ilk="function" name="count" returns="int" signature="count()" src="spl_array.c" /&gt;
        &lt;scope doc="proto int ArrayIterator asort int sort flags SORT&amp;#xA;REGULAR Sort the entries by values" ilk="function" name="asort" returns="int" signature="asort([int $sort_flags = SORT_REGULAR ])" src="spl_array.c" /&gt;
        &lt;scope doc="proto int ArrayIterator ksort int sort flags SORT&amp;#xA;REGULAR Sort the entries by key" ilk="function" name="ksort" returns="int" signature="ksort([int $sort_flags = SORT_REGULAR ])" src="spl_array.c" /&gt;
        &lt;scope doc="proto int ArrayIterator uasort callback cmp function&amp;#xA;Sort the entries by values user defined function" ilk="function" name="uasort" returns="int" signature="uasort(callback cmp_function)" src="spl_array.c" /&gt;
        &lt;scope doc="proto int ArrayIterator uksort callback cmp function&amp;#xA;Sort the entries by key using user defined function" ilk="function" name="uksort" returns="int" signature="uksort(callback cmp_function)" src="spl_array.c" /&gt;
        &lt;scope doc="proto int ArrayIterator natsort Sort the entries by&amp;#xA;values using quot natural order quot algorithm" ilk="function" name="natsort" returns="int" signature="natsort()" src="spl_array.c" /&gt;
        &lt;scope doc="proto int ArrayIterator natcasesort Sort the entries by&amp;#xA;key using case insensitive quot natural order quot&amp;#xA;algorithm" ilk="function" name="natcasesort" returns="int" signature="natcasesort()" src="spl_array.c" /&gt;
        &lt;scope doc="Serialize the object" ilk="function" name="serialize" returns="string" signature="serialize()" src="spl_array.c" /&gt;
        &lt;scope doc="unserialize the object" ilk="function" name="unserialize" returns="void" signature="unserialize(string serialized)" src="spl_array.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ArrayIterator"&gt;
        &lt;scope doc="Rewind array back to the start" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_array.c" /&gt;
        &lt;scope doc="Seek to position" ilk="function" name="seek" returns="void" signature="seek(int $position)" src="spl_array.c" /&gt;
        &lt;scope doc="Return current array entry" ilk="function" name="current" returns="mixed" signature="current()" src="spl_array.c" /&gt;
        &lt;scope doc="Return current array key" ilk="function" name="key" returns="mixed" signature="key()" src="spl_array.c" /&gt;
        &lt;scope doc="Move to next entry" ilk="function" name="next" returns="void" signature="next()" src="spl_array.c" /&gt;
        &lt;scope doc="Check whether array contains more entries" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_array.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="ArrayIterator" ilk="class" name="RecursiveArrayIterator"&gt;
        &lt;scope doc="Check whether current element has children e g is an&amp;#xA;array" ilk="function" name="hasChildren" returns="bool" signature="hasChildren()" src="spl_array.c" /&gt;
        &lt;scope doc="Create a sub iterator for the current element same&amp;#xA;class as this" ilk="function" name="getChildren" returns="object" signature="getChildren()" src="spl_array.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SplHeap"&gt;
        &lt;scope doc="U Return the number of elements in the heap" ilk="function" name="count" returns="int" signature="count()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Return true if the heap is empty" ilk="function" name="isEmpty" returns="int" signature="isEmpty()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Push value on the heap" ilk="function" name="insert" returns="bool" signature="insert(mixed $value)" src="spl_heap.c" /&gt;
        &lt;scope doc="U extract the element out of the top of the heap" ilk="function" name="extract" returns="mixed" signature="extract()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Recover from a corrupted state" ilk="function" name="recoverFromCorruption" returns="int" signature="recoverFromCorruption()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Peek at the top element of the heap" ilk="function" name="top" returns="mixed" signature="top()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Move to next entry" ilk="function" name="next" returns="void" signature="next()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Check whether the datastructure contains more entries" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Rewind the datastructure back to the start" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Return current datastructure entry" ilk="function" name="current" returns="mixed" signature="current()" src="spl_heap.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SplPriorityQueue"&gt;
        &lt;scope doc="U Push value with the priority priodiry on the&amp;#xA;priorityqueue" ilk="function" name="insert" returns="bool" signature="insert(mixed $value, mixed $priority)" src="spl_heap.c" /&gt;
        &lt;scope doc="U extract the element out of the top of the priority&amp;#xA;queue" ilk="function" name="extract" returns="mixed" signature="extract()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Peek at the top element of the priority queue" ilk="function" name="top" returns="mixed" signature="top()" src="spl_heap.c" /&gt;
        &lt;scope doc="U Set the flags of extraction" ilk="function" name="setIteratorMode" returns="int" signature="setIteratorMode($flags)" src="spl_heap.c" /&gt;
        &lt;scope doc="U compare the priorities" ilk="function" name="compare" returns="bool" signature="compare(mixed $a, mixed $b)" src="spl_heap.c" /&gt;
        &lt;scope doc="U Return current datastructure entry" ilk="function" name="current" returns="mixed" signature="current()" src="spl_heap.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="SplHeap" ilk="class" name="SplMinHeap"&gt;
        &lt;scope doc="U compare the values" ilk="function" name="compare" returns="bool" signature="compare(mixed $a, mixed $b)" src="spl_heap.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="SplHeap" ilk="class" name="SplMaxHeap"&gt;
        &lt;scope doc="U compare the values" ilk="function" name="compare" returns="bool" signature="compare(mixed $a, mixed $b)" src="spl_heap.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="RecursiveIteratorIterator"&gt;
        &lt;scope doc="throws InvalidArgumentException Creates a&amp;#xA;RecursiveIteratorIterator from a RecursiveIterator" ilk="function" name="__construct" returns="void" signature="__construct(RecursiveIterator" src="spl_iterators.c" /&gt;
        &lt;scope doc="Rewind the iterator to the first element of the top&amp;#xA;level inner iterator" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Check whether the current position is valid" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Access the current key" ilk="function" name="key" returns="mixed" signature="key()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Access the current element value" ilk="function" name="current" returns="mixed" signature="current()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Move forward to the next element" ilk="function" name="next" returns="void" signature="next()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Get the current depth of the recursive iteration" ilk="function" name="getDepth" returns="int" signature="getDepth()" src="spl_iterators.c" /&gt;
        &lt;scope doc="The current active sub iterator or the iterator at&amp;#xA;specified level" ilk="function" name="getSubIterator" returns="RecursiveIterator" signature="getSubIterator([int level])" src="spl_iterators.c" /&gt;
        &lt;scope doc="The current active sub iterator" ilk="function" name="getInnerIterator" returns="RecursiveIterator" signature="getInnerIterator()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Called when iteration begins after first rewind call" ilk="function" name="beginIteration" returns="RecursiveIterator" signature="beginIteration()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Called when iteration ends when valid first returns&amp;#xA;false" ilk="function" name="endIteration" returns="RecursiveIterator" signature="endIteration()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Called for each element to test whether it has children" ilk="function" name="callHasChildren" returns="bool" signature="callHasChildren()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return children of current element" ilk="function" name="callGetChildren" returns="RecursiveIterator" signature="callGetChildren()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Called when recursing one level down" ilk="function" name="beginChildren" returns="void" signature="beginChildren()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Called when end recursing one level" ilk="function" name="endChildren" returns="void" signature="endChildren()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Called when the next element is available" ilk="function" name="nextElement" returns="void" signature="nextElement()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Set the maximum allowed depth or any depth if pmax&amp;#xA;depth -" ilk="function" name="setMaxDepth" returns="void" signature="setMaxDepth([$max_depth = -1])" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the maximum accepted depth or false if any depth&amp;#xA;is allowed" ilk="function" name="getMaxDepth" returns="int" signature="getMaxDepth()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="RecursiveIteratorIterator" ilk="class" name="RecursiveTreeIterator"&gt;
        &lt;scope doc="throws InvalidArgumentException&amp;#xA;RecursiveIteratorIterator to generate ASCII graphic&amp;#xA;trees for the entries in a RecursiveIterator" ilk="function" name="__construct" returns="void" signature="__construct(RecursiveIterator" src="spl_iterators.c" /&gt;
        &lt;scope doc="throws OutOfRangeException Sets prefix parts as used in&amp;#xA;getPrefix" ilk="function" name="setPrefixPart" returns="void" signature="setPrefixPart(int part, string prefix)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Returns the string to place in front of current element" ilk="function" name="getPrefix" returns="string" signature="getPrefix()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Returns the string presentation built for current&amp;#xA;element" ilk="function" name="getEntry" returns="string" signature="getEntry()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Returns the string to place after the current element" ilk="function" name="getPostfix" returns="string" signature="getPostfix()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Returns the current element prefixed and postfixed" ilk="function" name="current" returns="mixed" signature="current()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Returns the current key prefixed and postfixed" ilk="function" name="key" returns="mixed" signature="key()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="IteratorIterator" ilk="class" name="FilterIterator"&gt;
        &lt;scope doc="Create an Iterator from another iterator" ilk="function" name="__construct" returns="void" signature="__construct(Iterator it)" src="spl_iterators.c" /&gt;
        &lt;scope doc="proto Iterator CachingIterator getInnerIterator proto&amp;#xA;Iterator LimitIterator getInnerIterator proto Iterator&amp;#xA;ParentIterator getInnerIterator Get the inner iterator" ilk="function" name="getInnerIterator" returns="Iterator" signature="getInnerIterator()" src="spl_iterators.c" /&gt;
        &lt;scope doc="proto bool ParentIterator valid proto bool&amp;#xA;IteratorIterator valid proto bool NoRewindIterator&amp;#xA;valid Check whether the current element is valid" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_iterators.c" /&gt;
        &lt;scope doc="proto mixed CachingIterator key proto mixed&amp;#xA;LimitIterator key proto mixed ParentIterator key proto&amp;#xA;mixed IteratorIterator key proto mixed NoRewindIterator&amp;#xA;key" ilk="function" name="key" returns="mixed" signature="key()" src="spl_iterators.c" /&gt;
        &lt;scope doc="proto mixed CachingIterator current proto mixed&amp;#xA;LimitIterator current proto mixed ParentIterator&amp;#xA;current proto mixed IteratorIterator current proto&amp;#xA;mixed NoRewindIterator current" ilk="function" name="current" returns="mixed" signature="current()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Rewind the iterator" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Move the iterator forward" ilk="function" name="next" returns="void" signature="next()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="FilterIterator" ilk="class" name="CallbackFilterIterator"&gt;
        &lt;scope doc="Create an Iterator from another iterator" ilk="function" name="__construct" returns="void" signature="__construct(Iterator it, callback)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Calls the callback with the current value the current&amp;#xA;key and the inner iterator as arguments" ilk="function" name="accept" returns="bool" signature="accept()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="RecursiveFilterIterator" ilk="class" name="ParentIterator"&gt;
        &lt;scope doc="proto void IteratorIterator rewind Rewind the iterator" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_iterators.c" /&gt;
        &lt;scope doc="proto void IteratorIterator next proto void&amp;#xA;NoRewindIterator next Move the iterator forward" ilk="function" name="next" returns="void" signature="next()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Create a ParentIterator from a RecursiveIterator" ilk="function" name="__construct" returns="void" signature="__construct(RecursiveIterator it)" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="CallbackFilterIterator" ilk="class" name="RecursiveCallbackFilterIterator"&gt;
        &lt;scope doc="Create a RecursiveCallbackFilterIterator from a&amp;#xA;RecursiveIterator" ilk="function" name="__construct" returns="void" signature="__construct(RecursiveIterator it, callback)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the inner iterator&amp;apos;s children contained in a&amp;#xA;RecursiveCallbackFilterIterator" ilk="function" name="getChildren" returns="RecursiveCallbackFilterIterator" signature="getChildren()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="FilterIterator" ilk="class" name="RecursiveFilterIterator"&gt;
        &lt;scope doc="Create a RecursiveFilterIterator from a&amp;#xA;RecursiveIterator" ilk="function" name="__construct" returns="void" signature="__construct(RecursiveIterator it)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Check whether the inner iterator&amp;apos;s current element has&amp;#xA;children" ilk="function" name="hasChildren" returns="bool" signature="hasChildren()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the inner iterator&amp;apos;s children contained in a&amp;#xA;RecursiveFilterIterator" ilk="function" name="getChildren" returns="RecursiveFilterIterator" signature="getChildren()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="FilterIterator" ilk="class" name="RegexIterator"&gt;
        &lt;scope doc="Create an RegexIterator from another iterator and a&amp;#xA;regular expression" ilk="function" name="__construct" returns="void" signature="__construct(Iterator it, string regex [, int mode [, int flags [, int preg_flags]]])" src="spl_iterators.c" /&gt;
        &lt;scope doc="Match string current against regular expression" ilk="function" name="accept" returns="bool" signature="accept()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Returns current regular expression" ilk="function" name="getRegex" returns="string" signature="getRegex()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Returns current operation mode" ilk="function" name="getMode" returns="bool" signature="getMode()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Set new operation mode" ilk="function" name="setMode" returns="bool" signature="setMode(int new_mode)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Returns current PREG flags if in use or NULL" ilk="function" name="getFlags" returns="bool" signature="getFlags()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Set operation flags" ilk="function" name="setFlags" returns="bool" signature="setFlags(int new_flags)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Set PREG flags" ilk="function" name="setPregFlags" returns="bool" signature="setPregFlags(int new_flags)" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="RegexIterator" ilk="class" name="RecursiveRegexIterator"&gt;
        &lt;scope doc="Create an RecursiveRegexIterator from another recursive&amp;#xA;iterator and a regular expression" ilk="function" name="__construct" returns="void" signature="__construct(RecursiveIterator it, string regex [, int mode [, int flags [, int preg_flags]]])" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the inner iterator&amp;apos;s children contained in a&amp;#xA;RecursiveRegexIterator" ilk="function" name="getChildren" returns="RecursiveRegexIterator" signature="getChildren()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="IteratorIterator" ilk="class" name="LimitIterator"&gt;
        &lt;scope doc="Construct a LimitIterator from an Iterator with a given&amp;#xA;starting offset and optionally a maximum count" ilk="function" name="__construct" signature="__construct(Iterator it [, int offset, int count])" src="spl_iterators.c" /&gt;
        &lt;scope doc="Rewind the iterator to the specified starting offset" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Check whether the current element is valid" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Move the iterator forward" ilk="function" name="next" returns="void" signature="next()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Seek to the given position" ilk="function" name="seek" returns="void" signature="seek(int position)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the current position" ilk="function" name="getPosition" returns="int" signature="getPosition()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="IteratorIterator" ilk="class" name="CachingIterator"&gt;
        &lt;scope doc="Construct a CachingIterator from an Iterator" ilk="function" name="__construct" returns="void" signature="__construct(Iterator it [, flags = CIT_CALL_TOSTRING])" src="spl_iterators.c" /&gt;
        &lt;scope doc="Rewind the iterator" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Check whether the current element is valid" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Move the iterator forward" ilk="function" name="next" returns="void" signature="next()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Check whether the inner iterator has a valid next&amp;#xA;element" ilk="function" name="hasNext" returns="bool" signature="hasNext()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the string representation of the current element" ilk="function" name="__toString" returns="string" signature="__toString()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Set given index in cache" ilk="function" name="offsetSet" returns="void" signature="offsetSet(mixed index, mixed newval)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the internal cache if used" ilk="function" name="offsetGet" returns="string" signature="offsetGet(mixed index)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Unset given index in cache" ilk="function" name="offsetUnset" returns="void" signature="offsetUnset(mixed index)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return whether the requested index exists" ilk="function" name="offsetExists" returns="bool" signature="offsetExists(mixed index)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the cache" ilk="function" name="getCache" returns="bool" signature="getCache()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the internal flags" ilk="function" name="getFlags" returns="int" signature="getFlags()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Set the internal flags" ilk="function" name="setFlags" returns="void" signature="setFlags(int flags)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Number of cached elements" ilk="function" name="count" returns="void" signature="count()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="CachingIterator" ilk="class" name="RecursiveCachingIterator"&gt;
        &lt;scope doc="Create an iterator from a RecursiveIterator" ilk="function" name="__construct" returns="void" signature="__construct(RecursiveIterator it [, flags = CIT_CALL_TOSTRING])" src="spl_iterators.c" /&gt;
        &lt;scope doc="Check whether the current element of the inner iterator&amp;#xA;has children" ilk="function" name="hasChildren" returns="bool" signature="hasChildren()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return the inner iterator&amp;apos;s children as a&amp;#xA;RecursiveCachingIterator" ilk="function" name="getChildren" returns="RecursiveCachingIterator" signature="getChildren()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="IteratorIterator"&gt;
        &lt;scope doc="Create an iterator from anything that is traversable" ilk="function" name="__construct" returns="void" signature="__construct(Traversable it)" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="IteratorIterator" ilk="class" name="NoRewindIterator"&gt;
        &lt;scope doc="Create an iterator from another iterator" ilk="function" name="__construct" returns="void" signature="__construct(Iterator it)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Prevent a call to inner iterators rewind" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return inner iterators valid" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return inner iterators key" ilk="function" name="key" returns="mixed" signature="key()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return inner iterators current" ilk="function" name="current" returns="mixed" signature="current()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return inner iterators next" ilk="function" name="next" returns="void" signature="next()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="IteratorIterator" ilk="class" name="InfiniteIterator"&gt;
        &lt;scope doc="Create an iterator from another iterator" ilk="function" name="__construct" returns="void" signature="__construct(Iterator it)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Prevent a call to inner iterators rewind internally the&amp;#xA;current data will be fetched if valid" ilk="function" name="next" returns="void" signature="next()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="EmptyIterator"&gt;
        &lt;scope doc="Does nothing" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Return false" ilk="function" name="valid" returns="false" signature="valid()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Throws exception BadMethodCallException" ilk="function" name="key" returns="void" signature="key()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Throws exception BadMethodCallException" ilk="function" name="current" returns="void" signature="current()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Does nothing" ilk="function" name="next" returns="void" signature="next()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="IteratorIterator" ilk="class" name="AppendIterator"&gt;
        &lt;scope doc="Create an AppendIterator" ilk="function" name="__construct" returns="void" signature="__construct()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Append an iterator" ilk="function" name="append" returns="void" signature="append(Iterator it)" src="spl_iterators.c" /&gt;
        &lt;scope doc="Rewind to the first iterator and rewind the first&amp;#xA;iterator too" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Check if the current state is valid" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Forward to next element" ilk="function" name="next" returns="void" signature="next()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Get index of iterator" ilk="function" name="getIteratorIndex" returns="int" signature="getIteratorIndex()" src="spl_iterators.c" /&gt;
        &lt;scope doc="Get access to inner ArrayIterator" ilk="function" name="getArrayIterator" returns="ArrayIterator" signature="getArrayIterator()" src="spl_iterators.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SplObjectStorage"&gt;
        &lt;scope doc="Attaches an object to the storage if not yet contained" ilk="function" name="attach" returns="void" signature="attach($obj, $inf = NULL)" src="spl_observer.c" /&gt;
        &lt;scope doc="Detaches an object from the storage" ilk="function" name="detach" returns="void" signature="detach($obj)" src="spl_observer.c" /&gt;
        &lt;scope doc="Returns the hash of an object" ilk="function" name="getHash" returns="string" signature="getHash($object)" src="spl_observer.c" /&gt;
        &lt;scope doc="Returns associated information for a stored object" ilk="function" name="offsetGet" returns="mixed" signature="offsetGet($object)" src="spl_observer.c" /&gt;
        &lt;scope doc="Add all elements contained in os" ilk="function" name="addAll" returns="bool" signature="addAll(SplObjectStorage $os)" src="spl_observer.c" /&gt;
        &lt;scope doc="Remove all elements contained in os" ilk="function" name="removeAll" returns="bool" signature="removeAll(SplObjectStorage $os)" src="spl_observer.c" /&gt;
        &lt;scope doc="Remove elements not common to both this&amp;#xA;SplObjectStorage instance and os" ilk="function" name="removeAllExcept" returns="bool" signature="removeAllExcept(SplObjectStorage $os)" src="spl_observer.c" /&gt;
        &lt;scope doc="Determine whethe an object is contained in the storage" ilk="function" name="contains" returns="bool" signature="contains($obj)" src="spl_observer.c" /&gt;
        &lt;scope doc="Determine number of objects in storage" ilk="function" name="count" returns="int" signature="count()" src="spl_observer.c" /&gt;
        &lt;scope doc="Rewind to first position" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_observer.c" /&gt;
        &lt;scope doc="Returns whether current position is valid" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_observer.c" /&gt;
        &lt;scope doc="Returns current key" ilk="function" name="key" returns="mixed" signature="key()" src="spl_observer.c" /&gt;
        &lt;scope doc="Returns current element" ilk="function" name="current" returns="mixed" signature="current()" src="spl_observer.c" /&gt;
        &lt;scope doc="Returns associated information to current element" ilk="function" name="getInfo" returns="mixed" signature="getInfo()" src="spl_observer.c" /&gt;
        &lt;scope doc="Sets associated information of current element to inf" ilk="function" name="setInfo" returns="mixed" signature="setInfo(mixed $inf)" src="spl_observer.c" /&gt;
        &lt;scope doc="Moves position forward" ilk="function" name="next" returns="void" signature="next()" src="spl_observer.c" /&gt;
        &lt;scope doc="Serializes storage" ilk="function" name="serialize" returns="string" signature="serialize()" src="spl_observer.c" /&gt;
        &lt;scope doc="Unserializes storage" ilk="function" name="unserialize" returns="void" signature="unserialize(string serialized)" src="spl_observer.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="MultipleIterator"&gt;
        &lt;scope doc="Iterator that iterates over several iterators one after&amp;#xA;the other" ilk="function" name="__construct" returns="void" signature="__construct([int flags = MIT_NEED_ALL" src="spl_observer.c" /&gt;
        &lt;scope doc="Return current flags" ilk="function" name="getFlags" returns="int" signature="getFlags()" src="spl_observer.c" /&gt;
        &lt;scope doc="Set flags" ilk="function" name="setFlags" returns="int" signature="setFlags(int flags)" src="spl_observer.c" /&gt;
        &lt;scope doc="Rewind all attached iterator instances" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_observer.c" /&gt;
        &lt;scope doc="Move all attached iterator instances forward" ilk="function" name="next" returns="void" signature="next()" src="spl_observer.c" /&gt;
        &lt;scope doc="Return whether all or one sub iterator is valid&amp;#xA;depending on flags" ilk="function" name="valid" returns="bool" signature="valid()" src="spl_observer.c" /&gt;
        &lt;scope doc="Return an array of all registered Iterator instances&amp;#xA;key result" ilk="function" name="key" returns="array" signature="key()" src="spl_observer.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="SplFileInfo" ilk="class" name="DirectoryIterator"&gt;
        &lt;scope doc="Cronstructs a new dir iterator from a path" ilk="function" name="__construct" returns="void" signature="__construct(string path)" src="spl_directory.c" /&gt;
        &lt;scope doc="Rewind dir back to the start" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return current dir entry" ilk="function" name="key" returns="string" signature="key()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return this needed for Iterator interface" ilk="function" name="current" returns="DirectoryIterator" signature="current()" src="spl_directory.c" /&gt;
        &lt;scope doc="Move to next entry" ilk="function" name="next" returns="void" signature="next()" src="spl_directory.c" /&gt;
        &lt;scope doc="Seek to the given position" ilk="function" name="seek" returns="void" signature="seek(int position)" src="spl_directory.c" /&gt;
        &lt;scope doc="Check whether dir contains more entries" ilk="function" name="valid" returns="string" signature="valid()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return filename of current dir entry" ilk="function" name="getFilename" returns="string" signature="getFilename()" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns the file extension component of path" ilk="function" name="getExtension" returns="string" signature="getExtension()" src="spl_directory.c" /&gt;
        &lt;scope doc="U Returns filename component of current dir entry" ilk="function" name="getBasename" returns="string" signature="getBasename([string $suffix])" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns true if current entry is &amp;apos; &amp;apos; or &amp;apos; &amp;apos;" ilk="function" name="isDot" returns="bool" signature="isDot()" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns an iterator for the current entry if it is a&amp;#xA;directory" ilk="function" name="getChildren" returns="RecursiveDirectoryIterator" signature="getChildren()" src="spl_directory.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="SplFileInfo"&gt;
        &lt;scope doc="Return the path" ilk="function" name="getPath" returns="string" signature="getPath()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return filename only" ilk="function" name="getFilename" returns="string" signature="getFilename()" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns file extension component of path" ilk="function" name="getExtension" returns="string" signature="getExtension()" src="spl_directory.c" /&gt;
        &lt;scope doc="U Returns filename component of path" ilk="function" name="getBasename" returns="string" signature="getBasename([string $suffix])" src="spl_directory.c" /&gt;
        &lt;scope doc="Return path and filename" ilk="function" name="getPathname" returns="string" signature="getPathname()" src="spl_directory.c" /&gt;
        &lt;scope doc="Cronstructs a new SplFileInfo from a path" ilk="function" name="__construct" returns="void" signature="__construct(string file_name)" src="spl_directory.c" /&gt;
        &lt;scope doc="Get file permissions" ilk="function" name="getPerms" returns="int" signature="getPerms()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get file inode" ilk="function" name="getInode" returns="int" signature="getInode()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get file size" ilk="function" name="getSize" returns="int" signature="getSize()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get file owner" ilk="function" name="getOwner" returns="int" signature="getOwner()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get file group" ilk="function" name="getGroup" returns="int" signature="getGroup()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get last access time of file" ilk="function" name="getATime" returns="int" signature="getATime()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get last modification time of file" ilk="function" name="getMTime" returns="int" signature="getMTime()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get inode modification time of file" ilk="function" name="getCTime" returns="int" signature="getCTime()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get file type" ilk="function" name="getType" returns="string" signature="getType()" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns true if file can be written" ilk="function" name="isWritable" returns="bool" signature="isWritable()" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns true if file can be read" ilk="function" name="isReadable" returns="bool" signature="isReadable()" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns true if file is executable" ilk="function" name="isExecutable" returns="bool" signature="isExecutable()" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns true if file is a regular file" ilk="function" name="isFile" returns="bool" signature="isFile()" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns true if file is directory" ilk="function" name="isDir" returns="bool" signature="isDir()" src="spl_directory.c" /&gt;
        &lt;scope doc="Returns true if file is symbolic link" ilk="function" name="isLink" returns="bool" signature="isLink()" src="spl_directory.c" /&gt;
        &lt;scope doc="U Return the target of a symbolic link" ilk="function" name="getLinkTarget" returns="string" signature="getLinkTarget()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return the resolved path" ilk="function" name="getRealPath" returns="string" signature="getRealPath()" src="spl_directory.c" /&gt;
        &lt;scope doc="Open the current file" ilk="function" name="openFile" returns="SplFileObject" signature="openFile([string mode = &amp;apos;r&amp;apos; [, bool use_include_path  [, resource context]]])" src="spl_directory.c" /&gt;
        &lt;scope doc="Class to use in openFile" ilk="function" name="setFileClass" returns="void" signature="setFileClass([string class_name])" src="spl_directory.c" /&gt;
        &lt;scope doc="Class to use in getFileInfo getPathInfo" ilk="function" name="setInfoClass" returns="void" signature="setInfoClass([string class_name])" src="spl_directory.c" /&gt;
        &lt;scope doc="Get copy file info" ilk="function" name="getFileInfo" returns="SplFileInfo" signature="getFileInfo([string $class_name])" src="spl_directory.c" /&gt;
        &lt;scope doc="Get copy file info" ilk="function" name="getPathInfo" returns="SplFileInfo" signature="getPathInfo([string $class_name])" src="spl_directory.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DirectoryIterator" ilk="class" name="FilesystemIterator"&gt;
        &lt;scope doc="Return getPathname or getFilename depending on flags" ilk="function" name="key" returns="string" signature="key()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return getFilename getFileInfo or this depending on&amp;#xA;flags" ilk="function" name="current" returns="string" signature="current()" src="spl_directory.c" /&gt;
        &lt;scope doc="Cronstructs a new dir iterator from a path" ilk="function" name="__construct" returns="void" signature="__construct(string path [, int flags])" src="spl_directory.c" /&gt;
        &lt;scope doc="Rewind dir back to the start" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get handling flags" ilk="function" name="getFlags" returns="int" signature="getFlags()" src="spl_directory.c" /&gt;
        &lt;scope doc="Set handling flags" ilk="function" name="setFlags" returns="void" signature="setFlags(long $flags)" src="spl_directory.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="FilesystemIterator" ilk="class" name="RecursiveDirectoryIterator"&gt;
        &lt;scope doc="Returns whether current entry is a directory and not &amp;apos;&amp;#xA;&amp;apos; or &amp;apos; &amp;apos;" ilk="function" name="hasChildren" returns="bool" signature="hasChildren([bool $allow_links = false])" src="spl_directory.c" /&gt;
        &lt;scope doc="Get sub path" ilk="function" name="getSubPath" returns="void" signature="getSubPath()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get sub path and file name" ilk="function" name="getSubPathname" returns="void" signature="getSubPathname()" src="spl_directory.c" /&gt;
        &lt;scope doc="Cronstructs a new dir iterator from a path" ilk="function" name="__construct" returns="int" signature="__construct(string path [, int flags])" src="spl_directory.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="FilesystemIterator" ilk="class" name="GlobIterator"&gt;
        &lt;scope doc="Cronstructs a new dir iterator from a glob expression&amp;#xA;no glob needed" ilk="function" name="__construct" returns="int" signature="__construct(string path [, int flags])" src="spl_directory.c" /&gt;
        &lt;scope doc="Return the number of directories and files found by&amp;#xA;globbing" ilk="function" name="cont" returns="int" signature="cont()" src="spl_directory.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="SplFileInfo" ilk="class" name="SplFileObject"&gt;
        &lt;scope doc="Construct a new file object" ilk="function" name="__construct" returns="void" signature="__construct(string filename [, string mode = &amp;apos;r&amp;apos; [, bool use_include_path  [, resource context]]]])" src="spl_directory.c" /&gt;
        &lt;scope doc="Rewind the file and read the first line" ilk="function" name="rewind" returns="void" signature="rewind()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return whether end of file is reached" ilk="function" name="eof" returns="void" signature="eof()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return eof" ilk="function" name="valid" returns="void" signature="valid()" src="spl_directory.c" /&gt;
        &lt;scope doc="Rturn next line from file" ilk="function" name="fgets" returns="string" signature="fgets()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return current line from file" ilk="function" name="current" returns="string" signature="current()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return line number" ilk="function" name="key" returns="int" signature="key()" src="spl_directory.c" /&gt;
        &lt;scope doc="Read next line" ilk="function" name="next" returns="void" signature="next()" src="spl_directory.c" /&gt;
        &lt;scope doc="Set file handling flags" ilk="function" name="setFlags" returns="void" signature="setFlags(int flags)" src="spl_directory.c" /&gt;
        &lt;scope doc="Get file handling flags" ilk="function" name="getFlags" returns="int" signature="getFlags()" src="spl_directory.c" /&gt;
        &lt;scope doc="Set maximum line length" ilk="function" name="setMaxLineLen" returns="void" signature="setMaxLineLen(int max_len)" src="spl_directory.c" /&gt;
        &lt;scope doc="Get maximum line length" ilk="function" name="getMaxLineLen" returns="int" signature="getMaxLineLen()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return false" ilk="function" name="hasChildren" returns="bool" signature="hasChildren()" src="spl_directory.c" /&gt;
        &lt;scope doc="Read NULL" ilk="function" name="getChildren" returns="bool" signature="getChildren()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return current line as csv" ilk="function" name="fgetcsv" returns="array" signature="fgetcsv([string delimiter [, string enclosure [, escape = &amp;apos;\\&amp;apos;]]])" src="spl_directory.c" /&gt;
        &lt;scope doc="Output a field array as a CSV line" ilk="function" name="fputcsv" returns="int" signature="fputcsv(array fields, [string delimiter [, string enclosure]])" src="spl_directory.c" /&gt;
        &lt;scope doc="Set the delimiter and enclosure character used in&amp;#xA;fgetcsv" ilk="function" name="setCsvControl" returns="void" signature="setCsvControl([string delimiter = &amp;apos;,&amp;apos; [, string enclosure = &amp;apos;&amp;quot;&amp;apos; [, string escape = &amp;apos;\\&amp;apos;]]])" src="spl_directory.c" /&gt;
        &lt;scope doc="Get the delimiter and enclosure character used in&amp;#xA;fgetcsv" ilk="function" name="getCsvControl" returns="array" signature="getCsvControl()" src="spl_directory.c" /&gt;
        &lt;scope doc="Portable file locking" ilk="function" name="flock" returns="bool" signature="flock(int operation [, int &amp;amp;wouldblock])" src="spl_directory.c" /&gt;
        &lt;scope doc="Flush the file" ilk="function" name="fflush" returns="bool" signature="fflush()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return current file position" ilk="function" name="ftell" returns="int" signature="ftell()" src="spl_directory.c" /&gt;
        &lt;scope doc="Return current file position" ilk="function" name="fseek" returns="int" signature="fseek(int pos [, int whence = SEEK_SET])" src="spl_directory.c" /&gt;
        &lt;scope doc="Get a character form the file" ilk="function" name="fgetc" returns="int" signature="fgetc()" src="spl_directory.c" /&gt;
        &lt;scope doc="Get a line from file pointer and strip HTML tags" ilk="function" name="fgetss" returns="string" signature="fgetss([string allowable_tags])" src="spl_directory.c" /&gt;
        &lt;scope doc="Output all remaining data from a file pointer" ilk="function" name="fpassthru" returns="int" signature="fpassthru()" src="spl_directory.c" /&gt;
        &lt;scope doc="Implements a mostly ANSI compatible fscanf" ilk="function" name="fscanf" returns="bool" signature="fscanf(string format [, string ...])" src="spl_directory.c" /&gt;
        &lt;scope doc="Binary-safe file write" ilk="function" name="fwrite" returns="mixed" signature="fwrite(string str [, int length])" src="spl_directory.c" /&gt;
        &lt;scope doc="Stat on a filehandle" ilk="function" name="fstat" returns="bool" signature="fstat()" src="spl_directory.c" /&gt;
        &lt;scope doc="Truncate file to &amp;apos;size&amp;apos; length" ilk="function" name="ftruncate" returns="bool" signature="ftruncate(int size)" src="spl_directory.c" /&gt;
        &lt;scope doc="Seek to specified line" ilk="function" name="seek" returns="void" signature="seek(int line_pos)" src="spl_directory.c" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="SplFileObject" ilk="class" name="SplTempFileObject"&gt;
        &lt;scope doc="Construct a new temp file object" ilk="function" name="__construct" returns="void" signature="__construct([int max_memory])" src="spl_directory.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ApacheRequest"&gt;
        &lt;scope doc="" ilk="function" name="filename" returns="string" signature="filename([string new_filename])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="uri" returns="string" signature="uri([string new_uri])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="unparsed_uri" returns="string" signature="unparsed_uri([string new_unparsed_uri])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="path_info" returns="string" signature="path_info([string new_path_info])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="args" returns="string" signature="args([string new_args])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="boundary" returns="string" signature="boundary()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="content_type" returns="string" signature="content_type([string new_type])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="content_encoding" returns="string" signature="content_encoding([string new_encoding])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="handler" returns="string" signature="handler([string new_handler])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="the_request" returns="string" signature="the_request()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="protocol" returns="string" signature="protocol()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="hostname" returns="string" signature="hostname()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="status_line" returns="string" signature="status_line([string new_status_line])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="method" returns="string" signature="method()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="proto_num" returns="int" signature="proto_num()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="assbackwards" returns="int" signature="assbackwards()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="proxyreq" returns="int" signature="proxyreq([int new_proxyreq])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="chunked" returns="int" signature="chunked()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="header_only" returns="int" signature="header_only()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="request_time" returns="int" signature="request_time()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="status" returns="int" signature="status([int new_status])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="method_number" returns="int" signature="method_number([int method_number])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="allowed" returns="int" signature="allowed([int allowed])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="bytes_sent" returns="int" signature="bytes_sent()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="mtime" returns="int" signature="mtime()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="content_length" returns="int" signature="content_length([int new_content_length])" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="remaining" returns="int" signature="remaining()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="no_cache" returns="int" signature="no_cache()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="no_local_copy" returns="int" signature="no_local_copy()" src="php_apache.c" /&gt;
        &lt;scope doc="" ilk="function" name="read_body" returns="int" signature="read_body()" src="php_apache.c" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMNamedNodeMap"&gt;
        &lt;scope doc="Retrieves a node specified by name" ilk="function" name="getNamedItem" signature="getNamedItem()" /&gt;
        &lt;scope doc="Retrieves a node specified by local name and namespace URI" ilk="function" name="getNamedItemNS" signature="getNamedItemNS()" /&gt;
        &lt;scope doc="Retrieves a node specified by index" ilk="function" name="item" signature="item()" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMNode" ilk="class" name="DOMCharacterData"&gt;
        &lt;scope doc="Append the string to the end of the character data of the node" ilk="function" name="appendData" signature="appendData()" /&gt;
        &lt;scope doc="Remove a range of characters from the node" ilk="function" name="deleteData" signature="deleteData()" /&gt;
        &lt;scope doc="Insert a string at the specified 16-bit unit offset" ilk="function" name="insertData" signature="insertData()" /&gt;
        &lt;scope doc="Replace a substring within the DOMCharacterData node" ilk="function" name="replaceData" signature="replaceData()" /&gt;
        &lt;scope doc="Extracts a range of data from the node" ilk="function" name="substringData" signature="substringData()" /&gt;
        &lt;variable citdl="int" name="length" /&gt;
        &lt;variable citdl="string" name="data" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMNodelist"&gt;
        &lt;scope doc="Retrieves a node specified by index" ilk="function" name="item" signature="item()" /&gt;
        &lt;variable citdl="int" name="length" /&gt;
        &lt;variable citdl="Type" name="Name" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMImplementation"&gt;
        &lt;scope doc="Creates a new DOMImplementation object" ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope doc="Creates a DOMDocument object of the specified type with its document element" ilk="function" name="createDocument" signature="createDocument()" /&gt;
        &lt;scope doc="Creates an empty DOMDocumentType object" ilk="function" name="createDocumentType" signature="createDocumentType()" /&gt;
        &lt;scope doc="Test if the DOM implementation implements a specific feature" ilk="function" name="hasFeature" signature="hasFeature()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="dir"&gt;
        &lt;scope doc="returns next item in the directory" ilk="function" name="read" returns="string" signature="read(void)" /&gt;
        &lt;scope doc="rewinds the directory point one item" ilk="function" name="rewind" signature="rewind(void)" /&gt;
        &lt;scope doc="closes the directory object" ilk="function" name="close" signature="close(void)" /&gt;
        &lt;variable citdl="string" name="path" /&gt;
        &lt;variable citdl="resource" name="handle" /&gt;
      &lt;/scope&gt;
      &lt;scope doc="includes and evaluates the specified file, produces a warning on error." ilk="function" name="include" signature="include(file_path)" /&gt;
      &lt;scope doc="includes and evaluates the specified file, produces a Fatal Error on error." ilk="function" name="require" signature="require(file_path)" /&gt;
      &lt;scope doc="includes and evaluates the specified file if it hasn&amp;apos;t been included before, produces a warning on error." ilk="function" name="include_once" signature="include_once(file_path)" /&gt;
      &lt;scope doc="includes and evaluates the specified file if it hasn&amp;apos;t been included before, produces a Fatal Error on error." ilk="function" name="require_once" signature="require_once(file_path)" /&gt;
      &lt;scope doc="set execution directives for a block of code." ilk="function" name="declare" signature="declare(directive)" /&gt;
      &lt;scope doc="evaluate a series of conditions on the same expression." ilk="function" name="switch" signature="switch(var)" /&gt;
      &lt;scope doc="create a PHP array." ilk="function" name="array" signature="array(&amp;lt;list&amp;gt;)" /&gt;
      &lt;scope doc="Get the version of the Zend Engine" ilk="function" name="zend_version" returns="string" signature="zend_version(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Forces collection of any existing garbage cycles&amp;#xA;Returns number of freed zvals" ilk="function" name="gc_collect_cycles" returns="int" signature="gc_collect_cycles(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns status of the circular reference collector" ilk="function" name="gc_enabled" returns="void" signature="gc_enabled(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Activates the circular reference collector" ilk="function" name="gc_enable" returns="void" signature="gc_enable(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Deactivates the circular reference collector" ilk="function" name="gc_disable" returns="void" signature="gc_disable(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Get the number of arguments that were passed to the&amp;#xA;function" ilk="function" name="func_num_args" returns="int" signature="func_num_args(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Get the arg num&amp;apos;th argument that was passed to the&amp;#xA;function" ilk="function" name="func_get_arg" returns="mixed" signature="func_get_arg(int arg_num)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Get an array of the arguments that were passed to the&amp;#xA;function" ilk="function" name="func_get_args" returns="array" signature="func_get_args()" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Get string length" ilk="function" name="strlen" returns="int" signature="strlen(string str)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Binary safe string comparison" ilk="function" name="strcmp" returns="int" signature="strcmp(string str1, string str2)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Binary safe string comparison" ilk="function" name="strncmp" returns="int" signature="strncmp(string str1, string str2, int len)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Binary safe case-insensitive string comparison" ilk="function" name="strcasecmp" returns="int" signature="strcasecmp(string str1, string str2)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Binary safe string comparison" ilk="function" name="strncasecmp" returns="int" signature="strncasecmp(string str1, string str2, int len)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Return the currently pointed key value pair in the&amp;#xA;passed array and advance the pointer to the next&amp;#xA;element" ilk="function" name="each" returns="array" signature="each(array arr)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Return the current error reporting level and if an&amp;#xA;argument was passed - change to the new level" ilk="function" name="error_reporting" returns="int" signature="error_reporting([int new_error_level])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Define a new constant" ilk="function" name="define" returns="bool" signature="define(string constant_name, mixed value, boolean case_insensitive=false)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Check whether a constant exists" ilk="function" name="defined" returns="bool" signature="defined(string constant_name)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Retrieves the class name" ilk="function" name="get_class" returns="string" signature="get_class([object object])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Retrieves the quot Late Static Binding quot class name" ilk="function" name="get_called_class" returns="string" signature="get_called_class()" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Retrieves the parent class name for object or class or&amp;#xA;current scope" ilk="function" name="get_parent_class" returns="string" signature="get_parent_class([mixed object])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns true if the object has this class as one of its&amp;#xA;parents" ilk="function" name="is_subclass_of" returns="bool" signature="is_subclass_of(mixed object_or_string, string class_name [, bool allow_string=true])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns true if the first argument is an object and is&amp;#xA;this class or has this class as one of" ilk="function" name="is_a" returns="bool" signature="is_a(mixed object_or_string, string class_name [, bool allow_string=false])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an array of default properties of the class" ilk="function" name="get_class_vars" returns="array" signature="get_class_vars(string class_name)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an array of object properties" ilk="function" name="get_object_vars" returns="array" signature="get_object_vars(object obj)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an array of method names for class or class&amp;#xA;instance" ilk="function" name="get_class_methods" returns="array" signature="get_class_methods(mixed class)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Checks if the class method exists" ilk="function" name="method_exists" returns="bool" signature="method_exists(object object, string method)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Checks if the object or class has a property" ilk="function" name="property_exists" returns="bool" signature="property_exists(mixed object_or_class, string property_name)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Checks if the class exists" ilk="function" name="class_exists" returns="bool" signature="class_exists(string classname [, bool autoload])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Checks if the class exists" ilk="function" name="interface_exists" returns="bool" signature="interface_exists(string classname [, bool autoload])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Checks if the trait exists" ilk="function" name="trait_exists" returns="bool" signature="trait_exists(string traitname [, bool autoload])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Checks if the function exists" ilk="function" name="function_exists" returns="bool" signature="function_exists(string function_name)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Creates an alias for user defined class" ilk="function" name="class_alias" returns="bool" signature="class_alias(string user_class_name , string alias_name [, bool autoload])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Cause an intentional memory leak for testing debugging&amp;#xA;purposes" ilk="function" name="leak" returns="void" signature="leak(int num_bytes=3)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="" ilk="function" name="e" returns="leak_variabl" signature="e(mixed variable [, bool leak_data])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an array with the file names that were include&amp;#xA;once &amp;apos;d" ilk="function" name="get_included_files" returns="array" signature="get_included_files(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Generates a user-level error warning notice message" ilk="function" name="trigger_error" returns="void" signature="trigger_error(string message [, int error_type])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Sets a user-defined error handler function Returns the&amp;#xA;previously defined error handler or false on error" ilk="function" name="set_error_handler" returns="string" signature="set_error_handler(string error_handler [, int error_types])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Restores the previously defined error handler function" ilk="function" name="restore_error_handler" returns="void" signature="restore_error_handler(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Sets a user-defined exception handler function Returns&amp;#xA;the previously defined exception handler or false on&amp;#xA;error" ilk="function" name="set_exception_handler" returns="string" signature="set_exception_handler(callable exception_handler)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Restores the previously defined exception handler&amp;#xA;function" ilk="function" name="restore_exception_handler" returns="void" signature="restore_exception_handler(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an array of all declared traits" ilk="function" name="get_declared_traits" returns="array" signature="get_declared_traits()" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an array of all declared classes" ilk="function" name="get_declared_classes" returns="array" signature="get_declared_classes()" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an array of all declared interfaces" ilk="function" name="get_declared_interfaces" returns="array" signature="get_declared_interfaces()" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an array of all defined functions" ilk="function" name="get_defined_functions" returns="array" signature="get_defined_functions(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an associative array of names and values of all&amp;#xA;currently defined variable names variables in the&amp;#xA;current scope" ilk="function" name="get_defined_vars" returns="array" signature="get_defined_vars(void)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Creates an anonymous function and returns its name&amp;#xA;funny eh" ilk="function" name="create_function" returns="string" signature="create_function(string args, string code)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Get the resource type name for a given resource" ilk="function" name="get_resource_type" returns="string" signature="get_resource_type(resource res)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="U Return an array containing names of loaded extensions" ilk="function" name="get_loaded_extensions" returns="array" signature="get_loaded_extensions([bool zend_extensions])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Return an array containing the names and values of all&amp;#xA;defined constants" ilk="function" name="get_defined_constants" returns="array" signature="get_defined_constants([bool categorize])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="" ilk="function" name="debug_print_backtrace" returns="void" signature="debug_print_backtrace([int options[, int limit]])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Return backtrace as array" ilk="function" name="debug_backtrace" returns="array" signature="debug_backtrace([int options[, int limit]])" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns true if the named extension is loaded" ilk="function" name="extension_loaded" returns="bool" signature="extension_loaded(string extension_name)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Returns an array with the names of functions belonging&amp;#xA;to the named extension" ilk="function" name="get_extension_funcs" returns="array" signature="get_extension_funcs(string extension_name)" src="zend_builtin_functions.c" /&gt;
      &lt;scope doc="Dummy function which displays an error when a disabled&amp;#xA;function is called" ilk="function" name="display_disabled_function" returns="void" signature="display_disabled_function(void)" src="zend_API.c" /&gt;
      &lt;scope doc="Format a message" ilk="function" name="msgfmt_format" returns="mixed" signature="msgfmt_format( MessageFormatter $nf, array $args )" src="msgformat_format.c" /&gt;
      &lt;scope doc="Format a message" ilk="function" name="msgfmt_format_message" returns="mixed" signature="msgfmt_format_message( string $locale, string $pattern, array $args )" src="msgformat_format.c" /&gt;
      &lt;scope doc="Create formatter" ilk="function" name="msgfmt_create" returns="MessageFormatter" signature="msgfmt_create( string $locale, string $pattern )" src="msgformat.c" /&gt;
      &lt;scope doc="Get formatter&amp;apos;s last error code" ilk="function" name="msgfmt_get_error_code" returns="int" signature="msgfmt_get_error_code( MessageFormatter $nf )" src="msgformat.c" /&gt;
      &lt;scope doc="Get text description for formatter&amp;apos;s last error code" ilk="function" name="msgfmt_get_error_message" returns="string" signature="msgfmt_get_error_message( MessageFormatter $coll )" src="msgformat.c" /&gt;
      &lt;scope doc="Parse a message" ilk="function" name="msgfmt_parse" returns="array" signature="msgfmt_parse( MessageFormatter $nf, string $source )" src="msgformat_parse.c" /&gt;
      &lt;scope doc="Parse a message" ilk="function" name="numfmt_parse_message" returns="array" signature="numfmt_parse_message( string $locale, string $pattern, string $source )" src="msgformat_parse.c" /&gt;
      &lt;scope doc="Get formatter pattern" ilk="function" name="msgfmt_get_pattern" returns="string" signature="msgfmt_get_pattern( MessageFormatter $mf )" src="msgformat_attr.c" /&gt;
      &lt;scope doc="Set formatter pattern" ilk="function" name="msgfmt_set_pattern" returns="bool" signature="msgfmt_set_pattern( MessageFormatter $mf, string $pattern )" src="msgformat_attr.c" /&gt;
      &lt;scope doc="Get formatter locale" ilk="function" name="msgfmt_get_locale" returns="string" signature="msgfmt_get_locale(MessageFormatter $mf)" src="msgformat_attr.c" /&gt;
      &lt;scope doc="Parse the string value starting at parse pos to a Unix&amp;#xA;timestamp -int" ilk="function" name="datefmt_parse" returns="integer" signature="datefmt_parse( IntlDateFormatter $fmt, string $text_to_parse [, int $parse_pos] )" src="dateformat_parse.c" /&gt;
      &lt;scope doc="Parse the string value to a localtime array" ilk="function" name="datefmt_localtime" returns="integer" signature="datefmt_localtime( IntlDateFormatter $fmt, string $text_to_parse[, int $parse_pos ])" src="dateformat_parse.c" /&gt;
      &lt;scope doc="Format the time value as a string" ilk="function" name="datefmt_format" returns="string" signature="datefmt_format( [mixed]int $args or array $args )" src="dateformat_format.c" /&gt;
      &lt;scope doc="Get formatter&amp;apos;s last error code" ilk="function" name="datefmt_get_error_code" returns="int" signature="datefmt_get_error_code( IntlDateFormatter $nf )" src="dateformat.c" /&gt;
      &lt;scope doc="Get text description for formatter&amp;apos;s last error code" ilk="function" name="datefmt_get_error_message" returns="string" signature="datefmt_get_error_message( IntlDateFormatter $coll )" src="dateformat.c" /&gt;
      &lt;scope doc="Create formatter" ilk="function" name="datefmt_create" returns="IntlDateFormatter" signature="datefmt_create(string $locale, long date_type, long time_type[, string $timezone_str, long $calendar, string $pattern)" src="dateformat_create.cpp" /&gt;
      &lt;scope doc="Get formatter datetype" ilk="function" name="datefmt_get_datetype" returns="string" signature="datefmt_get_datetype( IntlDateFormatter $mf )" src="dateformat_attr.c" /&gt;
      &lt;scope doc="Get formatter timetype" ilk="function" name="datefmt_get_timetype" returns="string" signature="datefmt_get_timetype( IntlDateFormatter $mf )" src="dateformat_attr.c" /&gt;
      &lt;scope doc="Get formatter pattern" ilk="function" name="datefmt_get_pattern" returns="string" signature="datefmt_get_pattern( IntlDateFormatter $mf )" src="dateformat_attr.c" /&gt;
      &lt;scope doc="Set formatter pattern" ilk="function" name="datefmt_set_pattern" returns="bool" signature="datefmt_set_pattern( IntlDateFormatter $mf, string $pattern )" src="dateformat_attr.c" /&gt;
      &lt;scope doc="Get formatter locale" ilk="function" name="datefmt_get_locale" returns="string" signature="datefmt_get_locale(IntlDateFormatter $mf)" src="dateformat_attr.c" /&gt;
      &lt;scope doc="Get formatter locale" ilk="function" name="datefmt_isLenient" returns="string" signature="datefmt_isLenient(IntlDateFormatter $mf)" src="dateformat_attr.c" /&gt;
      &lt;scope doc="Set formatter lenient" ilk="function" name="datefmt_setLenient" returns="string" signature="datefmt_setLenient(IntlDateFormatter $mf)" src="dateformat_attr.c" /&gt;
      &lt;scope doc="Get formatter timezone id" ilk="function" name="datefmt_get_timezone_id" returns="string" signature="datefmt_get_timezone_id(IntlDateFormatter $mf)" src="dateformat_attrcpp.cpp" /&gt;
      &lt;scope doc="Get formatter timezone" ilk="function" name="datefmt_get_timezone" returns="IntlTimeZone" signature="datefmt_get_timezone(IntlDateFormatter $mf)" src="dateformat_attrcpp.cpp" /&gt;
      &lt;scope doc="Set formatter timezone id" ilk="function" name="datefmt_set_timezone_id" returns="boolean" signature="datefmt_set_timezone_id(IntlDateFormatter $mf, $timezone_id)" src="dateformat_attrcpp.cpp" /&gt;
      &lt;scope doc="Get formatter calendar type" ilk="function" name="datefmt_get_calendar" returns="int" signature="datefmt_get_calendar(IntlDateFormatter $mf)" src="dateformat_attrcpp.cpp" /&gt;
      &lt;scope doc="Get formatter calendar" ilk="function" name="datefmt_get_calendar_object" returns="IntlCalendar" signature="datefmt_get_calendar_object(IntlDateFormatter $mf)" src="dateformat_attrcpp.cpp" /&gt;
      &lt;scope doc="Set formatter&amp;apos;s calendar" ilk="function" name="datefmt_set_calendar" returns="bool" signature="datefmt_set_calendar(IntlDateFormatter $mf, mixed $calendar)" src="dateformat_attrcpp.cpp" /&gt;
      &lt;scope doc="Get code of the last occurred error" ilk="function" name="intl_get_error_code" returns="int" signature="intl_get_error_code()" src="common_error.c" /&gt;
      &lt;scope doc="Get text description of the last occurred error" ilk="function" name="intl_get_error_message" returns="string" signature="intl_get_error_message()" src="common_error.c" /&gt;
      &lt;scope doc="Check whether the given error code indicates a failure&amp;#xA;Returns true if it does and false if the code indicates" ilk="function" name="intl_is_failure" returns="bool" signature="intl_is_failure()" src="common_error.c" /&gt;
      &lt;scope doc="Return a string for a given error code The string will&amp;#xA;be the same as the name of the error" ilk="function" name="intl_error_name" returns="string" signature="intl_error_name()" src="common_error.c" /&gt;
      &lt;scope doc="Parse a number" ilk="function" name="numfmt_parse" returns="mixed" signature="numfmt_parse( NumberFormatter $nf, string $str[, int $type, int &amp;amp;$position ])" src="formatter_parse.c" /&gt;
      &lt;scope doc="Parse a number as currency" ilk="function" name="numfmt_parse_currency" returns="double" signature="numfmt_parse_currency( NumberFormatter $nf, string $str, string $&amp;amp;currency[, int $&amp;amp;position] )" src="formatter_parse.c" /&gt;
      &lt;scope doc="Get formatter attribute value" ilk="function" name="numfmt_get_attribute" returns="mixed" signature="numfmt_get_attribute( NumberFormatter $nf, int $attr )" src="formatter_attr.c" /&gt;
      &lt;scope doc="Get formatter attribute value" ilk="function" name="numfmt_get_text_attribute" returns="string" signature="numfmt_get_text_attribute( NumberFormatter $nf, int $attr )" src="formatter_attr.c" /&gt;
      &lt;scope doc="Get formatter attribute value" ilk="function" name="numfmt_set_attribute" returns="bool" signature="numfmt_set_attribute( NumberFormatter $nf, int $attr, mixed $value )" src="formatter_attr.c" /&gt;
      &lt;scope doc="Get formatter attribute value" ilk="function" name="numfmt_set_text_attribute" returns="bool" signature="numfmt_set_text_attribute( NumberFormatter $nf, int $attr, string $value )" src="formatter_attr.c" /&gt;
      &lt;scope doc="Get formatter symbol value" ilk="function" name="numfmt_get_symbol" returns="string" signature="numfmt_get_symbol( NumberFormatter $nf, int $attr )" src="formatter_attr.c" /&gt;
      &lt;scope doc="Set formatter symbol value" ilk="function" name="numfmt_set_symbol" returns="bool" signature="numfmt_set_symbol( NumberFormatter $nf, int $attr, string $symbol )" src="formatter_attr.c" /&gt;
      &lt;scope doc="Get formatter pattern" ilk="function" name="numfmt_get_pattern" returns="string" signature="numfmt_get_pattern( NumberFormatter $nf )" src="formatter_attr.c" /&gt;
      &lt;scope doc="Set formatter pattern" ilk="function" name="numfmt_set_pattern" returns="bool" signature="numfmt_set_pattern( NumberFormatter $nf, string $pattern )" src="formatter_attr.c" /&gt;
      &lt;scope doc="Get formatter locale" ilk="function" name="numfmt_get_locale" returns="string" signature="numfmt_get_locale( NumberFormatter $nf[, int type] )" src="formatter_attr.c" /&gt;
      &lt;scope doc="Format a number" ilk="function" name="numfmt_format" returns="mixed" signature="numfmt_format( NumberFormatter $nf, mixed $num[, int type] )" src="formatter_format.c" /&gt;
      &lt;scope doc="Format a number as currency" ilk="function" name="numfmt_format_currency" returns="mixed" signature="numfmt_format_currency( NumberFormatter $nf, double $num, string $currency )" src="formatter_format.c" /&gt;
      &lt;scope doc="Create number formatter" ilk="function" name="numfmt_create" returns="NumberFormatter" signature="numfmt_create( string $locale, int style[, string $pattern ] )" src="formatter_main.c" /&gt;
      &lt;scope doc="Get formatter&amp;apos;s last error code" ilk="function" name="numfmt_get_error_code" returns="int" signature="numfmt_get_error_code( NumberFormatter $nf )" src="formatter_main.c" /&gt;
      &lt;scope doc="Get text description for formatter&amp;apos;s last error code" ilk="function" name="numfmt_get_error_message" returns="string" signature="numfmt_get_error_message( NumberFormatter $nf )" src="formatter_main.c" /&gt;
      &lt;scope doc="Get number of graphemes in a string" ilk="function" name="grapheme_strlen" returns="int" signature="grapheme_strlen(string str)" src="grapheme_string.c" /&gt;
      &lt;scope doc="Find position of first occurrence of a string within&amp;#xA;another" ilk="function" name="grapheme_strpos" returns="int" signature="grapheme_strpos(string haystack, string needle [, int offset ])" src="grapheme_string.c" /&gt;
      &lt;scope doc="Find position of first occurrence of a string within&amp;#xA;another ignoring case differences" ilk="function" name="grapheme_stripos" returns="int" signature="grapheme_stripos(string haystack, string needle [, int offset ])" src="grapheme_string.c" /&gt;
      &lt;scope doc="Find position of last occurrence of a string within&amp;#xA;another" ilk="function" name="grapheme_strrpos" returns="int" signature="grapheme_strrpos(string haystack, string needle [, int offset])" src="grapheme_string.c" /&gt;
      &lt;scope doc="Find position of last occurrence of a string within&amp;#xA;another ignoring case" ilk="function" name="grapheme_strripos" returns="int" signature="grapheme_strripos(string haystack, string needle [, int offset])" src="grapheme_string.c" /&gt;
      &lt;scope doc="Returns part of a string" ilk="function" name="grapheme_substr" returns="string" signature="grapheme_substr(string str, int start [, int length])" src="grapheme_string.c" /&gt;
      &lt;scope doc="Finds first occurrence of a string within another" ilk="function" name="grapheme_strstr" returns="string" signature="grapheme_strstr(string haystack, string needle[, bool part])" src="grapheme_string.c" /&gt;
      &lt;scope doc="Finds first occurrence of a string within another" ilk="function" name="grapheme_stristr" returns="string" signature="grapheme_stristr(string haystack, string needle[, bool part])" src="grapheme_string.c" /&gt;
      &lt;scope doc="Function to extract a sequence of default grapheme&amp;#xA;clusters" ilk="function" name="grapheme_extract" returns="string" signature="grapheme_extract(string str, int size[, int extract_type[, int start[, int next]]])" src="grapheme_string.c" /&gt;
      &lt;scope doc="Get default locale" ilk="function" name="locale_get_default" returns="string" signature="locale_get_default( )" src="locale_methods.c" /&gt;
      &lt;scope doc="Set default locale" ilk="function" name="locale_set_default" returns="string" signature="locale_set_default( string $locale )" src="locale_methods.c" /&gt;
      &lt;scope doc="gets the script for the locale" ilk="function" name="locale_get_script" returns="string" signature="locale_get_script($locale)" src="locale_methods.c" /&gt;
      &lt;scope doc="gets the region for the locale" ilk="function" name="locale_get_region" returns="string" signature="locale_get_region($locale)" src="locale_methods.c" /&gt;
      &lt;scope doc="gets the primary language for the locale" ilk="function" name="locale_get_primary_language" returns="string" signature="locale_get_primary_language($locale)" src="locale_methods.c" /&gt;
      &lt;scope doc="gets the name for the locale in in locale or default&amp;#xA;locale" ilk="function" name="get_display_name" returns="string" signature="get_display_name($locale[, $in_locale = null])" src="locale_methods.c" /&gt;
      &lt;scope doc="gets the language for the locale in in locale or&amp;#xA;default locale" ilk="function" name="get_display_language" returns="string" signature="get_display_language($locale[, $in_locale = null])" src="locale_methods.c" /&gt;
      &lt;scope doc="gets the script for the locale in in locale or default&amp;#xA;locale" ilk="function" name="get_display_script" returns="string" signature="get_display_script($locale, $in_locale = null)" src="locale_methods.c" /&gt;
      &lt;scope doc="gets the region for the locale in in locale or default&amp;#xA;locale" ilk="function" name="get_display_region" returns="string" signature="get_display_region($locale, $in_locale = null)" src="locale_methods.c" /&gt;
      &lt;scope doc="return an associative array containing keyword-value&amp;#xA;pairs for this locale The keys are keys to the array&amp;#xA;doh" ilk="function" name="getKeywords" returns="array" signature="getKeywords(string $locale)" src="locale_methods.c" /&gt;
      &lt;scope doc="return an associative array containing keyword-value&amp;#xA;pairs for this locale The keys are keys to the array&amp;#xA;doh" ilk="function" name="locale_get_keywords" returns="array" signature="locale_get_keywords(string $locale)" src="locale_methods.c" /&gt;
      &lt;scope doc="param string locale The locale string to canonicalize" ilk="function" name="locale_canonicalize" returns="string" signature="locale_canonicalize(Locale $loc, string $locale)" src="locale_methods.c" /&gt;
      &lt;scope doc="Creates a locale by combining the parts of locale-ID&amp;#xA;passed" ilk="function" name="compose_locale" returns="string" signature="compose_locale($array)" src="locale_methods.c" /&gt;
      &lt;scope doc="parses a locale-id into an array the different parts of&amp;#xA;it" ilk="function" name="parse_locale" returns="array" signature="parse_locale($locale)" src="locale_methods.c" /&gt;
      &lt;scope doc="gets an array containing the list of variants or null" ilk="function" name="locale_get_all_variants" returns="array" signature="locale_get_all_variants($locale)" src="locale_methods.c" /&gt;
      &lt;scope doc="Checks if a langtag filter matches with locale&amp;#xA;according to RFC &amp;apos;s basic filtering algorithm" ilk="function" name="locale_filter_matches" returns="boolean" signature="locale_filter_matches(string $langtag, string $locale[, bool $canonicalize])" src="locale_methods.c" /&gt;
      &lt;scope doc="Searchs the items in langtag for the best match to the&amp;#xA;language range" ilk="function" name="locale_lookup" returns="string" signature="locale_lookup(array $langtag, string $locale[, bool $canonicalize[, string $default = null]])" src="locale_methods.c" /&gt;
      &lt;scope doc="Tries to find out best available locale based on HTTP&amp;#xA;Accept-Language header" ilk="function" name="locale_accept_from_http" returns="string" signature="locale_accept_from_http(string $http_accept)" src="locale_methods.c" /&gt;
      &lt;scope doc="Normalize a string" ilk="function" name="normalizer_normalize" returns="string" signature="normalizer_normalize( string $input [, string $form = FORM_C] )" src="normalizer_normalize.c" /&gt;
      &lt;scope doc="Test if a string is in a given normalization form" ilk="function" name="normalizer_is_normalize" returns="bool" signature="normalizer_is_normalize( string $input [, string $form = FORM_C] )" src="normalizer_normalize.c" /&gt;
      &lt;scope doc="Converts an Unicode domain to ASCII representation as&amp;#xA;defined in the IDNA RFC" ilk="function" name="idn_to_ascii" returns="int" signature="idn_to_ascii(string domain[, int options[, int variant[, array &amp;amp;idna_info]]])" src="idn.c" /&gt;
      &lt;scope doc="Converts an ASCII representation of the domain to&amp;#xA;Unicode UTF- as defined in the IDNA RFC" ilk="function" name="idn_to_utf8" returns="int" signature="idn_to_utf8(string domain[, int options[, int variant[, array &amp;amp;idna_info]]])" src="idn.c" /&gt;
      &lt;scope doc="Sort array using specified collator" ilk="function" name="collator_sort" returns="bool" signature="collator_sort(  Collator $coll, array(string) $arr [, int $sort_flags] )" src="collator_sort.c" /&gt;
      &lt;scope doc="Equivalent to standard PHP sort using Collator Uses ICU&amp;#xA;ucol getSortKey for performance" ilk="function" name="collator_sort_with_sort_keys" returns="bool" signature="collator_sort_with_sort_keys( Collator $coll, array(string) $arr )" src="collator_sort.c" /&gt;
      &lt;scope doc="Sort array using specified collator maintaining index&amp;#xA;association" ilk="function" name="collator_asort" returns="bool" signature="collator_asort( Collator $coll, array(string) $arr )" src="collator_sort.c" /&gt;
      &lt;scope doc="Get a sort key for a string from a Collator" ilk="function" name="collator_get_sort_key" returns="bool" signature="collator_get_sort_key( Collator $coll, string $str )" src="collator_sort.c" /&gt;
      &lt;scope doc="Compare two strings" ilk="function" name="collator_compare" returns="int" signature="collator_compare( Collator $coll, string $str1, string $str2 )" src="collator_compare.c" /&gt;
      &lt;scope doc="Gets the locale name of the collator" ilk="function" name="collator_get_locale" returns="string" signature="collator_get_locale( Collator $coll, int $type )" src="collator_locale.c" /&gt;
      &lt;scope doc="Create collator" ilk="function" name="collator_create" returns="Collator" signature="collator_create( string $locale )" src="collator_create.c" /&gt;
      &lt;scope doc="Get collation attribute value" ilk="function" name="collator_get_attribute" returns="int" signature="collator_get_attribute( Collator $coll, int $attr )" src="collator_attr.c" /&gt;
      &lt;scope doc="Set collation attribute" ilk="function" name="collator_set_attribute" returns="bool" signature="collator_set_attribute( Collator $coll, int $attr, int $val )" src="collator_attr.c" /&gt;
      &lt;scope doc="Returns the current collation strength" ilk="function" name="collator_get_strength" returns="int" signature="collator_get_strength(Collator coll)" src="collator_attr.c" /&gt;
      &lt;scope doc="Set the collation strength" ilk="function" name="collator_set_strength" returns="bool" signature="collator_set_strength(Collator coll, int strength)" src="collator_attr.c" /&gt;
      &lt;scope doc="Get collator&amp;apos;s last error code" ilk="function" name="collator_get_error_code" returns="int" signature="collator_get_error_code( Collator $coll )" src="collator_error.c" /&gt;
      &lt;scope doc="Get text description for collator&amp;apos;s last error code" ilk="function" name="collator_get_error_message" returns="string" signature="collator_get_error_message( Collator $coll )" src="collator_error.c" /&gt;
      &lt;scope doc="Load a dictionary" ilk="function" name="pspell_new" returns="int" signature="pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])" src="pspell.c" /&gt;
      &lt;scope doc="Load a dictionary with a personal wordlist" ilk="function" name="pspell_new_personal" returns="int" signature="pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])" src="pspell.c" /&gt;
      &lt;scope doc="Load a dictionary based on the given config" ilk="function" name="pspell_new_config" returns="int" signature="pspell_new_config(int config)" src="pspell.c" /&gt;
      &lt;scope doc="Returns true if word is valid" ilk="function" name="pspell_check" returns="bool" signature="pspell_check(int pspell, string word)" src="pspell.c" /&gt;
      &lt;scope doc="Returns array of suggestions" ilk="function" name="pspell_suggest" returns="array" signature="pspell_suggest(int pspell, string word)" src="pspell.c" /&gt;
      &lt;scope doc="Notify the dictionary of a user-selected replacement" ilk="function" name="pspell_store_replacement" returns="bool" signature="pspell_store_replacement(int pspell, string misspell, string correct)" src="pspell.c" /&gt;
      &lt;scope doc="Adds a word to a personal list" ilk="function" name="pspell_add_to_personal" returns="bool" signature="pspell_add_to_personal(int pspell, string word)" src="pspell.c" /&gt;
      &lt;scope doc="Adds a word to the current session" ilk="function" name="pspell_add_to_session" returns="bool" signature="pspell_add_to_session(int pspell, string word)" src="pspell.c" /&gt;
      &lt;scope doc="Clears the current session" ilk="function" name="pspell_clear_session" returns="bool" signature="pspell_clear_session(int pspell)" src="pspell.c" /&gt;
      &lt;scope doc="Saves the current personal wordlist" ilk="function" name="pspell_save_wordlist" returns="bool" signature="pspell_save_wordlist(int pspell)" src="pspell.c" /&gt;
      &lt;scope doc="Create a new config to be used later to create a&amp;#xA;manager" ilk="function" name="pspell_config_create" returns="int" signature="pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])" src="pspell.c" /&gt;
      &lt;scope doc="Consider run-together words as valid components" ilk="function" name="pspell_config_runtogether" returns="bool" signature="pspell_config_runtogether(int conf, bool runtogether)" src="pspell.c" /&gt;
      &lt;scope doc="Select mode for config PSPELL FAST PSPELL NORMAL or&amp;#xA;PSPELL BAD SPELLERS" ilk="function" name="pspell_config_mode" returns="bool" signature="pspell_config_mode(int conf, long mode)" src="pspell.c" /&gt;
      &lt;scope doc="Ignore words lt n chars" ilk="function" name="pspell_config_ignore" returns="bool" signature="pspell_config_ignore(int conf, int ignore)" src="pspell.c" /&gt;
      &lt;scope doc="Use a personal dictionary for this config" ilk="function" name="pspell_config_personal" returns="bool" signature="pspell_config_personal(int conf, string personal)" src="pspell.c" /&gt;
      &lt;scope doc="location of the main word list" ilk="function" name="pspell_config_dict_dir" returns="bool" signature="pspell_config_dict_dir(int conf, string directory)" src="pspell.c" /&gt;
      &lt;scope doc="location of language data files" ilk="function" name="pspell_config_data_dir" returns="bool" signature="pspell_config_data_dir(int conf, string directory)" src="pspell.c" /&gt;
      &lt;scope doc="Use a personal dictionary with replacement pairs for&amp;#xA;this config" ilk="function" name="pspell_config_repl" returns="bool" signature="pspell_config_repl(int conf, string repl)" src="pspell.c" /&gt;
      &lt;scope doc="Save replacement pairs when personal list is saved for&amp;#xA;this config" ilk="function" name="pspell_config_save_repl" returns="bool" signature="pspell_config_save_repl(int conf, bool save)" src="pspell.c" /&gt;
      &lt;scope doc="Set information for a message queue" ilk="function" name="msg_set_queue" returns="bool" signature="msg_set_queue(resource queue, array data)" src="sysvmsg.c" /&gt;
      &lt;scope doc="Returns information about a message queue" ilk="function" name="msg_stat_queue" returns="array" signature="msg_stat_queue(resource queue)" src="sysvmsg.c" /&gt;
      &lt;scope doc="Check whether a message queue exists" ilk="function" name="msg_queue_exists" returns="bool" signature="msg_queue_exists(int key)" src="sysvmsg.c" /&gt;
      &lt;scope doc="Attach to a message queue" ilk="function" name="msg_get_queue" returns="resource" signature="msg_get_queue(int key [, int perms])" src="sysvmsg.c" /&gt;
      &lt;scope doc="Destroy the queue" ilk="function" name="msg_remove_queue" returns="bool" signature="msg_remove_queue(resource queue)" src="sysvmsg.c" /&gt;
      &lt;scope doc="Send a message of type msgtype must be gt to a message&amp;#xA;queue" ilk="function" name="msg_receive" returns="mixed" signature="msg_receive(resource queue, int desiredmsgtype, int &amp;amp;msgtype, int maxsize, mixed message [, bool unserialize=true [, int flags=0 [, int errorcode]]])" src="sysvmsg.c" /&gt;
      &lt;scope doc="Send a message of type msgtype must be gt to a message&amp;#xA;queue" ilk="function" name="msg_send" returns="bool" signature="msg_send(resource queue, int msgtype, mixed message [, bool serialize=true [, bool blocking=true [, int errorcode]]])" src="sysvmsg.c" /&gt;
      &lt;scope doc="Set the streams context for the next libxml document&amp;#xA;load or write" ilk="function" name="libxml_set_streams_context" returns="void" signature="libxml_set_streams_context(resource streams_context)" src="libxml.c" /&gt;
      &lt;scope doc="Disable libxml errors and allow user to fetch error&amp;#xA;information as needed" ilk="function" name="libxml_use_internal_errors" returns="bool" signature="libxml_use_internal_errors([boolean use_errors])" src="libxml.c" /&gt;
      &lt;scope doc="Retrieve last error from libxml" ilk="function" name="libxml_get_last_error" returns="object" signature="libxml_get_last_error()" src="libxml.c" /&gt;
      &lt;scope doc="Retrieve array of errors" ilk="function" name="libxml_get_errors" returns="object" signature="libxml_get_errors()" src="libxml.c" /&gt;
      &lt;scope doc="Clear last error from libxml" ilk="function" name="libxml_clear_errors" returns="void" signature="libxml_clear_errors()" src="libxml.c" /&gt;
      &lt;scope doc="Disable Enable ability to load external entities" ilk="function" name="libxml_disable_entity_loader" returns="bool" signature="libxml_disable_entity_loader([boolean disable])" src="libxml.c" /&gt;
      &lt;scope doc="Changes the default external entity loader" ilk="function" name="libxml_set_external_entity_loader" returns="void" signature="libxml_set_external_entity_loader(callback resolver_function)" src="libxml.c" /&gt;
      &lt;scope doc="Initializes GMP number" ilk="function" name="gmp_init" returns="resource" signature="gmp_init(mixed number [, int base])" src="gmp.c" /&gt;
      &lt;scope doc="Gets signed long value of GMP number" ilk="function" name="gmp_intval" returns="int" signature="gmp_intval(resource gmpnumber)" src="gmp.c" /&gt;
      &lt;scope doc="Gets string representation of GMP number" ilk="function" name="gmp_strval" returns="string" signature="gmp_strval(resource gmpnumber [, int base])" src="gmp.c" /&gt;
      &lt;scope doc="Add a and b" ilk="function" name="gmp_add" returns="resource" signature="gmp_add(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Subtract b from a" ilk="function" name="gmp_sub" returns="resource" signature="gmp_sub(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Multiply a and b" ilk="function" name="gmp_mul" returns="resource" signature="gmp_mul(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Divide a by b returns quotient and reminder" ilk="function" name="gmp_div_qr" returns="array" signature="gmp_div_qr(resource a, resource b [, int round])" src="gmp.c" /&gt;
      &lt;scope doc="Divide a by b returns reminder only" ilk="function" name="gmp_div_r" returns="resource" signature="gmp_div_r(resource a, resource b [, int round])" src="gmp.c" /&gt;
      &lt;scope doc="Divide a by b returns quotient only" ilk="function" name="gmp_div_q" returns="resource" signature="gmp_div_q(resource a, resource b [, int round])" src="gmp.c" /&gt;
      &lt;scope doc="Computes a modulo b" ilk="function" name="gmp_mod" returns="resource" signature="gmp_mod(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Divide a by b using exact division algorithm" ilk="function" name="gmp_divexact" returns="resource" signature="gmp_divexact(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Negates a number" ilk="function" name="gmp_neg" returns="resource" signature="gmp_neg(resource a)" src="gmp.c" /&gt;
      &lt;scope doc="Calculates absolute value" ilk="function" name="gmp_abs" returns="resource" signature="gmp_abs(resource a)" src="gmp.c" /&gt;
      &lt;scope doc="Calculates factorial function" ilk="function" name="gmp_fact" returns="resource" signature="gmp_fact(int a)" src="gmp.c" /&gt;
      &lt;scope doc="Raise base to power exp" ilk="function" name="gmp_pow" returns="resource" signature="gmp_pow(resource base, int exp)" src="gmp.c" /&gt;
      &lt;scope doc="Raise base to power exp and take result modulo mod" ilk="function" name="gmp_powm" returns="resource" signature="gmp_powm(resource base, resource exp, resource mod)" src="gmp.c" /&gt;
      &lt;scope doc="Takes integer part of square root of a" ilk="function" name="gmp_sqrt" returns="resource" signature="gmp_sqrt(resource a)" src="gmp.c" /&gt;
      &lt;scope doc="Square root with remainder" ilk="function" name="gmp_sqrtrem" returns="array" signature="gmp_sqrtrem(resource a)" src="gmp.c" /&gt;
      &lt;scope doc="Checks if a is an exact square" ilk="function" name="gmp_perfect_square" returns="bool" signature="gmp_perfect_square(resource a)" src="gmp.c" /&gt;
      &lt;scope doc="Checks if a is quot probably prime quot" ilk="function" name="gmp_prob_prime" returns="int" signature="gmp_prob_prime(resource a[, int reps])" src="gmp.c" /&gt;
      &lt;scope doc="Computes greatest common denominator gcd of a and b" ilk="function" name="gmp_gcd" returns="resource" signature="gmp_gcd(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Computes G S and T such that AS BT G gcd&amp;apos; A B" ilk="function" name="gmp_gcdext" returns="array" signature="gmp_gcdext(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Computes the inverse of a modulo b" ilk="function" name="gmp_invert" returns="resource" signature="gmp_invert(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Computes Jacobi symbol" ilk="function" name="gmp_jacobi" returns="int" signature="gmp_jacobi(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Computes Legendre symbol" ilk="function" name="gmp_legendre" returns="int" signature="gmp_legendre(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Compares two numbers" ilk="function" name="gmp_cmp" returns="int" signature="gmp_cmp(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Gets the sign of the number" ilk="function" name="gmp_sign" returns="int" signature="gmp_sign(resource a)" src="gmp.c" /&gt;
      &lt;scope doc="Gets random number" ilk="function" name="gmp_random" returns="resource" signature="gmp_random([int limiter])" src="gmp.c" /&gt;
      &lt;scope doc="Calculates logical AND of a and b" ilk="function" name="gmp_and" returns="resource" signature="gmp_and(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Calculates logical OR of a and b" ilk="function" name="gmp_or" returns="resource" signature="gmp_or(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Calculates one&amp;apos;s complement of a" ilk="function" name="gmp_com" returns="resource" signature="gmp_com(resource a)" src="gmp.c" /&gt;
      &lt;scope doc="Finds next prime of a" ilk="function" name="gmp_nextprime" returns="resource" signature="gmp_nextprime(resource a)" src="gmp.c" /&gt;
      &lt;scope doc="Calculates logical exclusive OR of a and b" ilk="function" name="gmp_xor" returns="resource" signature="gmp_xor(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Sets or clear bit in a" ilk="function" name="gmp_setbit" returns="void" signature="gmp_setbit(resource &amp;amp;a, int index[, bool set_clear])" src="gmp.c" /&gt;
      &lt;scope doc="Clears bit in a" ilk="function" name="gmp_clrbit" returns="void" signature="gmp_clrbit(resource &amp;amp;a, int index)" src="gmp.c" /&gt;
      &lt;scope doc="Tests if bit is set in a" ilk="function" name="gmp_testbit" returns="bool" signature="gmp_testbit(resource a, int index)" src="gmp.c" /&gt;
      &lt;scope doc="Calculates the population count of a" ilk="function" name="gmp_popcount" returns="int" signature="gmp_popcount(resource a)" src="gmp.c" /&gt;
      &lt;scope doc="Calculates hamming distance between a and b" ilk="function" name="gmp_hamdist" returns="int" signature="gmp_hamdist(resource a, resource b)" src="gmp.c" /&gt;
      &lt;scope doc="Finds first zero bit" ilk="function" name="gmp_scan0" returns="int" signature="gmp_scan0(resource a, int start)" src="gmp.c" /&gt;
      &lt;scope doc="Finds first non-zero bit" ilk="function" name="gmp_scan1" returns="int" signature="gmp_scan1(resource a, int start)" src="gmp.c" /&gt;
      &lt;scope doc="Perform a Perl-style regular expression match" ilk="function" name="preg_match" returns="int" signature="preg_match(string pattern, string subject [, array &amp;amp;subpatterns [, int flags [, int offset]]])" src="php_pcre.c" /&gt;
      &lt;scope doc="Perform a Perl-style global regular expression match" ilk="function" name="preg_match_all" returns="int" signature="preg_match_all(string pattern, string subject [, array &amp;amp;subpatterns [, int flags [, int offset]]])" src="php_pcre.c" /&gt;
      &lt;scope doc="Perform Perl-style regular expression replacement" ilk="function" name="preg_replace" returns="mixed" signature="preg_replace(mixed regex, mixed replace, mixed subject [, int limit [, int &amp;amp;count]])" src="php_pcre.c" /&gt;
      &lt;scope doc="Perform Perl-style regular expression replacement using&amp;#xA;replacement callback" ilk="function" name="preg_replace_callback" returns="mixed" signature="preg_replace_callback(mixed regex, mixed callback, mixed subject [, int limit [, int &amp;amp;count]])" src="php_pcre.c" /&gt;
      &lt;scope doc="Perform Perl-style regular expression replacement and&amp;#xA;only return matches" ilk="function" name="preg_filter" returns="mixed" signature="preg_filter(mixed regex, mixed replace, mixed subject [, int limit [, int &amp;amp;count]])" src="php_pcre.c" /&gt;
      &lt;scope doc="Split string into an array using a perl-style regular&amp;#xA;expression as a delimiter" ilk="function" name="preg_split" returns="array" signature="preg_split(string pattern, string subject [, int limit [, int flags]])" src="php_pcre.c" /&gt;
      &lt;scope doc="Quote regular expression characters plus an optional&amp;#xA;character" ilk="function" name="preg_quote" returns="string" signature="preg_quote(string str [, string delim_char])" src="php_pcre.c" /&gt;
      &lt;scope doc="Searches array and returns entries which match regex" ilk="function" name="preg_grep" returns="array" signature="preg_grep(string regex, array input [, int flags])" src="php_pcre.c" /&gt;
      &lt;scope doc="Returns the error code of the last regexp execution" ilk="function" name="preg_last_error" returns="int" signature="preg_last_error()" src="php_pcre.c" /&gt;
      &lt;scope doc="Fetch a SNMP object" ilk="function" name="snmpget" returns="mixed" signature="snmpget(string host, string community, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Fetch a SNMP object" ilk="function" name="snmpgetnext" returns="mixed" signature="snmpgetnext(string host, string community, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Return all objects under the specified object id" ilk="function" name="snmpwalk" returns="mixed" signature="snmpwalk(string host, string community, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Return all objects including their respective object id&amp;#xA;withing the specified one" ilk="function" name="snmprealwalk" returns="mixed" signature="snmprealwalk(string host, string community, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Set the value of a SNMP object" ilk="function" name="snmpset" returns="bool" signature="snmpset(string host, string community, mixed object_id, mixed type, mixed value [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Return the current status of quick print" ilk="function" name="snmp_get_quick_print" returns="bool" signature="snmp_get_quick_print(void)" src="snmp.c" /&gt;
      &lt;scope doc="Return all objects including their respective object id&amp;#xA;withing the specified one" ilk="function" name="snmp_set_quick_print" returns="bool" signature="snmp_set_quick_print(int quick_print)" src="snmp.c" /&gt;
      &lt;scope doc="Return all values that are enums with their enum value&amp;#xA;instead of the raw integer" ilk="function" name="snmp_set_enum_print" returns="bool" signature="snmp_set_enum_print(int enum_print)" src="snmp.c" /&gt;
      &lt;scope doc="Set the OID output format" ilk="function" name="snmp_set_oid_output_format" returns="bool" signature="snmp_set_oid_output_format(int oid_format)" src="snmp.c" /&gt;
      &lt;scope doc="Fetch a SNMP object" ilk="function" name="snmp2_get" returns="mixed" signature="snmp2_get(string host, string community, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Fetch a SNMP object" ilk="function" name="snmp2_getnext" returns="mixed" signature="snmp2_getnext(string host, string community, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Return all objects under the specified object id" ilk="function" name="snmp2_walk" returns="mixed" signature="snmp2_walk(string host, string community, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Return all objects including their respective object id&amp;#xA;withing the specified one" ilk="function" name="snmp2_real_walk" returns="mixed" signature="snmp2_real_walk(string host, string community, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Set the value of a SNMP object" ilk="function" name="snmp2_set" returns="bool" signature="snmp2_set(string host, string community, mixed object_id, mixed type, mixed value [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_get" returns="mixed" signature="snmp3_get(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_getnext" returns="mixed" signature="snmp3_getnext(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_walk" returns="mixed" signature="snmp3_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_real_walk" returns="mixed" signature="snmp3_real_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, mixed object_id [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_set" returns="bool" signature="snmp3_set(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, mixed object_id, mixed type, mixed value [, int timeout [, int retries]])" src="snmp.c" /&gt;
      &lt;scope doc="Specify the method how the SNMP values will be returned" ilk="function" name="snmp_set_valueretrieval" returns="bool" signature="snmp_set_valueretrieval(int method)" src="snmp.c" /&gt;
      &lt;scope doc="Return the method how the SNMP values will be returned" ilk="function" name="snmp_get_valueretrieval" returns="int" signature="snmp_get_valueretrieval()" src="snmp.c" /&gt;
      &lt;scope doc="Reads and parses a MIB file into the active MIB tree" ilk="function" name="snmp_read_mib" returns="bool" signature="snmp_read_mib(string filename)" src="snmp.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Since" ilk="function" name="xsl_xsltprocessor_import_stylesheet" returns="void" signature="xsl_xsltprocessor_import_stylesheet(domdocument doc)" src="xsltprocessor.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Since" ilk="function" name="xsl_xsltprocessor_transform_to_doc" returns="domdocument" signature="xsl_xsltprocessor_transform_to_doc(domnode doc)" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_transform_to_uri" returns="int" signature="xsl_xsltprocessor_transform_to_uri(domdocument doc, string uri)" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_transform_to_xml" returns="string" signature="xsl_xsltprocessor_transform_to_xml(domdocument doc)" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_set_parameter" returns="bool" signature="xsl_xsltprocessor_set_parameter(string namespace, mixed name [, string value])" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_get_parameter" returns="string" signature="xsl_xsltprocessor_get_parameter(string namespace, string name)" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_remove_parameter" returns="bool" signature="xsl_xsltprocessor_remove_parameter(string namespace, string name)" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_register_php_functions" returns="void" signature="xsl_xsltprocessor_register_php_functions([mixed $restrict])" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_set_profiling" returns="bool" signature="xsl_xsltprocessor_set_profiling(string filename)" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_set_security_prefs" returns="long" signature="xsl_xsltprocessor_set_security_prefs(long securityPrefs)" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_get_security_prefs" returns="long" signature="xsl_xsltprocessor_get_security_prefs()" src="xsltprocessor.c" /&gt;
      &lt;scope doc="" ilk="function" name="xsl_xsltprocessor_has_exslt_support" returns="bool" signature="xsl_xsltprocessor_has_exslt_support()" src="xsltprocessor.c" /&gt;
      &lt;scope doc="Establishes a connection to a MS-SQL server" ilk="function" name="mssql_connect" returns="int" signature="mssql_connect([string servername [, string username [, string password [, bool new_link]]]])" src="php_mssql.c" /&gt;
      &lt;scope doc="Establishes a persistent connection to a MS-SQL server" ilk="function" name="mssql_pconnect" returns="int" signature="mssql_pconnect([string servername [, string username [, string password [, bool new_link]]]])" src="php_mssql.c" /&gt;
      &lt;scope doc="Closes a connection to a MS-SQL server" ilk="function" name="mssql_close" returns="bool" signature="mssql_close([resource conn_id])" src="php_mssql.c" /&gt;
      &lt;scope doc="Select a MS-SQL database" ilk="function" name="mssql_select_db" returns="bool" signature="mssql_select_db(string database_name [, resource conn_id])" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns the next batch of records" ilk="function" name="mssql_fetch_batch" returns="int" signature="mssql_fetch_batch(resource result_index)" src="php_mssql.c" /&gt;
      &lt;scope doc="Perform an SQL query on a MS-SQL server database" ilk="function" name="mssql_query" returns="resource" signature="mssql_query(string query [, resource conn_id [, int batch_size]])" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns the number of records affected by the query" ilk="function" name="mssql_rows_affected" returns="int" signature="mssql_rows_affected(resource conn_id)" src="php_mssql.c" /&gt;
      &lt;scope doc="Free a MS-SQL result index" ilk="function" name="mssql_free_result" returns="bool" signature="mssql_free_result(resource result_index)" src="php_mssql.c" /&gt;
      &lt;scope doc="Gets the last message from the MS-SQL server" ilk="function" name="mssql_get_last_message" returns="string" signature="mssql_get_last_message(void)" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns the number of rows fetched in from the result&amp;#xA;id specified" ilk="function" name="mssql_num_rows" returns="int" signature="mssql_num_rows(resource mssql_result_index)" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns the number of fields fetched in from the result&amp;#xA;id specified" ilk="function" name="mssql_num_fields" returns="int" signature="mssql_num_fields(resource mssql_result_index)" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns an array of the current row in the result set&amp;#xA;specified by result id" ilk="function" name="mssql_fetch_row" returns="array" signature="mssql_fetch_row(resource result_id)" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns a pseudo-object of the current row in the&amp;#xA;result set specified by result id" ilk="function" name="mssql_fetch_object" returns="object" signature="mssql_fetch_object(resource result_id)" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns an associative array of the current row in the&amp;#xA;result set specified by result id" ilk="function" name="mssql_fetch_array" returns="array" signature="mssql_fetch_array(resource result_id [, int result_type])" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns an associative array of the current row in the&amp;#xA;result set specified by result id" ilk="function" name="mssql_fetch_assoc" returns="array" signature="mssql_fetch_assoc(resource result_id)" src="php_mssql.c" /&gt;
      &lt;scope doc="Moves the internal row pointer of the MS-SQL result&amp;#xA;associated with the specified result identifier to&amp;#xA;pointer to the specified" ilk="function" name="mssql_data_seek" returns="bool" signature="mssql_data_seek(resource result_id, int offset)" src="php_mssql.c" /&gt;
      &lt;scope doc="Gets information about certain fields in a query result" ilk="function" name="mssql_fetch_field" returns="object" signature="mssql_fetch_field(resource result_id [, int offset])" src="php_mssql.c" /&gt;
      &lt;scope doc="Get the length of a MS-SQL field" ilk="function" name="mssql_field_length" returns="int" signature="mssql_field_length(resource result_id [, int offset])" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns the name of the field given by offset in the&amp;#xA;result set given by result id" ilk="function" name="mssql_field_name" returns="string" signature="mssql_field_name(resource result_id [, int offset])" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns the type of a field" ilk="function" name="mssql_field_type" returns="string" signature="mssql_field_type(resource result_id [, int offset])" src="php_mssql.c" /&gt;
      &lt;scope doc="Seeks to the specified field offset" ilk="function" name="mssql_field_seek" returns="bool" signature="mssql_field_seek(resource result_id, int offset)" src="php_mssql.c" /&gt;
      &lt;scope doc="Returns the contents of one cell from a MS-SQL result&amp;#xA;set" ilk="function" name="mssql_result" returns="string" signature="mssql_result(resource result_id, int row, mixed field)" src="php_mssql.c" /&gt;
      &lt;scope doc="Move the internal result pointer to the next result" ilk="function" name="mssql_next_result" returns="bool" signature="mssql_next_result(resource result_id)" src="php_mssql.c" /&gt;
      &lt;scope doc="Sets the lower error severity" ilk="function" name="mssql_min_error_severity" returns="void" signature="mssql_min_error_severity(int severity)" src="php_mssql.c" /&gt;
      &lt;scope doc="Sets the lower message severity" ilk="function" name="mssql_min_message_severity" returns="void" signature="mssql_min_message_severity(int severity)" src="php_mssql.c" /&gt;
      &lt;scope doc="Initializes a stored procedure or a remote stored&amp;#xA;procedure" ilk="function" name="mssql_init" returns="int" signature="mssql_init(string sp_name [, resource conn_id])" src="php_mssql.c" /&gt;
      &lt;scope doc="Adds a parameter to a stored procedure or a remote&amp;#xA;stored procedure" ilk="function" name="mssql_bind" returns="bool" signature="mssql_bind(resource stmt, string param_name, mixed var, int type [, bool is_output [, bool is_null [, int maxlen]]])" src="php_mssql.c" /&gt;
      &lt;scope doc="Executes a stored procedure on a MS-SQL server database" ilk="function" name="mssql_execute" returns="mixed" signature="mssql_execute(resource stmt [, bool skip_results = false])" src="php_mssql.c" /&gt;
      &lt;scope doc="Free a MS-SQL statement index" ilk="function" name="mssql_free_statement" returns="bool" signature="mssql_free_statement(resource result_index)" src="php_mssql.c" /&gt;
      &lt;scope doc="Converts a byte binary GUID to a string" ilk="function" name="mssql_guid_string" returns="string" signature="mssql_guid_string(string binary [,bool short_format])" src="php_mssql.c" /&gt;
      &lt;scope doc="Forks the currently running process following the same&amp;#xA;behavior as the UNIX fork system call" ilk="function" name="pcntl_fork" returns="int" signature="pcntl_fork(void)" src="pcntl.c" /&gt;
      &lt;scope doc="Set an alarm clock for delivery of a signal" ilk="function" name="pcntl_alarm" returns="int" signature="pcntl_alarm(int seconds)" src="pcntl.c" /&gt;
      &lt;scope doc="Waits on or returns the status of a forked child as&amp;#xA;defined by the waitpid system call" ilk="function" name="pcntl_waitpid" returns="int" signature="pcntl_waitpid(int pid, int &amp;amp;status, int options)" src="pcntl.c" /&gt;
      &lt;scope doc="Waits on or returns the status of a forked child as&amp;#xA;defined by the waitpid system call" ilk="function" name="pcntl_wait" returns="int" signature="pcntl_wait(int &amp;amp;status)" src="pcntl.c" /&gt;
      &lt;scope doc="Returns true if the child status code represents a&amp;#xA;successful exit" ilk="function" name="pcntl_wifexited" returns="bool" signature="pcntl_wifexited(int status)" src="pcntl.c" /&gt;
      &lt;scope doc="Returns true if the child status code represents a&amp;#xA;stopped process WUNTRACED must have been used with&amp;#xA;waitpid" ilk="function" name="pcntl_wifstopped" returns="bool" signature="pcntl_wifstopped(int status)" src="pcntl.c" /&gt;
      &lt;scope doc="Returns true if the child status code represents a&amp;#xA;process that was terminated due to a signal" ilk="function" name="pcntl_wifsignaled" returns="bool" signature="pcntl_wifsignaled(int status)" src="pcntl.c" /&gt;
      &lt;scope doc="Returns the status code of a child&amp;apos;s exit" ilk="function" name="pcntl_wexitstatus" returns="int" signature="pcntl_wexitstatus(int status)" src="pcntl.c" /&gt;
      &lt;scope doc="Returns the number of the signal that terminated the&amp;#xA;process who&amp;apos;s status code is passed" ilk="function" name="pcntl_wtermsig" returns="int" signature="pcntl_wtermsig(int status)" src="pcntl.c" /&gt;
      &lt;scope doc="Returns the number of the signal that caused the&amp;#xA;process to stop who&amp;apos;s status code is passed" ilk="function" name="pcntl_wstopsig" returns="int" signature="pcntl_wstopsig(int status)" src="pcntl.c" /&gt;
      &lt;scope doc="Executes specified program in current process space as&amp;#xA;defined by exec" ilk="function" name="pcntl_exec" returns="bool" signature="pcntl_exec(string path [, array args [, array envs]])" src="pcntl.c" /&gt;
      &lt;scope doc="Assigns a system signal handler to a PHP function" ilk="function" name="pcntl_signal" returns="bool" signature="pcntl_signal(int signo, callback handle [, bool restart_syscalls])" src="pcntl.c" /&gt;
      &lt;scope doc="Dispatch signals to signal handlers" ilk="function" name="pcntl_signal_dispatch" returns="bool" signature="pcntl_signal_dispatch()" src="pcntl.c" /&gt;
      &lt;scope doc="Examine and change blocked signals" ilk="function" name="pcntl_sigprocmask" returns="bool" signature="pcntl_sigprocmask(int how, array set[, array &amp;amp;oldset])" src="pcntl.c" /&gt;
      &lt;scope doc="Synchronously wait for queued signals" ilk="function" name="pcnlt_sigwaitinfo" returns="int" signature="pcnlt_sigwaitinfo(array set[, array &amp;amp;siginfo])" src="pcntl.c" /&gt;
      &lt;scope doc="Wait for queued signals" ilk="function" name="pcntl_sigtimedwait" returns="int" signature="pcntl_sigtimedwait(array set[, array &amp;amp;siginfo[, int seconds[, int nanoseconds]]])" src="pcntl.c" /&gt;
      &lt;scope doc="Get the priority of any process" ilk="function" name="pcntl_getpriority" returns="int" signature="pcntl_getpriority([int pid [, int process_identifier]])" src="pcntl.c" /&gt;
      &lt;scope doc="Change the priority of any process" ilk="function" name="pcntl_setpriority" returns="bool" signature="pcntl_setpriority(int priority [, int pid [, int process_identifier]])" src="pcntl.c" /&gt;
      &lt;scope doc="Retrieve the error number set by the last pcntl&amp;#xA;function which failed" ilk="function" name="pcntl_get_last_error" returns="int" signature="pcntl_get_last_error(void)" src="pcntl.c" /&gt;
      &lt;scope doc="Retrieve the system error message associated with the&amp;#xA;given errno" ilk="function" name="pcntl_strerror" returns="string" signature="pcntl_strerror(int errno)" src="pcntl.c" /&gt;
      &lt;scope doc="U Runs the select system call on the sets mentioned&amp;#xA;with a timeout specified by tv sec and tv usec" ilk="function" name="socket_select" returns="int" signature="socket_select(array &amp;amp;read_fds, array &amp;amp;write_fds, array &amp;amp;except_fds, int tv_sec[, int tv_usec])" src="sockets.c" /&gt;
      &lt;scope doc="U Opens a socket on port to accept connections" ilk="function" name="socket_create_listen" returns="resource" signature="socket_create_listen(int port[, int backlog])" src="sockets.c" /&gt;
      &lt;scope doc="U Accepts a connection on the listening socket fd" ilk="function" name="socket_accept" returns="resource" signature="socket_accept(resource socket)" src="sockets.c" /&gt;
      &lt;scope doc="U Sets nonblocking mode on a socket resource" ilk="function" name="socket_set_nonblock" returns="bool" signature="socket_set_nonblock(resource socket)" src="sockets.c" /&gt;
      &lt;scope doc="U Sets blocking mode on a socket resource" ilk="function" name="socket_set_block" returns="bool" signature="socket_set_block(resource socket)" src="sockets.c" /&gt;
      &lt;scope doc="U Sets the maximum number of connections allowed to be&amp;#xA;waited for on the socket specified by fd" ilk="function" name="socket_listen" returns="bool" signature="socket_listen(resource socket[, int backlog])" src="sockets.c" /&gt;
      &lt;scope doc="U Closes a file descriptor" ilk="function" name="socket_close" returns="void" signature="socket_close(resource socket)" src="sockets.c" /&gt;
      &lt;scope doc="Writes the buffer to the socket resource length is&amp;#xA;optional" ilk="function" name="socket_write" returns="int" signature="socket_write(resource socket, string buf[, int length])" src="sockets.c" /&gt;
      &lt;scope doc="U Reads a maximum of length bytes from socket" ilk="function" name="socket_read" returns="string" signature="socket_read(resource socket, int length [, int type])" src="sockets.c" /&gt;
      &lt;scope doc="Queries the remote side of the given socket which may&amp;#xA;either result in host port or in a UNIX filesystem" ilk="function" name="socket_getsockname" returns="bool" signature="socket_getsockname(resource socket, string &amp;amp;addr[, int &amp;amp;port])" src="sockets.c" /&gt;
      &lt;scope doc="Queries the remote side of the given socket which may&amp;#xA;either result in host port or in a UNIX filesystem" ilk="function" name="socket_getpeername" returns="bool" signature="socket_getpeername(resource socket, string &amp;amp;addr[, int &amp;amp;port])" src="sockets.c" /&gt;
      &lt;scope doc="U Creates an endpoint for communication in the domain&amp;#xA;specified by domain of type specified by type" ilk="function" name="socket_create" returns="resource" signature="socket_create(int domain, int type, int protocol)" src="sockets.c" /&gt;
      &lt;scope doc="Opens a connection to addr port on the socket specified&amp;#xA;by socket" ilk="function" name="socket_connect" returns="bool" signature="socket_connect(resource socket, string addr [, int port])" src="sockets.c" /&gt;
      &lt;scope doc="Returns a string describing an error" ilk="function" name="socket_strerror" returns="string" signature="socket_strerror(int errno)" src="sockets.c" /&gt;
      &lt;scope doc="Binds an open socket to a listening port port is only&amp;#xA;specified in AF INET family" ilk="function" name="socket_bind" returns="bool" signature="socket_bind(resource socket, string addr [, int port])" src="sockets.c" /&gt;
      &lt;scope doc="Receives data from a connected socket" ilk="function" name="socket_recv" returns="int" signature="socket_recv(resource socket, string &amp;amp;buf, int len, int flags)" src="sockets.c" /&gt;
      &lt;scope doc="Sends data to a connected socket" ilk="function" name="socket_send" returns="int" signature="socket_send(resource socket, string buf, int len, int flags)" src="sockets.c" /&gt;
      &lt;scope doc="Receives data from a socket connected or not" ilk="function" name="socket_recvfrom" returns="int" signature="socket_recvfrom(resource socket, string &amp;amp;buf, int len, int flags, string &amp;amp;name [, int &amp;amp;port])" src="sockets.c" /&gt;
      &lt;scope doc="Sends a message to a socket whether it is connected or&amp;#xA;not" ilk="function" name="socket_sendto" returns="int" signature="socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])" src="sockets.c" /&gt;
      &lt;scope doc="U Gets socket options for the socket" ilk="function" name="socket_get_option" returns="mixed" signature="socket_get_option(resource socket, int level, int optname)" src="sockets.c" /&gt;
      &lt;scope doc="Sets socket options for the socket" ilk="function" name="socket_set_option" returns="bool" signature="socket_set_option(resource socket, int level, int optname, int" src="sockets.c" /&gt;
      &lt;scope doc="U Creates a pair of indistinguishable sockets and&amp;#xA;stores them in fds" ilk="function" name="socket_create_pair" returns="bool" signature="socket_create_pair(int domain, int type, int protocol, array &amp;amp;fd)" src="sockets.c" /&gt;
      &lt;scope doc="U Shuts down a socket for receiving sending or both" ilk="function" name="socket_shutdown" returns="bool" signature="socket_shutdown(resource socket[, int how])" src="sockets.c" /&gt;
      &lt;scope doc="U Returns the last socket error either the last used or&amp;#xA;the provided socket resource" ilk="function" name="socket_last_error" returns="int" signature="socket_last_error([resource socket])" src="sockets.c" /&gt;
      &lt;scope doc="U Clears the error on the socket or the last error code" ilk="function" name="socket_clear_error" returns="void" signature="socket_clear_error([resource socket])" src="sockets.c" /&gt;
      &lt;scope doc="Imports a stream that encapsulates a socket into a&amp;#xA;socket extension resource" ilk="function" name="socket_import_stream" returns="void" signature="socket_import_stream(resource stream)" src="sockets.c" /&gt;
      &lt;scope doc="" ilk="function" name="token_get_all" returns="array" signature="token_get_all(string source)" src="tokenizer.c" /&gt;
      &lt;scope doc="" ilk="function" name="token_name" returns="string" signature="token_name(int type)" src="tokenizer.c" /&gt;
      &lt;scope doc="Generates XML for a method request" ilk="function" name="xmlrpc_encode_request" returns="string" signature="xmlrpc_encode_request(string method, mixed params [, array output_options])" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Generates XML for a PHP value" ilk="function" name="xmlrpc_encode" returns="string" signature="xmlrpc_encode(mixed value)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Decodes XML into native PHP types" ilk="function" name="xmlrpc_decode_request" returns="array" signature="xmlrpc_decode_request(string xml, string&amp;amp; method [, string encoding])" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Decodes XML into native PHP types" ilk="function" name="xmlrpc_decode" returns="array" signature="xmlrpc_decode(string xml [, string encoding])" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Creates an xmlrpc server" ilk="function" name="xmlrpc_server_create" returns="resource" signature="xmlrpc_server_create(void)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Destroys server resources" ilk="function" name="xmlrpc_server_destroy" returns="int" signature="xmlrpc_server_destroy(resource server)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Register a PHP function to handle method matching&amp;#xA;method name" ilk="function" name="xmlrpc_server_register_method" returns="bool" signature="xmlrpc_server_register_method(resource server, string method_name, string function)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Register a PHP function to generate documentation" ilk="function" name="xmlrpc_server_register_introspection_callback" returns="bool" signature="xmlrpc_server_register_introspection_callback(resource server, string function)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Parses XML requests and call methods" ilk="function" name="xmlrpc_server_call_method" returns="mixed" signature="xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options])" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Adds introspection documentation" ilk="function" name="xmlrpc_server_add_introspection_data" returns="int" signature="xmlrpc_server_add_introspection_data(resource server, array desc)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Decodes XML into a list of method descriptions" ilk="function" name="xmlrpc_parse_method_descriptions" returns="array" signature="xmlrpc_parse_method_descriptions(string xml)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Sets xmlrpc type base or datetime for a PHP string&amp;#xA;value" ilk="function" name="xmlrpc_set_type" returns="bool" signature="xmlrpc_set_type(string value, string type)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Gets xmlrpc type for a PHP value Especially useful for&amp;#xA;base and datetime strings" ilk="function" name="xmlrpc_get_type" returns="string" signature="xmlrpc_get_type(mixed value)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Determines if an array value represents an XMLRPC fault" ilk="function" name="xmlrpc_is_fault" returns="bool" signature="xmlrpc_is_fault(array)" src="xmlrpc-epi-php.c" /&gt;
      &lt;scope doc="Opens a FTP stream" ilk="function" name="ftp_connect" returns="resource" signature="ftp_connect(string host [, int port [, int timeout]])" src="php_ftp.c" /&gt;
      &lt;scope doc="Opens a FTP-SSL stream" ilk="function" name="ftp_ssl_connect" returns="resource" signature="ftp_ssl_connect(string host [, int port [, int timeout]])" src="php_ftp.c" /&gt;
      &lt;scope doc="Logs into the FTP server" ilk="function" name="ftp_login" returns="bool" signature="ftp_login(resource stream, string username, string password)" src="php_ftp.c" /&gt;
      &lt;scope doc="Returns the present working directory" ilk="function" name="ftp_pwd" returns="string" signature="ftp_pwd(resource stream)" src="php_ftp.c" /&gt;
      &lt;scope doc="Changes to the parent directory" ilk="function" name="ftp_cdup" returns="bool" signature="ftp_cdup(resource stream)" src="php_ftp.c" /&gt;
      &lt;scope doc="Changes directories" ilk="function" name="ftp_chdir" returns="bool" signature="ftp_chdir(resource stream, string directory)" src="php_ftp.c" /&gt;
      &lt;scope doc="Requests execution of a program on the FTP server" ilk="function" name="ftp_exec" returns="bool" signature="ftp_exec(resource stream, string command)" src="php_ftp.c" /&gt;
      &lt;scope doc="Sends a literal command to the FTP server" ilk="function" name="ftp_raw" returns="array" signature="ftp_raw(resource stream, string command)" src="php_ftp.c" /&gt;
      &lt;scope doc="Creates a directory and returns the absolute path for&amp;#xA;the new directory or false on error" ilk="function" name="ftp_mkdir" returns="string" signature="ftp_mkdir(resource stream, string directory)" src="php_ftp.c" /&gt;
      &lt;scope doc="Removes a directory" ilk="function" name="ftp_rmdir" returns="bool" signature="ftp_rmdir(resource stream, string directory)" src="php_ftp.c" /&gt;
      &lt;scope doc="Sets permissions on a file" ilk="function" name="ftp_chmod" returns="int" signature="ftp_chmod(resource stream, int mode, string filename)" src="php_ftp.c" /&gt;
      &lt;scope doc="Attempt to allocate space on the remote FTP server" ilk="function" name="ftp_alloc" returns="bool" signature="ftp_alloc(resource stream, int size[, &amp;amp;response])" src="php_ftp.c" /&gt;
      &lt;scope doc="Returns an array of filenames in the given directory" ilk="function" name="ftp_nlist" returns="array" signature="ftp_nlist(resource stream, string directory)" src="php_ftp.c" /&gt;
      &lt;scope doc="Returns a detailed listing of a directory as an array&amp;#xA;of output lines" ilk="function" name="ftp_rawlist" returns="array" signature="ftp_rawlist(resource stream, string directory [, bool recursive])" src="php_ftp.c" /&gt;
      &lt;scope doc="Returns the system type identifier" ilk="function" name="ftp_systype" returns="string" signature="ftp_systype(resource stream)" src="php_ftp.c" /&gt;
      &lt;scope doc="Retrieves a file from the FTP server and writes it to&amp;#xA;an open file" ilk="function" name="ftp_fget" returns="bool" signature="ftp_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])" src="php_ftp.c" /&gt;
      &lt;scope doc="Retrieves a file from the FTP server asynchronly and&amp;#xA;writes it to an open file" ilk="function" name="ftp_nb_fget" returns="int" signature="ftp_nb_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])" src="php_ftp.c" /&gt;
      &lt;scope doc="Turns passive mode on or off" ilk="function" name="ftp_pasv" returns="bool" signature="ftp_pasv(resource stream, bool pasv)" src="php_ftp.c" /&gt;
      &lt;scope doc="Retrieves a file from the FTP server and writes it to a&amp;#xA;local file" ilk="function" name="ftp_get" returns="bool" signature="ftp_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])" src="php_ftp.c" /&gt;
      &lt;scope doc="Retrieves a file from the FTP server nbhronly and&amp;#xA;writes it to a local file" ilk="function" name="ftp_nb_get" returns="int" signature="ftp_nb_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])" src="php_ftp.c" /&gt;
      &lt;scope doc="Continues retrieving sending a file nbronously" ilk="function" name="ftp_nb_continue" returns="int" signature="ftp_nb_continue(resource stream)" src="php_ftp.c" /&gt;
      &lt;scope doc="Stores a file from an open file to the FTP server" ilk="function" name="ftp_fput" returns="bool" signature="ftp_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])" src="php_ftp.c" /&gt;
      &lt;scope doc="Stores a file from an open file to the FTP server&amp;#xA;nbronly" ilk="function" name="ftp_nb_fput" returns="int" signature="ftp_nb_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])" src="php_ftp.c" /&gt;
      &lt;scope doc="Stores a file on the FTP server" ilk="function" name="ftp_put" returns="bool" signature="ftp_put(resource stream, string remote_file, string local_file, int mode[, int startpos])" src="php_ftp.c" /&gt;
      &lt;scope doc="Stores a file on the FTP server" ilk="function" name="ftp_nb_put" returns="int" signature="ftp_nb_put(resource stream, string remote_file, string local_file, int mode[, int startpos])" src="php_ftp.c" /&gt;
      &lt;scope doc="Returns the size of the file or - on error" ilk="function" name="ftp_size" returns="int" signature="ftp_size(resource stream, string filename)" src="php_ftp.c" /&gt;
      &lt;scope doc="Returns the last modification time of the file or - on&amp;#xA;error" ilk="function" name="ftp_mdtm" returns="int" signature="ftp_mdtm(resource stream, string filename)" src="php_ftp.c" /&gt;
      &lt;scope doc="Renames the given file to a new path" ilk="function" name="ftp_rename" returns="bool" signature="ftp_rename(resource stream, string src, string dest)" src="php_ftp.c" /&gt;
      &lt;scope doc="Deletes a file" ilk="function" name="ftp_delete" returns="bool" signature="ftp_delete(resource stream, string file)" src="php_ftp.c" /&gt;
      &lt;scope doc="Sends a SITE command to the server" ilk="function" name="ftp_site" returns="bool" signature="ftp_site(resource stream, string cmd)" src="php_ftp.c" /&gt;
      &lt;scope doc="Closes the FTP stream" ilk="function" name="ftp_close" returns="bool" signature="ftp_close(resource stream)" src="php_ftp.c" /&gt;
      &lt;scope doc="Sets an FTP option" ilk="function" name="ftp_set_option" returns="bool" signature="ftp_set_option(resource stream, int option, mixed value)" src="php_ftp.c" /&gt;
      &lt;scope doc="Gets an FTP option" ilk="function" name="ftp_get_option" returns="mixed" signature="ftp_get_option(resource stream, int option)" src="php_ftp.c" /&gt;
      &lt;scope doc="Regular expression match" ilk="function" name="ereg" returns="int" signature="ereg(string pattern, string string [, array registers])" src="ereg.c" /&gt;
      &lt;scope doc="Case-insensitive regular expression match" ilk="function" name="eregi" returns="int" signature="eregi(string pattern, string string [, array registers])" src="ereg.c" /&gt;
      &lt;scope doc="Replace regular expression" ilk="function" name="ereg_replace" returns="string" signature="ereg_replace(string pattern, string replacement, string string)" src="ereg.c" /&gt;
      &lt;scope doc="Case insensitive replace regular expression" ilk="function" name="eregi_replace" returns="string" signature="eregi_replace(string pattern, string replacement, string string)" src="ereg.c" /&gt;
      &lt;scope doc="Split string into array by regular expression" ilk="function" name="split" returns="array" signature="split(string pattern, string string [, int limit])" src="ereg.c" /&gt;
      &lt;scope doc="Split string into array by regular expression&amp;#xA;case-insensitive" ilk="function" name="spliti" returns="array" signature="spliti(string pattern, string string [, int limit])" src="ereg.c" /&gt;
      &lt;scope doc="Make regular expression for case insensitive match" ilk="function" name="sql_regcase" returns="string" signature="sql_regcase(string string)" src="ereg.c" /&gt;
      &lt;scope doc="Connect to an LDAP server" ilk="function" name="ldap_connect" returns="resource" signature="ldap_connect([string host [, int port [, string wallet [, string wallet_passwd [, int authmode]]]]])" src="ldap.c" /&gt;
      &lt;scope doc="Bind to LDAP directory" ilk="function" name="ldap_bind" returns="bool" signature="ldap_bind(resource link [, string dn [, string password]])" src="ldap.c" /&gt;
      &lt;scope doc="Bind to LDAP directory using SASL" ilk="function" name="ldap_sasl_bind" returns="bool" signature="ldap_sasl_bind(resource link [, string binddn [, string password [, string sasl_mech [, string sasl_realm [, string sasl_authc_id [, string sasl_authz_id [, string props]]]]]]])" src="ldap.c" /&gt;
      &lt;scope doc="Unbind from LDAP directory" ilk="function" name="ldap_unbind" returns="bool" signature="ldap_unbind(resource link)" src="ldap.c" /&gt;
      &lt;scope doc="Read an entry" ilk="function" name="ldap_read" returns="resource" signature="ldap_read(resource" src="ldap.c" /&gt;
      &lt;scope doc="Single-level search" ilk="function" name="ldap_list" returns="resource" signature="ldap_list(resource" src="ldap.c" /&gt;
      &lt;scope doc="Search LDAP tree under base dn" ilk="function" name="ldap_search" returns="resource" signature="ldap_search(resource" src="ldap.c" /&gt;
      &lt;scope doc="Free result memory" ilk="function" name="ldap_free_result" returns="bool" signature="ldap_free_result(resource result)" src="ldap.c" /&gt;
      &lt;scope doc="Count the number of entries in a search result" ilk="function" name="ldap_count_entries" returns="int" signature="ldap_count_entries(resource link, resource result)" src="ldap.c" /&gt;
      &lt;scope doc="Return first result id" ilk="function" name="ldap_first_entry" returns="resource" signature="ldap_first_entry(resource link, resource result)" src="ldap.c" /&gt;
      &lt;scope doc="Get next result entry" ilk="function" name="ldap_next_entry" returns="resource" signature="ldap_next_entry(resource link, resource result_entry)" src="ldap.c" /&gt;
      &lt;scope doc="Get all result entries" ilk="function" name="ldap_get_entries" returns="array" signature="ldap_get_entries(resource link, resource result)" src="ldap.c" /&gt;
      &lt;scope doc="Return first attribute" ilk="function" name="ldap_first_attribute" returns="string" signature="ldap_first_attribute(resource link, resource result_entry)" src="ldap.c" /&gt;
      &lt;scope doc="Get the next attribute in result" ilk="function" name="ldap_next_attribute" returns="string" signature="ldap_next_attribute(resource link, resource result_entry)" src="ldap.c" /&gt;
      &lt;scope doc="Get attributes from a search result entry" ilk="function" name="ldap_get_attributes" returns="array" signature="ldap_get_attributes(resource link, resource result_entry)" src="ldap.c" /&gt;
      &lt;scope doc="Get all values with lengths from a result entry" ilk="function" name="ldap_get_values_len" returns="array" signature="ldap_get_values_len(resource link, resource result_entry, string attribute)" src="ldap.c" /&gt;
      &lt;scope doc="Get the DN of a result entry" ilk="function" name="ldap_get_dn" returns="string" signature="ldap_get_dn(resource link, resource result_entry)" src="ldap.c" /&gt;
      &lt;scope doc="Splits DN into its component parts" ilk="function" name="ldap_explode_dn" returns="array" signature="ldap_explode_dn(string dn, int with_attrib)" src="ldap.c" /&gt;
      &lt;scope doc="Convert DN to User Friendly Naming format" ilk="function" name="ldap_dn2ufn" returns="string" signature="ldap_dn2ufn(string dn)" src="ldap.c" /&gt;
      &lt;scope doc="Add entries to LDAP directory" ilk="function" name="ldap_add" returns="bool" signature="ldap_add(resource link, string dn, array entry)" src="ldap.c" /&gt;
      &lt;scope doc="Replace attribute values with new ones" ilk="function" name="ldap_mod_replace" returns="bool" signature="ldap_mod_replace(resource link, string dn, array entry)" src="ldap.c" /&gt;
      &lt;scope doc="Add attribute values to current" ilk="function" name="ldap_mod_add" returns="bool" signature="ldap_mod_add(resource link, string dn, array entry)" src="ldap.c" /&gt;
      &lt;scope doc="Delete attribute values" ilk="function" name="ldap_mod_del" returns="bool" signature="ldap_mod_del(resource link, string dn, array entry)" src="ldap.c" /&gt;
      &lt;scope doc="Delete an entry from a directory" ilk="function" name="ldap_delete" returns="bool" signature="ldap_delete(resource link, string dn)" src="ldap.c" /&gt;
      &lt;scope doc="Get the current ldap error number" ilk="function" name="ldap_errno" returns="int" signature="ldap_errno(resource link)" src="ldap.c" /&gt;
      &lt;scope doc="Convert error number to error string" ilk="function" name="ldap_err2str" returns="string" signature="ldap_err2str(int errno)" src="ldap.c" /&gt;
      &lt;scope doc="Get the current ldap error string" ilk="function" name="ldap_error" returns="string" signature="ldap_error(resource link)" src="ldap.c" /&gt;
      &lt;scope doc="Determine if an entry has a specific value for one of&amp;#xA;its attributes" ilk="function" name="ldap_compare" returns="bool" signature="ldap_compare(resource link, string dn, string attr, string value)" src="ldap.c" /&gt;
      &lt;scope doc="Sort LDAP result entries" ilk="function" name="ldap_sort" returns="bool" signature="ldap_sort(resource link, resource result, string sortfilter)" src="ldap.c" /&gt;
      &lt;scope doc="Get the current value of various session-wide&amp;#xA;parameters" ilk="function" name="ldap_get_option" returns="bool" signature="ldap_get_option(resource link, int option, mixed retval)" src="ldap.c" /&gt;
      &lt;scope doc="Set the value of various session-wide parameters" ilk="function" name="ldap_set_option" returns="bool" signature="ldap_set_option(resource link, int option, mixed newval)" src="ldap.c" /&gt;
      &lt;scope doc="Extract information from result" ilk="function" name="ldap_parse_result" returns="bool" signature="ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)" src="ldap.c" /&gt;
      &lt;scope doc="Return first reference" ilk="function" name="ldap_first_reference" returns="resource" signature="ldap_first_reference(resource link, resource result)" src="ldap.c" /&gt;
      &lt;scope doc="Get next reference" ilk="function" name="ldap_next_reference" returns="resource" signature="ldap_next_reference(resource link, resource reference_entry)" src="ldap.c" /&gt;
      &lt;scope doc="Extract information from reference entry" ilk="function" name="ldap_parse_reference" returns="bool" signature="ldap_parse_reference(resource link, resource reference_entry, array referrals)" src="ldap.c" /&gt;
      &lt;scope doc="Modify the name of an entry" ilk="function" name="ldap_rename" returns="bool" signature="ldap_rename(resource link, string dn, string newrdn, string newparent, bool deleteoldrdn)" src="ldap.c" /&gt;
      &lt;scope doc="Start TLS" ilk="function" name="ldap_start_tls" returns="bool" signature="ldap_start_tls(resource link)" src="ldap.c" /&gt;
      &lt;scope doc="Set a callback function to do re-binds on referral&amp;#xA;chasing" ilk="function" name="ldap_set_rebind_proc" returns="bool" signature="ldap_set_rebind_proc(resource link, string callback)" src="ldap.c" /&gt;
      &lt;scope doc="Translate t characters to characters" ilk="function" name="ldap_t61_to_8859" returns="string" signature="ldap_t61_to_8859(string value)" src="ldap.c" /&gt;
      &lt;scope doc="Translate characters to t characters" ilk="function" name="ldap_8859_to_t61" returns="string" signature="ldap_8859_to_t61(string value)" src="ldap.c" /&gt;
      &lt;scope doc="Inject paged results control" ilk="function" name="ldap_control_paged_result" returns="mixed" signature="ldap_control_paged_result(resource link, int pagesize [, bool iscritical [, string cookie]])" src="ldap.c" /&gt;
      &lt;scope doc="Extract paged results control response" ilk="function" name="ldap_control_paged_result_response" returns="bool" signature="ldap_control_paged_result_response(resource link, resource result [, string &amp;amp;cookie [, int &amp;amp;estimated]])" src="ldap.c" /&gt;
      &lt;scope doc="Sets the current language or Returns the current&amp;#xA;language as a string" ilk="function" name="mb_language" returns="string" signature="mb_language([string language])" src="mbstring.c" /&gt;
      &lt;scope doc="Sets the current internal encoding or Returns the&amp;#xA;current internal encoding as a string" ilk="function" name="mb_internal_encoding" returns="string" signature="mb_internal_encoding([string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns the input encoding" ilk="function" name="mb_http_input" returns="mixed" signature="mb_http_input([string type])" src="mbstring.c" /&gt;
      &lt;scope doc="Sets the current output encoding or returns the current&amp;#xA;output encoding as a string" ilk="function" name="mb_http_output" returns="string" signature="mb_http_output([string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Sets the current detect order or Return the current&amp;#xA;detect order as a array" ilk="function" name="mb_detect_order" returns="array" signature="mb_detect_order([mixed encoding-list])" src="mbstring.c" /&gt;
      &lt;scope doc="Sets the current substitute character or returns the&amp;#xA;current substitute character" ilk="function" name="mb_substitute_character" returns="mixed" signature="mb_substitute_character([mixed substchar])" src="mbstring.c" /&gt;
      &lt;scope doc="Return the preferred MIME name charset as a string" ilk="function" name="mb_preferred_mime_name" returns="string" signature="mb_preferred_mime_name(string encoding)" src="mbstring.c" /&gt;
      &lt;scope doc="Parses GET POST COOKIE data and sets global variables" ilk="function" name="mb_parse_str" returns="bool" signature="mb_parse_str(string encoded_string [, array result])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns string in output buffer converted to the http&amp;#xA;output encoding" ilk="function" name="mb_output_handler" returns="string" signature="mb_output_handler(string contents, int status)" src="mbstring.c" /&gt;
      &lt;scope doc="Get character numbers of a string" ilk="function" name="mb_strlen" returns="int" signature="mb_strlen(string str [, string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Find position of first occurrence of a string within&amp;#xA;another" ilk="function" name="mb_strpos" returns="int" signature="mb_strpos(string haystack, string needle [, int offset [, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Find position of last occurrence of a string within&amp;#xA;another" ilk="function" name="mb_strrpos" returns="int" signature="mb_strrpos(string haystack, string needle [, int offset [, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Finds position of first occurrence of a string within&amp;#xA;another case insensitive" ilk="function" name="mb_stripos" returns="int" signature="mb_stripos(string haystack, string needle [, int offset [, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Finds position of last occurrence of a string within&amp;#xA;another case insensitive" ilk="function" name="mb_strripos" returns="int" signature="mb_strripos(string haystack, string needle [, int offset [, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Finds first occurrence of a string within another" ilk="function" name="mb_strstr" returns="string" signature="mb_strstr(string haystack, string needle[, bool part[, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Finds the last occurrence of a character in a string&amp;#xA;within another" ilk="function" name="mb_strrchr" returns="string" signature="mb_strrchr(string haystack, string needle[, bool part[, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Finds first occurrence of a string within another case&amp;#xA;insensitive" ilk="function" name="mb_stristr" returns="string" signature="mb_stristr(string haystack, string needle[, bool part[, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Finds the last occurrence of a character in a string&amp;#xA;within another case insensitive" ilk="function" name="mb_strrichr" returns="string" signature="mb_strrichr(string haystack, string needle[, bool part[, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Count the number of substring occurrences" ilk="function" name="mb_substr_count" returns="int" signature="mb_substr_count(string haystack, string needle [, string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns part of a string" ilk="function" name="mb_substr" returns="string" signature="mb_substr(string str, int start [, int length [, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns part of a string" ilk="function" name="mb_strcut" returns="string" signature="mb_strcut(string str, int start [, int length [, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Gets terminal width of a string" ilk="function" name="mb_strwidth" returns="int" signature="mb_strwidth(string str [, string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Trim the string in terminal width" ilk="function" name="mb_strimwidth" returns="string" signature="mb_strimwidth(string str, int start, int width [, string trimmarker [, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns converted string in desired encoding" ilk="function" name="mb_convert_encoding" returns="string" signature="mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns a case-folded version of sourcestring" ilk="function" name="mb_convert_case" returns="string" signature="mb_convert_case(string sourcestring, int mode [, string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns a uppercased version of sourcestring" ilk="function" name="mb_strtoupper" returns="string" signature="mb_strtoupper(string sourcestring [, string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns a lowercased version of sourcestring" ilk="function" name="mb_strtolower" returns="string" signature="mb_strtolower(string sourcestring [, string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Encodings of the given string is returned as a string" ilk="function" name="mb_detect_encoding" returns="string" signature="mb_detect_encoding(string str [, mixed encoding_list [, bool strict]])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns an array of all supported entity encodings" ilk="function" name="mb_list_encodings" returns="mixed" signature="mb_list_encodings()" src="mbstring.c" /&gt;
      &lt;scope doc="Returns an array of the aliases of a given encoding&amp;#xA;name" ilk="function" name="mb_encoding_aliases" returns="array" signature="mb_encoding_aliases(string encoding)" src="mbstring.c" /&gt;
      &lt;scope doc="Converts the string to MIME quot encoded-word quot in&amp;#xA;the format of charset B" ilk="function" name="mb_encode_mimeheader" returns="string" signature="mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed [, int indent]]]])" src="mbstring.c" /&gt;
      &lt;scope doc="Decodes the MIME quot encoded-word quot in the string" ilk="function" name="mb_decode_mimeheader" returns="string" signature="mb_decode_mimeheader(string string)" src="mbstring.c" /&gt;
      &lt;scope doc="Conversion between full-width character and half-width&amp;#xA;character Japanese" ilk="function" name="mb_convert_kana" returns="string" signature="mb_convert_kana(string str [, string option] [, string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Converts the string resource in variables to desired&amp;#xA;encoding" ilk="function" name="mb_convert_variables" returns="string" signature="mb_convert_variables(string to-encoding, mixed from-encoding, mixed vars [, ...])" src="mbstring.c" /&gt;
      &lt;scope doc="Converts specified characters to HTML numeric entities" ilk="function" name="mb_encode_numericentity" returns="string" signature="mb_encode_numericentity(string string, array convmap [, string encoding [, bool is_hex]])" src="mbstring.c" /&gt;
      &lt;scope doc="Converts HTML numeric entities to character code" ilk="function" name="mb_decode_numericentity" returns="string" signature="mb_decode_numericentity(string string, array convmap [, string encoding])" src="mbstring.c" /&gt;
      &lt;scope doc="Sends an email message with MIME scheme" ilk="function" name="mb_send_mail" returns="int" signature="mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns the current settings of mbstring" ilk="function" name="mb_get_info" returns="mixed" signature="mb_get_info([string type])" src="mbstring.c" /&gt;
      &lt;scope doc="Check if the string is valid for the specified encoding" ilk="function" name="mb_check_encoding" returns="bool" signature="mb_check_encoding([string var[, string encoding]])" src="mbstring.c" /&gt;
      &lt;scope doc="Returns the current encoding for regex as a string" ilk="function" name="mb_regex_encoding" returns="string" signature="mb_regex_encoding([string encoding])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Regular expression match for multibyte string" ilk="function" name="mb_ereg" returns="int" signature="mb_ereg(string pattern, string string [, array registers])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Case-insensitive regular expression match for multibyte&amp;#xA;string" ilk="function" name="mb_eregi" returns="int" signature="mb_eregi(string pattern, string string [, array registers])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Replace regular expression for multibyte string" ilk="function" name="mb_ereg_replace" returns="string" signature="mb_ereg_replace(string pattern, string replacement, string string [, string option])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Case insensitive replace regular expression for&amp;#xA;multibyte string" ilk="function" name="mb_eregi_replace" returns="string" signature="mb_eregi_replace(string pattern, string replacement, string string)" src="php_mbregex.c" /&gt;
      &lt;scope doc="regular expression for multibyte string using&amp;#xA;replacement callback" ilk="function" name="mb_ereg_replace_callback" returns="string" signature="mb_ereg_replace_callback(string pattern, string callback, string string [, string option])" src="php_mbregex.c" /&gt;
      &lt;scope doc="split multibyte string into array by regular expression" ilk="function" name="mb_split" returns="array" signature="mb_split(string pattern, string string [, int limit])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Regular expression match for multibyte string" ilk="function" name="mb_ereg_match" returns="bool" signature="mb_ereg_match(string pattern, string string [,string option])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Regular expression search for multibyte string" ilk="function" name="mb_ereg_search" returns="bool" signature="mb_ereg_search([string pattern[, string option]])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Regular expression search for multibyte string" ilk="function" name="mb_ereg_search_pos" returns="array" signature="mb_ereg_search_pos([string pattern[, string option]])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Regular expression search for multibyte string" ilk="function" name="mb_ereg_search_regs" returns="array" signature="mb_ereg_search_regs([string pattern[, string option]])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Initialize string and regular expression for search" ilk="function" name="mb_ereg_search_init" returns="bool" signature="mb_ereg_search_init(string string [, string pattern[, string option]])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Get matched substring of the last time" ilk="function" name="mb_ereg_search_getregs" returns="array" signature="mb_ereg_search_getregs(void)" src="php_mbregex.c" /&gt;
      &lt;scope doc="Get search start position" ilk="function" name="mb_ereg_search_getpos" returns="int" signature="mb_ereg_search_getpos(void)" src="php_mbregex.c" /&gt;
      &lt;scope doc="Set search start position" ilk="function" name="mb_ereg_search_setpos" returns="bool" signature="mb_ereg_search_setpos(int position)" src="php_mbregex.c" /&gt;
      &lt;scope doc="Set or get the default options for mbregex functions" ilk="function" name="mb_regex_set_options" returns="string" signature="mb_regex_set_options([string options])" src="php_mbregex.c" /&gt;
      &lt;scope doc="Returns the sum of two arbitrary precision numbers" ilk="function" name="bcadd" returns="string" signature="bcadd(string left_operand, string right_operand [, int scale])" src="bcmath.c" /&gt;
      &lt;scope doc="Returns the difference between two arbitrary precision&amp;#xA;numbers" ilk="function" name="bcsub" returns="string" signature="bcsub(string left_operand, string right_operand [, int scale])" src="bcmath.c" /&gt;
      &lt;scope doc="Returns the multiplication of two arbitrary precision&amp;#xA;numbers" ilk="function" name="bcmul" returns="string" signature="bcmul(string left_operand, string right_operand [, int scale])" src="bcmath.c" /&gt;
      &lt;scope doc="Returns the quotient of two arbitrary precision numbers&amp;#xA;division" ilk="function" name="bcdiv" returns="string" signature="bcdiv(string left_operand, string right_operand [, int scale])" src="bcmath.c" /&gt;
      &lt;scope doc="Returns the modulus of the two arbitrary precision&amp;#xA;operands" ilk="function" name="bcmod" returns="string" signature="bcmod(string left_operand, string right_operand)" src="bcmath.c" /&gt;
      &lt;scope doc="Returns the value of an arbitrary precision number&amp;#xA;raised to the power of another reduced by a modulous" ilk="function" name="bcpowmod" returns="string" signature="bcpowmod(string x, string y, string mod [, int scale])" src="bcmath.c" /&gt;
      &lt;scope doc="Returns the value of an arbitrary precision number&amp;#xA;raised to the power of another" ilk="function" name="bcpow" returns="string" signature="bcpow(string x, string y [, int scale])" src="bcmath.c" /&gt;
      &lt;scope doc="Returns the square root of an arbitray precision number" ilk="function" name="bcsqrt" returns="string" signature="bcsqrt(string operand [, int scale])" src="bcmath.c" /&gt;
      &lt;scope doc="Compares two arbitrary precision numbers" ilk="function" name="bccomp" returns="int" signature="bccomp(string left_operand, string right_operand [, int scale])" src="bcmath.c" /&gt;
      &lt;scope doc="Sets default scale parameter for all bc math functions" ilk="function" name="bcscale" returns="bool" signature="bcscale(int scale)" src="bcmath.c" /&gt;
      &lt;scope doc="Open Sybase server connection" ilk="function" name="sybase_connect" returns="int" signature="sybase_connect([string host [, string user [, string password [, string charset [, string appname [, bool new]]]]]])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Open persistent Sybase connection" ilk="function" name="sybase_pconnect" returns="int" signature="sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Close Sybase connection" ilk="function" name="sybase_close" returns="bool" signature="sybase_close([resource link_id])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Select Sybase database" ilk="function" name="sybase_select_db" returns="bool" signature="sybase_select_db(string database [, resource link_id])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Send Sybase query" ilk="function" name="sybase_query" returns="int" signature="sybase_query(string query [, resource link_id])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Send Sybase query" ilk="function" name="sybase_unbuffered_query" returns="int" signature="sybase_unbuffered_query(string query [, resource link_id])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Free result memory" ilk="function" name="sybase_free_result" returns="bool" signature="sybase_free_result(resource result)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Returns the last message from server over min message&amp;#xA;severity" ilk="function" name="sybase_get_last_message" returns="string" signature="sybase_get_last_message(void)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Get number of rows in result" ilk="function" name="sybase_num_rows" returns="int" signature="sybase_num_rows(resource result)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Get number of fields in result" ilk="function" name="sybase_num_fields" returns="int" signature="sybase_num_fields(resource result)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Get row as enumerated array" ilk="function" name="sybase_fetch_row" returns="array" signature="sybase_fetch_row(resource result)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Fetch row as object" ilk="function" name="sybase_fetch_object" returns="object" signature="sybase_fetch_object(resource result [, mixed object])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Fetch row as array" ilk="function" name="sybase_fetch_array" returns="array" signature="sybase_fetch_array(resource result)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Fetch row as array without numberic indices" ilk="function" name="sybase_fetch_assoc" returns="array" signature="sybase_fetch_assoc(resource result)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Move internal row pointer" ilk="function" name="sybase_data_seek" returns="bool" signature="sybase_data_seek(resource result, int offset)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Get field information" ilk="function" name="sybase_fetch_field" returns="object" signature="sybase_fetch_field(resource result [, int offset])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Set field offset" ilk="function" name="sybase_field_seek" returns="bool" signature="sybase_field_seek(resource result, int offset)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Get result data" ilk="function" name="sybase_result" returns="string" signature="sybase_result(resource result, int row, mixed field)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Get number of affected rows in last query" ilk="function" name="sybase_affected_rows" returns="int" signature="sybase_affected_rows([resource link_id])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Sets minimum client severity" ilk="function" name="sybase_min_client_severity" returns="void" signature="sybase_min_client_severity(int severity)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Sets minimum server severity" ilk="function" name="sybase_min_server_severity" returns="void" signature="sybase_min_server_severity(int severity)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Sets deadlock retry count" ilk="function" name="sybase_deadlock_retry_count" returns="void" signature="sybase_deadlock_retry_count(int retry_count)" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="Set the error handler to be called when a server&amp;#xA;message is raised If error func is NULL the handler" ilk="function" name="sybase_set_message_handler" returns="bool" signature="sybase_set_message_handler(mixed error_func [, resource connection])" src="php_sybase_ct.c" /&gt;
      &lt;scope doc="call" ilk="function" name="json_encode" returns="last" signature="json_encode() or json_decode()" src="json.c" /&gt;
      &lt;scope doc="Decodes the JSON representation into a PHP value" ilk="function" name="json_decode" returns="mixed" signature="json_decode(string json [, bool assoc [, long depth]])" src="json.c" /&gt;
      &lt;scope doc="Opens the module of the algorithm and the mode to be&amp;#xA;used" ilk="function" name="mcrypt_module_open" returns="resource" signature="mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)" src="mcrypt.c" /&gt;
      &lt;scope doc="This function initializes all buffers for the specific&amp;#xA;module" ilk="function" name="mcrypt_generic_init" returns="int" signature="mcrypt_generic_init(resource td, string key, string iv)" src="mcrypt.c" /&gt;
      &lt;scope doc="This function encrypts the plaintext" ilk="function" name="mcrypt_generic" returns="string" signature="mcrypt_generic(resource td, string data)" src="mcrypt.c" /&gt;
      &lt;scope doc="This function decrypts the plaintext" ilk="function" name="mdecrypt_generic" returns="string" signature="mdecrypt_generic(resource td, string data)" src="mcrypt.c" /&gt;
      &lt;scope doc="This function decrypts the crypttext" ilk="function" name="mcrypt_enc_get_supported_key_sizes" returns="array" signature="mcrypt_enc_get_supported_key_sizes(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="This function runs the self test on the algorithm&amp;#xA;specified by the descriptor td" ilk="function" name="mcrypt_enc_self_test" returns="int" signature="mcrypt_enc_self_test(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Free the descriptor td" ilk="function" name="mcrypt_module_close" returns="bool" signature="mcrypt_module_close(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="This function terminates encrypt specified by the&amp;#xA;descriptor td" ilk="function" name="mcrypt_generic_deinit" returns="bool" signature="mcrypt_generic_deinit(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns TRUE if the mode is for use with block&amp;#xA;algorithms" ilk="function" name="mcrypt_enc_is_block_algorithm_mode" returns="bool" signature="mcrypt_enc_is_block_algorithm_mode(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns TRUE if the alrogithm is a block algorithms" ilk="function" name="mcrypt_enc_is_block_algorithm" returns="bool" signature="mcrypt_enc_is_block_algorithm(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns TRUE if the mode outputs blocks" ilk="function" name="mcrypt_enc_is_block_mode" returns="bool" signature="mcrypt_enc_is_block_mode(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns the block size of the cipher specified by the&amp;#xA;descriptor td" ilk="function" name="mcrypt_enc_get_block_size" returns="int" signature="mcrypt_enc_get_block_size(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns the maximum supported key size in bytes of the&amp;#xA;algorithm specified by the descriptor td" ilk="function" name="mcrypt_enc_get_key_size" returns="int" signature="mcrypt_enc_get_key_size(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns the size of the IV in bytes of the algorithm&amp;#xA;specified by the descriptor td" ilk="function" name="mcrypt_enc_get_iv_size" returns="int" signature="mcrypt_enc_get_iv_size(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns the name of the algorithm specified by the&amp;#xA;descriptor td" ilk="function" name="mcrypt_enc_get_algorithms_name" returns="string" signature="mcrypt_enc_get_algorithms_name(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns the name of the mode specified by the&amp;#xA;descriptor td" ilk="function" name="mcrypt_enc_get_modes_name" returns="string" signature="mcrypt_enc_get_modes_name(resource td)" src="mcrypt.c" /&gt;
      &lt;scope doc="Does a self test of the module quot module quot" ilk="function" name="mcrypt_module_self_test" returns="bool" signature="mcrypt_module_self_test(string algorithm [, string lib_dir])" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns TRUE if the mode is for use with block&amp;#xA;algorithms" ilk="function" name="mcrypt_module_is_block_algorithm_mode" returns="bool" signature="mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns TRUE if the algorithm is a block algorithm" ilk="function" name="mcrypt_module_is_block_algorithm" returns="bool" signature="mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns TRUE if the mode outputs blocks of bytes" ilk="function" name="mcrypt_module_is_block_mode" returns="bool" signature="mcrypt_module_is_block_mode(string mode [, string lib_dir])" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns the block size of the algorithm" ilk="function" name="mcrypt_module_get_algo_block_size" returns="int" signature="mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])" src="mcrypt.c" /&gt;
      &lt;scope doc="Returns the maximum supported key size of the algorithm" ilk="function" name="mcrypt_module_get_algo_key_size" returns="int" signature="mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])" src="mcrypt.c" /&gt;
      &lt;scope doc="This function decrypts the crypttext" ilk="function" name="mcrypt_module_get_supported_key_sizes" returns="array" signature="mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])" src="mcrypt.c" /&gt;
      &lt;scope doc="List all algorithms in quot module dir quot" ilk="function" name="mcrypt_list_algorithms" returns="array" signature="mcrypt_list_algorithms([string lib_dir])" src="mcrypt.c" /&gt;
      &lt;scope doc="List all modes quot module dir quot" ilk="function" name="mcrypt_list_modes" returns="array" signature="mcrypt_list_modes([string lib_dir])" src="mcrypt.c" /&gt;
      &lt;scope doc="Get the key size of cipher" ilk="function" name="mcrypt_get_key_size" returns="int" signature="mcrypt_get_key_size(string cipher, string module)" src="mcrypt.c" /&gt;
      &lt;scope doc="Get the key size of cipher" ilk="function" name="mcrypt_get_block_size" returns="int" signature="mcrypt_get_block_size(string cipher, string module)" src="mcrypt.c" /&gt;
      &lt;scope doc="Get the IV size of cipher Usually the same as the&amp;#xA;blocksize" ilk="function" name="mcrypt_get_iv_size" returns="int" signature="mcrypt_get_iv_size(string cipher, string module)" src="mcrypt.c" /&gt;
      &lt;scope doc="Get the key size of cipher" ilk="function" name="mcrypt_get_cipher_name" returns="string" signature="mcrypt_get_cipher_name(string cipher)" src="mcrypt.c" /&gt;
      &lt;scope doc="OFB crypt decrypt data using key key with cipher cipher&amp;#xA;starting with iv" ilk="function" name="mcrypt_encrypt" returns="string" signature="mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)" src="mcrypt.c" /&gt;
      &lt;scope doc="OFB crypt decrypt data using key key with cipher cipher&amp;#xA;starting with iv" ilk="function" name="mcrypt_decrypt" returns="string" signature="mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)" src="mcrypt.c" /&gt;
      &lt;scope doc="ECB crypt decrypt data using key key with cipher cipher&amp;#xA;starting with iv" ilk="function" name="mcrypt_ecb" returns="string" signature="mcrypt_ecb(int cipher, string key, string data, int mode, string iv)" src="mcrypt.c" /&gt;
      &lt;scope doc="CBC crypt decrypt data using key key with cipher cipher&amp;#xA;starting with iv" ilk="function" name="mcrypt_cbc" returns="string" signature="mcrypt_cbc(int cipher, string key, string data, int mode, string iv)" src="mcrypt.c" /&gt;
      &lt;scope doc="CFB crypt decrypt data using key key with cipher cipher&amp;#xA;starting with iv" ilk="function" name="mcrypt_cfb" returns="string" signature="mcrypt_cfb(int cipher, string key, string data, int mode, string iv)" src="mcrypt.c" /&gt;
      &lt;scope doc="OFB crypt decrypt data using key key with cipher cipher&amp;#xA;starting with iv" ilk="function" name="mcrypt_ofb" returns="string" signature="mcrypt_ofb(int cipher, string key, string data, int mode, string iv)" src="mcrypt.c" /&gt;
      &lt;scope doc="Create an initialization vector IV" ilk="function" name="mcrypt_create_iv" returns="string" signature="mcrypt_create_iv(int size, int source)" src="mcrypt.c" /&gt;
      &lt;scope doc="Send a signal to a process POSIX" ilk="function" name="posix_kill" returns="bool" signature="posix_kill(int pid, int sig)" src="posix.c" /&gt;
      &lt;scope doc="Get the current process id POSIX" ilk="function" name="posix_getpid" returns="int" signature="posix_getpid(void)" src="posix.c" /&gt;
      &lt;scope doc="Get the parent process id POSIX" ilk="function" name="posix_getppid" returns="int" signature="posix_getppid(void)" src="posix.c" /&gt;
      &lt;scope doc="Get the current user id POSIX" ilk="function" name="posix_getuid" returns="int" signature="posix_getuid(void)" src="posix.c" /&gt;
      &lt;scope doc="Get the current group id POSIX" ilk="function" name="posix_getgid" returns="int" signature="posix_getgid(void)" src="posix.c" /&gt;
      &lt;scope doc="Get the current effective user id POSIX" ilk="function" name="posix_geteuid" returns="int" signature="posix_geteuid(void)" src="posix.c" /&gt;
      &lt;scope doc="Get the current effective group id POSIX" ilk="function" name="posix_getegid" returns="int" signature="posix_getegid(void)" src="posix.c" /&gt;
      &lt;scope doc="Set user id POSIX" ilk="function" name="posix_setuid" returns="bool" signature="posix_setuid(long uid)" src="posix.c" /&gt;
      &lt;scope doc="Set group id POSIX" ilk="function" name="posix_setgid" returns="bool" signature="posix_setgid(int uid)" src="posix.c" /&gt;
      &lt;scope doc="Set effective user id" ilk="function" name="posix_seteuid" returns="bool" signature="posix_seteuid(long uid)" src="posix.c" /&gt;
      &lt;scope doc="Set effective group id" ilk="function" name="posix_setegid" returns="bool" signature="posix_setegid(long uid)" src="posix.c" /&gt;
      &lt;scope doc="Get supplementary group id&amp;apos;s POSIX" ilk="function" name="posix_getgroups" returns="array" signature="posix_getgroups(void)" src="posix.c" /&gt;
      &lt;scope doc="Get user name POSIX" ilk="function" name="posix_getlogin" returns="string" signature="posix_getlogin(void)" src="posix.c" /&gt;
      &lt;scope doc="Get current process group id POSIX" ilk="function" name="posix_getpgrp" returns="int" signature="posix_getpgrp(void)" src="posix.c" /&gt;
      &lt;scope doc="Create session and set process group id POSIX" ilk="function" name="posix_setsid" returns="int" signature="posix_setsid(void)" src="posix.c" /&gt;
      &lt;scope doc="Set process group id for job control POSIX" ilk="function" name="posix_setpgid" returns="bool" signature="posix_setpgid(int pid, int pgid)" src="posix.c" /&gt;
      &lt;scope doc="Get the process group id of the specified process This&amp;#xA;is not a POSIX function but a SVR ism so" ilk="function" name="posix_getpgid" returns="int" signature="posix_getpgid(void)" src="posix.c" /&gt;
      &lt;scope doc="Get process group id of session leader This is not a&amp;#xA;POSIX function but a SVR ism so be compile" ilk="function" name="posix_getsid" returns="int" signature="posix_getsid(void)" src="posix.c" /&gt;
      &lt;scope doc="Get system name POSIX" ilk="function" name="posix_uname" returns="array" signature="posix_uname(void)" src="posix.c" /&gt;
      &lt;scope doc="Get process times POSIX" ilk="function" name="posix_times" returns="array" signature="posix_times(void)" src="posix.c" /&gt;
      &lt;scope doc="Generate terminal path name POSIX" ilk="function" name="posix_ctermid" returns="string" signature="posix_ctermid(void)" src="posix.c" /&gt;
      &lt;scope doc="Determine terminal device name POSIX" ilk="function" name="posix_ttyname" returns="string" signature="posix_ttyname(int fd)" src="posix.c" /&gt;
      &lt;scope doc="Determine if filedesc is a tty POSIX" ilk="function" name="posix_isatty" returns="bool" signature="posix_isatty(int fd)" src="posix.c" /&gt;
      &lt;scope doc="Get working directory pathname POSIX" ilk="function" name="posix_getcwd" returns="string" signature="posix_getcwd(void)" src="posix.c" /&gt;
      &lt;scope doc="Make a FIFO special file POSIX" ilk="function" name="posix_mkfifo" returns="bool" signature="posix_mkfifo(string pathname, int mode)" src="posix.c" /&gt;
      &lt;scope doc="Make a special or ordinary file POSIX" ilk="function" name="posix_mknod" returns="bool" signature="posix_mknod(string pathname, int mode [, int major [, int minor]])" src="posix.c" /&gt;
      &lt;scope doc="Determine accessibility of a file POSIX" ilk="function" name="posix_access" returns="bool" signature="posix_access(string file [, int mode])" src="posix.c" /&gt;
      &lt;scope doc="Group database access POSIX" ilk="function" name="posix_getgrnam" returns="array" signature="posix_getgrnam(string groupname)" src="posix.c" /&gt;
      &lt;scope doc="Group database access POSIX" ilk="function" name="posix_getgrgid" returns="array" signature="posix_getgrgid(long gid)" src="posix.c" /&gt;
      &lt;scope doc="User database access POSIX" ilk="function" name="posix_getpwnam" returns="array" signature="posix_getpwnam(string groupname)" src="posix.c" /&gt;
      &lt;scope doc="User database access POSIX" ilk="function" name="posix_getpwuid" returns="array" signature="posix_getpwuid(long uid)" src="posix.c" /&gt;
      &lt;scope doc="Get system resource consumption limits This is not a&amp;#xA;POSIX function but a BSDism and a SVR ism We compile" ilk="function" name="posix_getrlimit" returns="array" signature="posix_getrlimit(void)" src="posix.c" /&gt;
      &lt;scope doc="Retrieve the error number set by the last posix&amp;#xA;function which failed" ilk="function" name="posix_get_last_error" returns="int" signature="posix_get_last_error(void)" src="posix.c" /&gt;
      &lt;scope doc="Retrieve the system error message associated with the&amp;#xA;given errno" ilk="function" name="posix_strerror" returns="string" signature="posix_strerror(int errno)" src="posix.c" /&gt;
      &lt;scope doc="Calculate the group access list for the user specified&amp;#xA;in name" ilk="function" name="posix_initgroups" returns="bool" signature="posix_initgroups(string name, int base_group_id)" src="posix.c" /&gt;
      &lt;scope doc="Checks for alphanumeric character s" ilk="function" name="ctype_alnum" returns="bool" signature="ctype_alnum(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for alphabetic character s" ilk="function" name="ctype_alpha" returns="bool" signature="ctype_alpha(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for control character s" ilk="function" name="ctype_cntrl" returns="bool" signature="ctype_cntrl(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for numeric character s" ilk="function" name="ctype_digit" returns="bool" signature="ctype_digit(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for lowercase character s" ilk="function" name="ctype_lower" returns="bool" signature="ctype_lower(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for any printable character s except space" ilk="function" name="ctype_graph" returns="bool" signature="ctype_graph(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for printable character s" ilk="function" name="ctype_print" returns="bool" signature="ctype_print(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for any printable character which is not&amp;#xA;whitespace or an alphanumeric character" ilk="function" name="ctype_punct" returns="bool" signature="ctype_punct(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for whitespace character s" ilk="function" name="ctype_space" returns="bool" signature="ctype_space(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for uppercase character s" ilk="function" name="ctype_upper" returns="bool" signature="ctype_upper(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Checks for character s representing a hexadecimal digit" ilk="function" name="ctype_xdigit" returns="bool" signature="ctype_xdigit(mixed c)" src="ctype.c" /&gt;
      &lt;scope doc="Set session cookie parameters" ilk="function" name="session_set_cookie_params" returns="void" signature="session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure[, bool httponly]]]])" src="session.c" /&gt;
      &lt;scope doc="Return the session cookie parameters" ilk="function" name="session_get_cookie_params" returns="array" signature="session_get_cookie_params(void)" src="session.c" /&gt;
      &lt;scope doc="Return the current session name If newname is given the&amp;#xA;session name is replaced with newname" ilk="function" name="session_name" returns="string" signature="session_name([string newname])" src="session.c" /&gt;
      &lt;scope doc="Return the current module name used for accessing&amp;#xA;session data If newname is given the module name is&amp;#xA;replaced with" ilk="function" name="session_module_name" returns="string" signature="session_module_name([string newname])" src="session.c" /&gt;
      &lt;scope doc="Sets user-level functions" ilk="function" name="session_set_save_handler" returns="void" signature="session_set_save_handler(string open, string close, string read, string write, string destroy, string gc, string create_sid)" src="session.c" /&gt;
      &lt;scope doc="Return the current save path passed to module name If&amp;#xA;newname is given the save path is replaced with newname" ilk="function" name="session_save_path" returns="string" signature="session_save_path([string newname])" src="session.c" /&gt;
      &lt;scope doc="Return the current session id If newid is given the&amp;#xA;session id is replaced with newid" ilk="function" name="session_id" returns="string" signature="session_id([string newid])" src="session.c" /&gt;
      &lt;scope doc="Update the current session id with a newly generated&amp;#xA;one If delete old session is set to true remove the" ilk="function" name="session_regenerate_id" returns="bool" signature="session_regenerate_id([bool delete_old_session])" src="session.c" /&gt;
      &lt;scope doc="Return the current cache limiter If new cache limited&amp;#xA;is given the current cache limiter is replaced with new&amp;#xA;cache" ilk="function" name="session_cache_limiter" returns="string" signature="session_cache_limiter([string new_cache_limiter])" src="session.c" /&gt;
      &lt;scope doc="Return the current cache expire If new cache expire is&amp;#xA;given the current cache expire is replaced with new&amp;#xA;cache" ilk="function" name="session_cache_expire" returns="int" signature="session_cache_expire([int new_cache_expire])" src="session.c" /&gt;
      &lt;scope doc="Serializes the current setup and returns the serialized&amp;#xA;representation" ilk="function" name="session_encode" returns="string" signature="session_encode(void)" src="session.c" /&gt;
      &lt;scope doc="Deserializes data and reinitializes the variables" ilk="function" name="session_decode" returns="bool" signature="session_decode(string data)" src="session.c" /&gt;
      &lt;scope doc="Begin session - reinitializes freezed variables&amp;#xA;registers browsers etc" ilk="function" name="session_start" returns="bool" signature="session_start(void)" src="session.c" /&gt;
      &lt;scope doc="Destroy the current session and all data associated&amp;#xA;with it" ilk="function" name="session_destroy" returns="bool" signature="session_destroy(void)" src="session.c" /&gt;
      &lt;scope doc="Unset all registered variables" ilk="function" name="session_unset" returns="void" signature="session_unset(void)" src="session.c" /&gt;
      &lt;scope doc="Write session data and end session" ilk="function" name="session_write_close" returns="void" signature="session_write_close(void)" src="session.c" /&gt;
      &lt;scope doc="Returns the current session status" ilk="function" name="session_status" returns="int" signature="session_status(void)" src="session.c" /&gt;
      &lt;scope doc="Registers session write close as a shutdown function" ilk="function" name="session_register_shutdown" returns="void" signature="session_register_shutdown(void)" src="session.c" /&gt;
      &lt;scope doc="Create an XML parser" ilk="function" name="xml_parser_create" returns="resource" signature="xml_parser_create([string encoding])" src="xml.c" /&gt;
      &lt;scope doc="Create an XML parser" ilk="function" name="xml_parser_create_ns" returns="resource" signature="xml_parser_create_ns([string encoding [, string sep]])" src="xml.c" /&gt;
      &lt;scope doc="Set up object which should be used for callbacks" ilk="function" name="xml_set_object" returns="int" signature="xml_set_object(resource parser, object &amp;amp;obj)" src="xml.c" /&gt;
      &lt;scope doc="Set up start and end element handlers" ilk="function" name="xml_set_element_handler" returns="int" signature="xml_set_element_handler(resource parser, string shdl, string ehdl)" src="xml.c" /&gt;
      &lt;scope doc="Set up character data handler" ilk="function" name="xml_set_character_data_handler" returns="int" signature="xml_set_character_data_handler(resource parser, string hdl)" src="xml.c" /&gt;
      &lt;scope doc="Set up processing instruction PI handler" ilk="function" name="xml_set_processing_instruction_handler" returns="int" signature="xml_set_processing_instruction_handler(resource parser, string hdl)" src="xml.c" /&gt;
      &lt;scope doc="Set up default handler" ilk="function" name="xml_set_default_handler" returns="int" signature="xml_set_default_handler(resource parser, string hdl)" src="xml.c" /&gt;
      &lt;scope doc="Set up unparsed entity declaration handler" ilk="function" name="xml_set_unparsed_entity_decl_handler" returns="int" signature="xml_set_unparsed_entity_decl_handler(resource parser, string hdl)" src="xml.c" /&gt;
      &lt;scope doc="Set up notation declaration handler" ilk="function" name="xml_set_notation_decl_handler" returns="int" signature="xml_set_notation_decl_handler(resource parser, string hdl)" src="xml.c" /&gt;
      &lt;scope doc="Set up external entity reference handler" ilk="function" name="xml_set_external_entity_ref_handler" returns="int" signature="xml_set_external_entity_ref_handler(resource parser, string hdl)" src="xml.c" /&gt;
      &lt;scope doc="Set up character data handler" ilk="function" name="xml_set_start_namespace_decl_handler" returns="int" signature="xml_set_start_namespace_decl_handler(resource parser, string hdl)" src="xml.c" /&gt;
      &lt;scope doc="Set up character data handler" ilk="function" name="xml_set_end_namespace_decl_handler" returns="int" signature="xml_set_end_namespace_decl_handler(resource parser, string hdl)" src="xml.c" /&gt;
      &lt;scope doc="Start parsing an XML document" ilk="function" name="xml_parse" returns="int" signature="xml_parse(resource parser, string data [, int isFinal])" src="xml.c" /&gt;
      &lt;scope doc="Parsing a XML document" ilk="function" name="xml_parse_into_struct" returns="int" signature="xml_parse_into_struct(resource parser, string data, array &amp;amp;values [, array &amp;amp;index ])" src="xml.c" /&gt;
      &lt;scope doc="Get XML parser error code" ilk="function" name="xml_get_error_code" returns="int" signature="xml_get_error_code(resource parser)" src="xml.c" /&gt;
      &lt;scope doc="Get XML parser error string" ilk="function" name="xml_error_string" returns="string" signature="xml_error_string(int code)" src="xml.c" /&gt;
      &lt;scope doc="Get current line number for an XML parser" ilk="function" name="xml_get_current_line_number" returns="int" signature="xml_get_current_line_number(resource parser)" src="xml.c" /&gt;
      &lt;scope doc="Get current column number for an XML parser" ilk="function" name="xml_get_current_column_number" returns="int" signature="xml_get_current_column_number(resource parser)" src="xml.c" /&gt;
      &lt;scope doc="Get current byte index for an XML parser" ilk="function" name="xml_get_current_byte_index" returns="int" signature="xml_get_current_byte_index(resource parser)" src="xml.c" /&gt;
      &lt;scope doc="Free an XML parser" ilk="function" name="xml_parser_free" returns="int" signature="xml_parser_free(resource parser)" src="xml.c" /&gt;
      &lt;scope doc="Set options in an XML parser" ilk="function" name="xml_parser_set_option" returns="int" signature="xml_parser_set_option(resource parser, int option, mixed value)" src="xml.c" /&gt;
      &lt;scope doc="Get options from an XML parser" ilk="function" name="xml_parser_get_option" returns="int" signature="xml_parser_get_option(resource parser, int option)" src="xml.c" /&gt;
      &lt;scope doc="Encodes an ISO- - string to UTF-" ilk="function" name="utf8_encode" returns="string" signature="utf8_encode(string data)" src="xml.c" /&gt;
      &lt;scope doc="Converts a UTF- encoded string to ISO- -" ilk="function" name="utf8_decode" returns="string" signature="utf8_decode(string data)" src="xml.c" /&gt;
      &lt;scope doc="Returns true if the variable with the name &amp;apos;name&amp;apos;&amp;#xA;exists in source" ilk="function" name="filter_has_var" returns="mixed" signature="filter_has_var(constant type, string variable_name)" src="filter.c" /&gt;
      &lt;scope doc="Returns the filtered variable &amp;apos;name&amp;apos; from source type" ilk="function" name="filter_input" returns="mixed" signature="filter_input(constant type, string variable_name [, long filter [, mixed options]])" src="filter.c" /&gt;
      &lt;scope doc="Returns the filtered version of the vriable" ilk="function" name="filter_var" returns="mixed" signature="filter_var(mixed variable [, long filter [, mixed options]])" src="filter.c" /&gt;
      &lt;scope doc="Returns an array with all arguments defined in&amp;#xA;&amp;apos;definition&amp;apos;" ilk="function" name="filter_input_array" returns="mixed" signature="filter_input_array(constant type, [, mixed options [, bool add_empty]]])" src="filter.c" /&gt;
      &lt;scope doc="Returns an array with all arguments defined in&amp;#xA;&amp;apos;definition&amp;apos;" ilk="function" name="filter_var_array" returns="mixed" signature="filter_var_array(array data, [, mixed options [, bool add_empty]]])" src="filter.c" /&gt;
      &lt;scope doc="Returns the filter ID belonging to a named filter" ilk="function" name="d" returns="filter_i" signature="d(string filtername)" src="filter.c" /&gt;
      &lt;scope doc="Load a filename and return a simplexml element object&amp;#xA;to allow for processing" ilk="function" name="simplexml_load_file" returns="simplemxml_element" signature="simplexml_load_file(string filename [, string class_name [, int options [, string ns [, bool is_prefix]]]])" src="simplexml.c" /&gt;
      &lt;scope doc="Load a string and return a simplexml element object to&amp;#xA;allow for processing" ilk="function" name="simplexml_load_string" returns="simplemxml_element" signature="simplexml_load_string(string data [, string class_name [, int options [, string ns [, bool is_prefix]]]])" src="simplexml.c" /&gt;
      &lt;scope doc="Get a simplexml element object from dom to allow for&amp;#xA;processing" ilk="function" name="simplexml_import_dom" returns="simplemxml_element" signature="simplexml_import_dom(domNode node [, string class_name])" src="simplexml.c" /&gt;
      &lt;scope doc="Open an IMAP stream to a mailbox" ilk="function" name="imap_open" returns="resource" signature="imap_open(string mailbox, string user, string password [, int options [, int n_retries]])" src="php_imap.c" /&gt;
      &lt;scope doc="Reopen an IMAP stream to a new mailbox" ilk="function" name="imap_reopen" returns="bool" signature="imap_reopen(resource stream_id, string mailbox [, int options [, int n_retries]])" src="php_imap.c" /&gt;
      &lt;scope doc="Append a new message to a specified mailbox" ilk="function" name="imap_append" returns="bool" signature="imap_append(resource stream_id, string folder, string message [, string options [, string internal_date]])" src="php_imap.c" /&gt;
      &lt;scope doc="Gives the number of messages in the current mailbox" ilk="function" name="imap_num_msg" returns="int" signature="imap_num_msg(resource stream_id)" src="php_imap.c" /&gt;
      &lt;scope doc="Check if the IMAP stream is still active" ilk="function" name="imap_ping" returns="bool" signature="imap_ping(resource stream_id)" src="php_imap.c" /&gt;
      &lt;scope doc="Gives the number of recent messages in current mailbox" ilk="function" name="imap_num_recent" returns="int" signature="imap_num_recent(resource stream_id)" src="php_imap.c" /&gt;
      &lt;scope doc="Returns the quota set to the mailbox account qroot" ilk="function" name="imap_get_quota" returns="array" signature="imap_get_quota(resource stream_id, string qroot)" src="php_imap.c" /&gt;
      &lt;scope doc="Returns the quota set to the mailbox account mbox" ilk="function" name="imap_get_quotaroot" returns="array" signature="imap_get_quotaroot(resource stream_id, string mbox)" src="php_imap.c" /&gt;
      &lt;scope doc="Will set the quota for qroot mailbox" ilk="function" name="imap_set_quota" returns="bool" signature="imap_set_quota(resource stream_id, string qroot, int mailbox_size)" src="php_imap.c" /&gt;
      &lt;scope doc="Sets the ACL for a given mailbox" ilk="function" name="imap_setacl" returns="bool" signature="imap_setacl(resource stream_id, string mailbox, string id, string rights)" src="php_imap.c" /&gt;
      &lt;scope doc="Gets the ACL for a given mailbox" ilk="function" name="imap_getacl" returns="array" signature="imap_getacl(resource stream_id, string mailbox)" src="php_imap.c" /&gt;
      &lt;scope doc="Permanently delete all messages marked for deletion" ilk="function" name="imap_expunge" returns="bool" signature="imap_expunge(resource stream_id)" src="php_imap.c" /&gt;
      &lt;scope doc="This function garbage collects purges the cache of&amp;#xA;entries of a specific type" ilk="function" name="imap_gc" returns="bool" signature="imap_gc(resource stream_id, int flags)" src="php_imap.c" /&gt;
      &lt;scope doc="Close an IMAP stream" ilk="function" name="imap_close" returns="bool" signature="imap_close(resource stream_id [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Returns headers for all messages in a mailbox" ilk="function" name="imap_headers" returns="array" signature="imap_headers(resource stream_id)" src="php_imap.c" /&gt;
      &lt;scope doc="Read the message body" ilk="function" name="imap_body" returns="string" signature="imap_body(resource stream_id, int msg_no [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Copy specified message to a mailbox" ilk="function" name="imap_mail_copy" returns="bool" signature="imap_mail_copy(resource stream_id, string msglist, string mailbox [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Move specified message to a mailbox" ilk="function" name="imap_mail_move" returns="bool" signature="imap_mail_move(resource stream_id, string sequence, string mailbox [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Create a new mailbox" ilk="function" name="imap_createmailbox" returns="bool" signature="imap_createmailbox(resource stream_id, string mailbox)" src="php_imap.c" /&gt;
      &lt;scope doc="Rename a mailbox" ilk="function" name="imap_renamemailbox" returns="bool" signature="imap_renamemailbox(resource stream_id, string old_name, string new_name)" src="php_imap.c" /&gt;
      &lt;scope doc="Delete a mailbox" ilk="function" name="imap_deletemailbox" returns="bool" signature="imap_deletemailbox(resource stream_id, string mailbox)" src="php_imap.c" /&gt;
      &lt;scope doc="Read the list of mailboxes" ilk="function" name="imap_list" returns="array" signature="imap_list(resource stream_id, string ref, string pattern)" src="php_imap.c" /&gt;
      &lt;scope doc="Reads the list of mailboxes and returns a full array of&amp;#xA;objects containing name attributes and delimiter" ilk="function" name="imap_getmailboxes" returns="array" signature="imap_getmailboxes(resource stream_id, string ref, string pattern)" src="php_imap.c" /&gt;
      &lt;scope doc="Read list of mailboxes containing a certain string" ilk="function" name="imap_listscan" returns="array" signature="imap_listscan(resource stream_id, string ref, string pattern, string content)" src="php_imap.c" /&gt;
      &lt;scope doc="Get mailbox properties" ilk="function" name="imap_check" returns="object" signature="imap_check(resource stream_id)" src="php_imap.c" /&gt;
      &lt;scope doc="Mark a message for deletion" ilk="function" name="imap_delete" returns="bool" signature="imap_delete(resource stream_id, int msg_no [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Remove the delete flag from a message" ilk="function" name="imap_undelete" returns="bool" signature="imap_undelete(resource stream_id, int msg_no [, int flags])" src="php_imap.c" /&gt;
      &lt;scope doc="Read the headers of the message" ilk="function" name="imap_headerinfo" returns="object" signature="imap_headerinfo(resource stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])" src="php_imap.c" /&gt;
      &lt;scope doc="Parse a set of mail headers contained in a string and&amp;#xA;return an object similar to imap headerinfo" ilk="function" name="imap_rfc822_parse_headers" returns="object" signature="imap_rfc822_parse_headers(string headers [, string default_host])" src="php_imap.c" /&gt;
      &lt;scope doc="Return a list of subscribed mailboxes" ilk="function" name="imap_lsub" returns="array" signature="imap_lsub(resource stream_id, string ref, string pattern)" src="php_imap.c" /&gt;
      &lt;scope doc="Return a list of subscribed mailboxes in the same&amp;#xA;format as imap getmailboxes" ilk="function" name="imap_getsubscribed" returns="array" signature="imap_getsubscribed(resource stream_id, string ref, string pattern)" src="php_imap.c" /&gt;
      &lt;scope doc="Subscribe to a mailbox" ilk="function" name="imap_subscribe" returns="bool" signature="imap_subscribe(resource stream_id, string mailbox)" src="php_imap.c" /&gt;
      &lt;scope doc="Unsubscribe from a mailbox" ilk="function" name="imap_unsubscribe" returns="bool" signature="imap_unsubscribe(resource stream_id, string mailbox)" src="php_imap.c" /&gt;
      &lt;scope doc="Read the full structure of a message" ilk="function" name="imap_fetchstructure" returns="object" signature="imap_fetchstructure(resource stream_id, int msg_no [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Get a specific body section" ilk="function" name="imap_fetchbody" returns="string" signature="imap_fetchbody(resource stream_id, int msg_no, string section [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Get a specific body section&amp;apos;s MIME headers" ilk="function" name="imap_fetchmime" returns="string" signature="imap_fetchmime(resource stream_id, int msg_no, string section [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Save a specific body section to a file" ilk="function" name="imap_savebody" returns="bool" signature="imap_savebody(resource stream_id, string" src="php_imap.c" /&gt;
      &lt;scope doc="Decode BASE encoded text" ilk="function" name="imap_base64" returns="string" signature="imap_base64(string text)" src="php_imap.c" /&gt;
      &lt;scope doc="Convert a quoted-printable string to an -bit string" ilk="function" name="imap_qprint" returns="string" signature="imap_qprint(string text)" src="php_imap.c" /&gt;
      &lt;scope doc="Convert an -bit string to a quoted-printable string" ilk="function" name="imap_8bit" returns="string" signature="imap_8bit(string text)" src="php_imap.c" /&gt;
      &lt;scope doc="Convert an bit string to a base string" ilk="function" name="imap_binary" returns="string" signature="imap_binary(string text)" src="php_imap.c" /&gt;
      &lt;scope doc="Returns info about the current mailbox" ilk="function" name="imap_mailboxmsginfo" returns="object" signature="imap_mailboxmsginfo(resource stream_id)" src="php_imap.c" /&gt;
      &lt;scope doc="Returns a properly formatted email address given the&amp;#xA;mailbox host and personal info" ilk="function" name="imap_rfc822_write_address" returns="string" signature="imap_rfc822_write_address(string mailbox, string host, string personal)" src="php_imap.c" /&gt;
      &lt;scope doc="Parses an address string" ilk="function" name="imap_rfc822_parse_adrlist" returns="array" signature="imap_rfc822_parse_adrlist(string address_string, string default_host)" src="php_imap.c" /&gt;
      &lt;scope doc="Convert a mime-encoded text to UTF-" ilk="function" name="imap_utf8" returns="string" signature="imap_utf8(string mime_encoded_text)" src="php_imap.c" /&gt;
      &lt;scope doc="Decode a modified UTF- string" ilk="function" name="imap_utf7_decode" returns="string" signature="imap_utf7_decode(string buf)" src="php_imap.c" /&gt;
      &lt;scope doc="Encode a string in modified UTF-" ilk="function" name="imap_utf7_encode" returns="string" signature="imap_utf7_encode(string buf)" src="php_imap.c" /&gt;
      &lt;scope doc="Encode a UTF- string to modified UTF-" ilk="function" name="imap_utf8_to_mutf7" returns="string" signature="imap_utf8_to_mutf7(string in)" src="php_imap.c" /&gt;
      &lt;scope doc="Decode a modified UTF- string to UTF-" ilk="function" name="imap_mutf7_to_utf8" returns="string" signature="imap_mutf7_to_utf8(string in)" src="php_imap.c" /&gt;
      &lt;scope doc="Sets flags on messages" ilk="function" name="imap_setflag_full" returns="bool" signature="imap_setflag_full(resource stream_id, string sequence, string flag [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Clears flags on messages" ilk="function" name="imap_clearflag_full" returns="bool" signature="imap_clearflag_full(resource stream_id, string sequence, string flag [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Sort an array of message headers optionally including&amp;#xA;only messages that meet specified criteria" ilk="function" name="imap_sort" returns="array" signature="imap_sort(resource stream_id, int criteria, int reverse [, int options [, string search_criteria [, string charset]]])" src="php_imap.c" /&gt;
      &lt;scope doc="Get the full unfiltered header for a message" ilk="function" name="imap_fetchheader" returns="string" signature="imap_fetchheader(resource stream_id, int msg_no [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Get the unique message id associated with a standard&amp;#xA;sequential message number" ilk="function" name="imap_uid" returns="int" signature="imap_uid(resource stream_id, int msg_no)" src="php_imap.c" /&gt;
      &lt;scope doc="Get the sequence number associated with a UID" ilk="function" name="imap_msgno" returns="int" signature="imap_msgno(resource stream_id, int unique_msg_id)" src="php_imap.c" /&gt;
      &lt;scope doc="Get status info from a mailbox" ilk="function" name="imap_status" returns="object" signature="imap_status(resource stream_id, string mailbox, int options)" src="php_imap.c" /&gt;
      &lt;scope doc="Read the structure of a specified body section of a&amp;#xA;specific message" ilk="function" name="imap_bodystruct" returns="object" signature="imap_bodystruct(resource stream_id, int msg_no, string section)" src="php_imap.c" /&gt;
      &lt;scope doc="Read an overview of the information in the headers of&amp;#xA;the given message sequence" ilk="function" name="imap_fetch_overview" returns="array" signature="imap_fetch_overview(resource stream_id, string sequence [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Create a MIME message based on given envelope and body&amp;#xA;sections" ilk="function" name="imap_mail_compose" returns="string" signature="imap_mail_compose(array envelope, array body)" src="php_imap.c" /&gt;
      &lt;scope doc="Send an email message" ilk="function" name="imap_mail" returns="bool" signature="imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])" src="php_imap.c" /&gt;
      &lt;scope doc="Return a list of messages matching the given criteria" ilk="function" name="imap_search" returns="array" signature="imap_search(resource stream_id, string criteria [, int options [, string charset]])" src="php_imap.c" /&gt;
      &lt;scope doc="Returns an array of all IMAP alerts that have been&amp;#xA;generated since the last page load or since the last" ilk="function" name="imap_alerts" returns="array" signature="imap_alerts(void)" src="php_imap.c" /&gt;
      &lt;scope doc="Returns an array of all IMAP errors generated since the&amp;#xA;last page load or since the last imap errors call" ilk="function" name="imap_errors" returns="array" signature="imap_errors(void)" src="php_imap.c" /&gt;
      &lt;scope doc="Returns the last error that was generated by an IMAP&amp;#xA;function The error stack is NOT cleared after this call" ilk="function" name="imap_last_error" returns="string" signature="imap_last_error(void)" src="php_imap.c" /&gt;
      &lt;scope doc="Decode mime header element in accordance with RFC and&amp;#xA;return array of objects containing &amp;apos;charset&amp;apos; encoding&amp;#xA;and decoded &amp;apos;text&amp;apos;" ilk="function" name="imap_mime_header_decode" returns="array" signature="imap_mime_header_decode(string str)" src="php_imap.c" /&gt;
      &lt;scope doc="Return threaded by REFERENCES tree" ilk="function" name="imap_thread" returns="array" signature="imap_thread(resource stream_id [, int options])" src="php_imap.c" /&gt;
      &lt;scope doc="Set or fetch imap timeout" ilk="function" name="imap_timeout" returns="mixed" signature="imap_timeout(int timeout_type [, int timeout])" src="php_imap.c" /&gt;
      &lt;scope doc="Calculate the sha hash of a string" ilk="function" name="sha1" returns="string" signature="sha1(string str [, bool raw_output])" src="sha1.c" /&gt;
      &lt;scope doc="Calculate the sha hash of given filename" ilk="function" name="sha1_file" returns="string" signature="sha1_file(string filename [, bool raw_output])" src="sha1.c" /&gt;
      &lt;scope doc="Generate a hash of a given input string Returns&amp;#xA;lowercase hexits by default" ilk="function" name="hash" returns="string" signature="hash(string algo, string data[, bool raw_output = false])" src="hash.c" /&gt;
      &lt;scope doc="Generate a hash of a given file Returns lowercase&amp;#xA;hexits by default" ilk="function" name="hash_file" returns="string" signature="hash_file(string algo, string filename[, bool raw_output = false])" src="hash.c" /&gt;
      &lt;scope doc="Generate a hash of a given input string with a key&amp;#xA;using HMAC Returns lowercase hexits by default" ilk="function" name="hash_hmac" returns="string" signature="hash_hmac(string algo, string data, string key[, bool raw_output = false])" src="hash.c" /&gt;
      &lt;scope doc="Generate a hash of a given file with a key using HMAC&amp;#xA;Returns lowercase hexits by default" ilk="function" name="hash_hmac_file" returns="string" signature="hash_hmac_file(string algo, string filename, string key[, bool raw_output = false])" src="hash.c" /&gt;
      &lt;scope doc="Initialize a hashing context" ilk="function" name="hash_init" returns="resource" signature="hash_init(string algo[, int options, string key])" src="hash.c" /&gt;
      &lt;scope doc="Pump data into the hashing algorithm" ilk="function" name="hash_update" returns="bool" signature="hash_update(resource context, string data)" src="hash.c" /&gt;
      &lt;scope doc="Pump data into the hashing algorithm from an open&amp;#xA;stream" ilk="function" name="hash_update_stream" returns="int" signature="hash_update_stream(resource context, resource handle[, integer length])" src="hash.c" /&gt;
      &lt;scope doc="Pump data into the hashing algorithm from a file" ilk="function" name="hash_update_file" returns="bool" signature="hash_update_file(resource context, string filename[, resource context])" src="hash.c" /&gt;
      &lt;scope doc="Output resulting digest" ilk="function" name="hash_final" returns="string" signature="hash_final(resource context[, bool raw_output=false])" src="hash.c" /&gt;
      &lt;scope doc="Copy hash resource" ilk="function" name="hash_copy" returns="resource" signature="hash_copy(resource context)" src="hash.c" /&gt;
      &lt;scope doc="Return a list of registered hashing algorithms" ilk="function" name="hash_algos" returns="array" signature="hash_algos(void)" src="hash.c" /&gt;
      &lt;scope doc="Generate a PBKDF hash of the given password and salt&amp;#xA;Returns lowercase hexits by default" ilk="function" name="hash_pbkdf2" returns="string" signature="hash_pbkdf2(string algo, string password, string salt, int iterations [, int length = 0, bool raw_output = false])" src="hash.c" /&gt;
      &lt;scope doc="Hash data with hash" ilk="function" name="mhash" returns="string" signature="mhash(int hash, string data [, string key])" src="hash.c" /&gt;
      &lt;scope doc="Gets the name of hash" ilk="function" name="mhash_get_hash_name" returns="string" signature="mhash_get_hash_name(int hash)" src="hash.c" /&gt;
      &lt;scope doc="Gets the number of available hashes" ilk="function" name="mhash_count" returns="int" signature="mhash_count(void)" src="hash.c" /&gt;
      &lt;scope doc="Gets the block size of hash" ilk="function" name="mhash_get_block_size" returns="int" signature="mhash_get_block_size(int hash)" src="hash.c" /&gt;
      &lt;scope doc="Generates a key using hash functions" ilk="function" name="mhash_keygen_s2k" returns="string" signature="mhash_keygen_s2k(int hash, string input_password, string salt, int bytes)" src="hash.c" /&gt;
      &lt;scope doc="Calculate the md hash of a string" ilk="function" name="md5" returns="string" signature="md5(string str, [ bool raw_output])" src="md5.c" /&gt;
      &lt;scope doc="Calculate the md hash of given filename" ilk="function" name="md5_file" returns="string" signature="md5_file(string filename [, bool raw_output])" src="md5.c" /&gt;
      &lt;scope doc="" ilk="function" name="gd_info" returns="array" signature="gd_info()" src="gd.c" /&gt;
      &lt;scope doc="Load a new font" ilk="function" name="imageloadfont" returns="int" signature="imageloadfont(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Set the line drawing styles for use with imageline and&amp;#xA;IMG COLOR STYLED" ilk="function" name="imagesetstyle" returns="bool" signature="imagesetstyle(resource im, array styles)" src="gd.c" /&gt;
      &lt;scope doc="Create a new true color image" ilk="function" name="imagecreatetruecolor" returns="resource" signature="imagecreatetruecolor(int x_size, int y_size)" src="gd.c" /&gt;
      &lt;scope doc="return true if the image uses truecolor" ilk="function" name="imageistruecolor" returns="bool" signature="imageistruecolor(resource im)" src="gd.c" /&gt;
      &lt;scope doc="Convert a true colour image to a palette based image&amp;#xA;with a number of colours optionally using dithering" ilk="function" name="imagetruecolortopalette" returns="void" signature="imagetruecolortopalette(resource im, bool ditherFlag, int colorsWanted)" src="gd.c" /&gt;
      &lt;scope doc="Makes the colors of the palette version of an image&amp;#xA;more closely match the true color version" ilk="function" name="imagecolormatch" returns="bool" signature="imagecolormatch(resource im1, resource im2)" src="gd.c" /&gt;
      &lt;scope doc="Set line thickness for drawing lines ellipses&amp;#xA;rectangles polygons etc" ilk="function" name="imagesetthickness" returns="bool" signature="imagesetthickness(resource im, int thickness)" src="gd.c" /&gt;
      &lt;scope doc="Draw an ellipse" ilk="function" name="imagefilledellipse" returns="bool" signature="imagefilledellipse(resource im, int cx, int cy, int w, int h, int color)" src="gd.c" /&gt;
      &lt;scope doc="Draw a filled partial ellipse" ilk="function" name="imagefilledarc" returns="bool" signature="imagefilledarc(resource im, int cx, int cy, int w, int h, int s, int e, int col, int style)" src="gd.c" /&gt;
      &lt;scope doc="Turn alpha blending mode on or off for the given image" ilk="function" name="imagealphablending" returns="bool" signature="imagealphablending(resource im, bool on)" src="gd.c" /&gt;
      &lt;scope doc="Include alpha channel to a saved image" ilk="function" name="imagesavealpha" returns="bool" signature="imagesavealpha(resource im, bool on)" src="gd.c" /&gt;
      &lt;scope doc="Set the alpha blending flag to use the bundled libgd&amp;#xA;layering effects" ilk="function" name="imagelayereffect" returns="bool" signature="imagelayereffect(resource im, int effect)" src="gd.c" /&gt;
      &lt;scope doc="Allocate a color with an alpha level Works for true&amp;#xA;color and palette based images" ilk="function" name="imagecolorallocatealpha" returns="int" signature="imagecolorallocatealpha(resource im, int red, int green, int blue, int alpha)" src="gd.c" /&gt;
      &lt;scope doc="Resolve Allocate a colour with an alpha level Works for&amp;#xA;true colour and palette based images" ilk="function" name="imagecolorresolvealpha" returns="int" signature="imagecolorresolvealpha(resource im, int red, int green, int blue, int alpha)" src="gd.c" /&gt;
      &lt;scope doc="Find the closest matching colour with alpha&amp;#xA;transparency" ilk="function" name="imagecolorclosestalpha" returns="int" signature="imagecolorclosestalpha(resource im, int red, int green, int blue, int alpha)" src="gd.c" /&gt;
      &lt;scope doc="Find exact match for colour with transparency" ilk="function" name="imagecolorexactalpha" returns="int" signature="imagecolorexactalpha(resource im, int red, int green, int blue, int alpha)" src="gd.c" /&gt;
      &lt;scope doc="Copy and resize part of an image using resampling to&amp;#xA;help ensure clarity" ilk="function" name="imagecopyresampled" returns="bool" signature="imagecopyresampled(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)" src="gd.c" /&gt;
      &lt;scope doc="Grab a window or its client area using a windows handle&amp;#xA;HWND property in COM instance" ilk="function" name="imagegrabwindow" returns="resource" signature="imagegrabwindow(int window_handle [, int client_area])" src="gd.c" /&gt;
      &lt;scope doc="Grab a screenshot" ilk="function" name="imagegrabscreen" returns="resource" signature="imagegrabscreen()" src="gd.c" /&gt;
      &lt;scope doc="Rotate an image using a custom angle" ilk="function" name="imagerotate" returns="resource" signature="imagerotate(resource src_im, float angle, int bgdcolor [, int ignoretransparent])" src="gd.c" /&gt;
      &lt;scope doc="Set the tile image to tile when filling image with the&amp;#xA;quot IMG COLOR TILED quot color" ilk="function" name="imagesettile" returns="bool" signature="imagesettile(resource image, resource tile)" src="gd.c" /&gt;
      &lt;scope doc="Set the brush image to brush when filling image with&amp;#xA;the quot IMG COLOR BRUSHED quot color" ilk="function" name="imagesetbrush" returns="bool" signature="imagesetbrush(resource image, resource brush)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image" ilk="function" name="imagecreate" returns="resource" signature="imagecreate(int x_size, int y_size)" src="gd.c" /&gt;
      &lt;scope doc="Return the types of images supported in a bitfield -&amp;#xA;GIF JPEG PNG WBMP XPM" ilk="function" name="imagetypes" returns="int" signature="imagetypes(void)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from the image stream in the string" ilk="function" name="imagecreatefromstring" returns="resource" signature="imagecreatefromstring(string image)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from GIF file or URL" ilk="function" name="imagecreatefromgif" returns="resource" signature="imagecreatefromgif(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from JPEG file or URL" ilk="function" name="imagecreatefromjpeg" returns="resource" signature="imagecreatefromjpeg(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from PNG file or URL" ilk="function" name="imagecreatefrompng" returns="resource" signature="imagecreatefrompng(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from WEBP file or URL" ilk="function" name="imagecreatefromwebp" returns="resource" signature="imagecreatefromwebp(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from XBM file or URL" ilk="function" name="imagecreatefromxbm" returns="resource" signature="imagecreatefromxbm(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from XPM file or URL" ilk="function" name="imagecreatefromxpm" returns="resource" signature="imagecreatefromxpm(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from WBMP file or URL" ilk="function" name="imagecreatefromwbmp" returns="resource" signature="imagecreatefromwbmp(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from GD file or URL" ilk="function" name="imagecreatefromgd" returns="resource" signature="imagecreatefromgd(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from GD file or URL" ilk="function" name="imagecreatefromgd2" returns="resource" signature="imagecreatefromgd2(string filename)" src="gd.c" /&gt;
      &lt;scope doc="Create a new image from a given part of GD file or URL" ilk="function" name="imagecreatefromgd2part" returns="resource" signature="imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height)" src="gd.c" /&gt;
      &lt;scope doc="Output XBM image to browser or file" ilk="function" name="imagexbm" returns="int" signature="imagexbm(int im, string filename [, int foreground])" src="gd.c" /&gt;
      &lt;scope doc="Output GIF image to browser or file" ilk="function" name="imagegif" returns="bool" signature="imagegif(resource im [, string filename])" src="gd.c" /&gt;
      &lt;scope doc="Output PNG image to browser or file" ilk="function" name="imagepng" returns="bool" signature="imagepng(resource im [, string filename])" src="gd.c" /&gt;
      &lt;scope doc="Output WEBP image to browser or file" ilk="function" name="imagewebp" returns="bool" signature="imagewebp(resource im [, string filename[, quality]] )" src="gd.c" /&gt;
      &lt;scope doc="Output JPEG image to browser or file" ilk="function" name="imagejpeg" returns="bool" signature="imagejpeg(resource im [, string filename [, int quality]])" src="gd.c" /&gt;
      &lt;scope doc="Output WBMP image to browser or file" ilk="function" name="imagewbmp" returns="bool" signature="imagewbmp(resource im [, string filename, [, int foreground]])" src="gd.c" /&gt;
      &lt;scope doc="Output GD image to browser or file" ilk="function" name="imagegd" returns="bool" signature="imagegd(resource im [, string filename])" src="gd.c" /&gt;
      &lt;scope doc="Output GD image to browser or file" ilk="function" name="imagegd2" returns="bool" signature="imagegd2(resource im [, string filename, [, int chunk_size, [, int type]]])" src="gd.c" /&gt;
      &lt;scope doc="Destroy an image" ilk="function" name="imagedestroy" returns="bool" signature="imagedestroy(resource im)" src="gd.c" /&gt;
      &lt;scope doc="Allocate a color for an image" ilk="function" name="imagecolorallocate" returns="int" signature="imagecolorallocate(resource im, int red, int green, int blue)" src="gd.c" /&gt;
      &lt;scope doc="Copy the palette from the src image onto the dst image" ilk="function" name="imagepalettecopy" returns="void" signature="imagepalettecopy(resource dst, resource src)" src="gd.c" /&gt;
      &lt;scope doc="Get the index of the color of a pixel" ilk="function" name="imagecolorat" returns="int" signature="imagecolorat(resource im, int x, int y)" src="gd.c" /&gt;
      &lt;scope doc="Get the index of the closest color to the specified&amp;#xA;color" ilk="function" name="imagecolorclosest" returns="int" signature="imagecolorclosest(resource im, int red, int green, int blue)" src="gd.c" /&gt;
      &lt;scope doc="Get the index of the color which has the hue white and&amp;#xA;blackness nearest to the given color" ilk="function" name="imagecolorclosesthwb" returns="int" signature="imagecolorclosesthwb(resource im, int red, int green, int blue)" src="gd.c" /&gt;
      &lt;scope doc="De-allocate a color for an image" ilk="function" name="imagecolordeallocate" returns="bool" signature="imagecolordeallocate(resource im, int index)" src="gd.c" /&gt;
      &lt;scope doc="Get the index of the specified color or its closest&amp;#xA;possible alternative" ilk="function" name="imagecolorresolve" returns="int" signature="imagecolorresolve(resource im, int red, int green, int blue)" src="gd.c" /&gt;
      &lt;scope doc="Get the index of the specified color" ilk="function" name="imagecolorexact" returns="int" signature="imagecolorexact(resource im, int red, int green, int blue)" src="gd.c" /&gt;
      &lt;scope doc="Set the color for the specified palette index" ilk="function" name="imagecolorset" returns="void" signature="imagecolorset(resource im, int col, int red, int green, int blue)" src="gd.c" /&gt;
      &lt;scope doc="Get the colors for an index" ilk="function" name="imagecolorsforindex" returns="array" signature="imagecolorsforindex(resource im, int col)" src="gd.c" /&gt;
      &lt;scope doc="Apply a gamma correction to a GD image" ilk="function" name="imagegammacorrect" returns="bool" signature="imagegammacorrect(resource im, float inputgamma, float outputgamma)" src="gd.c" /&gt;
      &lt;scope doc="Set a single pixel" ilk="function" name="imagesetpixel" returns="bool" signature="imagesetpixel(resource im, int x, int y, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw a line" ilk="function" name="imageline" returns="bool" signature="imageline(resource im, int x1, int y1, int x2, int y2, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw a dashed line" ilk="function" name="imagedashedline" returns="bool" signature="imagedashedline(resource im, int x1, int y1, int x2, int y2, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw a rectangle" ilk="function" name="imagerectangle" returns="bool" signature="imagerectangle(resource im, int x1, int y1, int x2, int y2, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw a filled rectangle" ilk="function" name="imagefilledrectangle" returns="bool" signature="imagefilledrectangle(resource im, int x1, int y1, int x2, int y2, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw a partial ellipse" ilk="function" name="imagearc" returns="bool" signature="imagearc(resource im, int cx, int cy, int w, int h, int s, int e, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw an ellipse" ilk="function" name="imageellipse" returns="bool" signature="imageellipse(resource im, int cx, int cy, int w, int h, int color)" src="gd.c" /&gt;
      &lt;scope doc="Flood fill to specific color" ilk="function" name="imagefilltoborder" returns="bool" signature="imagefilltoborder(resource im, int x, int y, int border, int col)" src="gd.c" /&gt;
      &lt;scope doc="Flood fill" ilk="function" name="imagefill" returns="bool" signature="imagefill(resource im, int x, int y, int col)" src="gd.c" /&gt;
      &lt;scope doc="Find out the number of colors in an image&amp;apos;s palette" ilk="function" name="imagecolorstotal" returns="int" signature="imagecolorstotal(resource im)" src="gd.c" /&gt;
      &lt;scope doc="Define a color as transparent" ilk="function" name="imagecolortransparent" returns="int" signature="imagecolortransparent(resource im [, int col])" src="gd.c" /&gt;
      &lt;scope doc="Enable or disable interlace" ilk="function" name="imageinterlace" returns="int" signature="imageinterlace(resource im [, int interlace])" src="gd.c" /&gt;
      &lt;scope doc="Draw a polygon" ilk="function" name="imagepolygon" returns="bool" signature="imagepolygon(resource im, array point, int num_points, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw a filled polygon" ilk="function" name="imagefilledpolygon" returns="bool" signature="imagefilledpolygon(resource im, array point, int num_points, int col)" src="gd.c" /&gt;
      &lt;scope doc="Get font width" ilk="function" name="imagefontwidth" returns="int" signature="imagefontwidth(int font)" src="gd.c" /&gt;
      &lt;scope doc="Get font height" ilk="function" name="imagefontheight" returns="int" signature="imagefontheight(int font)" src="gd.c" /&gt;
      &lt;scope doc="Draw a character" ilk="function" name="imagechar" returns="bool" signature="imagechar(resource im, int font, int x, int y, string c, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw a character rotated degrees counter-clockwise" ilk="function" name="imagecharup" returns="bool" signature="imagecharup(resource im, int font, int x, int y, string c, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw a string horizontally" ilk="function" name="imagestring" returns="bool" signature="imagestring(resource im, int font, int x, int y, string str, int col)" src="gd.c" /&gt;
      &lt;scope doc="Draw a string vertically - rotated degrees&amp;#xA;counter-clockwise" ilk="function" name="imagestringup" returns="bool" signature="imagestringup(resource im, int font, int x, int y, string str, int col)" src="gd.c" /&gt;
      &lt;scope doc="Copy part of an image" ilk="function" name="imagecopy" returns="bool" signature="imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)" src="gd.c" /&gt;
      &lt;scope doc="Merge one part of an image with another" ilk="function" name="imagecopymerge" returns="bool" signature="imagecopymerge(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)" src="gd.c" /&gt;
      &lt;scope doc="Merge one part of an image with another" ilk="function" name="imagecopymergegray" returns="bool" signature="imagecopymergegray(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)" src="gd.c" /&gt;
      &lt;scope doc="Copy and resize part of an image" ilk="function" name="imagecopyresized" returns="bool" signature="imagecopyresized(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)" src="gd.c" /&gt;
      &lt;scope doc="Get image width" ilk="function" name="imagesx" returns="int" signature="imagesx(resource im)" src="gd.c" /&gt;
      &lt;scope doc="Get image height" ilk="function" name="imagesy" returns="int" signature="imagesy(resource im)" src="gd.c" /&gt;
      &lt;scope doc="Give the bounding box of a text using fonts via&amp;#xA;freetype" ilk="function" name="imageftbbox" returns="array" signature="imageftbbox(float size, float angle, string font_file, string text [, array extrainfo])" src="gd.c" /&gt;
      &lt;scope doc="Write text to the image using fonts via freetype" ilk="function" name="imagefttext" returns="array" signature="imagefttext(resource im, float size, float angle, int x, int y, int col, string font_file, string text [, array extrainfo])" src="gd.c" /&gt;
      &lt;scope doc="Give the bounding box of a text using TrueType fonts" ilk="function" name="imagettfbbox" returns="array" signature="imagettfbbox(float size, float angle, string font_file, string text)" src="gd.c" /&gt;
      &lt;scope doc="Write text to the image using a TrueType font" ilk="function" name="imagettftext" returns="array" signature="imagettftext(resource im, float size, float angle, int x, int y, int col, string font_file, string text)" src="gd.c" /&gt;
      &lt;scope doc="Load a new font from specified file" ilk="function" name="imagepsloadfont" returns="resource" signature="imagepsloadfont(string pathname)" src="gd.c" /&gt;
      &lt;scope doc="Make a copy of a font for purposes like extending or&amp;#xA;reenconding" ilk="function" name="imagepscopyfont" returns="int" signature="imagepscopyfont(int font_index)" src="gd.c" /&gt;
      &lt;scope doc="Free memory used by a font" ilk="function" name="imagepsfreefont" returns="bool" signature="imagepsfreefont(resource font_index)" src="gd.c" /&gt;
      &lt;scope doc="To change a fonts character encoding vector" ilk="function" name="imagepsencodefont" returns="bool" signature="imagepsencodefont(resource font_index, string filename)" src="gd.c" /&gt;
      &lt;scope doc="Extend or or condense if extend lt a font" ilk="function" name="imagepsextendfont" returns="bool" signature="imagepsextendfont(resource font_index, float extend)" src="gd.c" /&gt;
      &lt;scope doc="Slant a font" ilk="function" name="imagepsslantfont" returns="bool" signature="imagepsslantfont(resource font_index, float slant)" src="gd.c" /&gt;
      &lt;scope doc="Rasterize a string over an image" ilk="function" name="imagepstext" returns="array" signature="imagepstext(resource image, string text, resource font, int size, int foreground, int background, int xcoord, int ycoord [, int space [, int tightness [, float angle [, int antialias])" src="gd.c" /&gt;
      &lt;scope doc="Return the bounding box needed by a string if&amp;#xA;rasterized" ilk="function" name="imagepsbbox" returns="array" signature="imagepsbbox(string text, resource font, int size [, int space, int tightness, float angle])" src="gd.c" /&gt;
      &lt;scope doc="Output WBMP image to browser or file" ilk="function" name="image2wbmp" returns="bool" signature="image2wbmp(resource im [, string filename [, int threshold]])" src="gd.c" /&gt;
      &lt;scope doc="Applies Filter an image using a custom angle" ilk="function" name="imagefilter" returns="bool" signature="imagefilter(resource src_im, int filtertype, [args] )" src="gd.c" /&gt;
      &lt;scope doc="Apply a x convolution matrix using coefficient div and&amp;#xA;offset" ilk="function" name="imageconvolution" returns="resource" signature="imageconvolution(resource src_im, array matrix3x3, double div, double offset)" src="gd.c" /&gt;
      &lt;scope doc="Flip an image in place horizontally vertically or both&amp;#xA;directions" ilk="function" name="imageflip" returns="void" signature="imageflip(resource im, int mode)" src="gd.c" /&gt;
      &lt;scope doc="Should antialiased functions used or not" ilk="function" name="imageantialias" returns="bool" signature="imageantialias(resource im, bool on)" src="gd.c" /&gt;
      &lt;scope doc="Crop an image using the given coordinates and size x y&amp;#xA;width and height" ilk="function" name="imagecrop" returns="void" signature="imagecrop(resource im, array rect)" src="gd.c" /&gt;
      &lt;scope doc="Crop an image automatically using one of the available&amp;#xA;modes" ilk="function" name="imagecropauto" returns="void" signature="imagecropauto(resource im [, int mode [, threshold [, color]]])" src="gd.c" /&gt;
      &lt;scope doc="Scale an image using the given new width and height" ilk="function" name="imagescale" returns="resource" signature="imagescale(resource im, new_width[, new_height[, method]])" src="gd.c" /&gt;
      &lt;scope doc="Return an image containing the affine tramsformed src&amp;#xA;image using an optional clipping area" ilk="function" name="imageaffine" returns="resource" signature="imageaffine(resource src, array affine[, array clip])" src="gd.c" /&gt;
      &lt;scope doc="Return an image containing the affine tramsformed src&amp;#xA;image using an optional clipping area" ilk="function" name="imageaffinematrixget" returns="array" signature="imageaffinematrixget(type[, options])" src="gd.c" /&gt;
      &lt;scope doc="Concat two matrices as in doing many ops in one go" ilk="function" name="imageaffineconcat" returns="array" signature="imageaffineconcat(array m1, array m2)" src="gd.c" /&gt;
      &lt;scope doc="Set the default interpolation method passing - or sets&amp;#xA;it to the libgd default bilinear" ilk="function" name="imagesetinterpolation" returns="resource" signature="imagesetinterpolation(resource im, [, method]])" src="gd.c" /&gt;
      &lt;scope doc="Reads a line" ilk="function" name="readline" returns="string" signature="readline([string prompt])" src="readline.c" /&gt;
      &lt;scope doc="Gets sets various internal readline variables" ilk="function" name="readline_info" returns="mixed" signature="readline_info([string varname [, string newvalue]])" src="readline.c" /&gt;
      &lt;scope doc="Adds a line to the history" ilk="function" name="readline_add_history" returns="bool" signature="readline_add_history(string prompt)" src="readline.c" /&gt;
      &lt;scope doc="Clears the history" ilk="function" name="readline_clear_history" returns="bool" signature="readline_clear_history(void)" src="readline.c" /&gt;
      &lt;scope doc="Lists the history" ilk="function" name="readline_list_history" returns="array" signature="readline_list_history(void)" src="readline.c" /&gt;
      &lt;scope doc="Reads the history" ilk="function" name="readline_read_history" returns="bool" signature="readline_read_history([string filename])" src="readline.c" /&gt;
      &lt;scope doc="Writes the history" ilk="function" name="readline_write_history" returns="bool" signature="readline_write_history([string filename])" src="readline.c" /&gt;
      &lt;scope doc="Readline completion function" ilk="function" name="readline_completion_function" returns="bool" signature="readline_completion_function(string funcname)" src="readline.c" /&gt;
      &lt;scope doc="Initializes the readline callback interface and&amp;#xA;terminal prints the prompt and returns immediately" ilk="function" name="readline_callback_handler_install" returns="void" signature="readline_callback_handler_install(string prompt, mixed callback)" src="readline.c" /&gt;
      &lt;scope doc="Informs the readline callback interface that a&amp;#xA;character is ready for input" ilk="function" name="readline_callback_read_char" returns="void" signature="readline_callback_read_char()" src="readline.c" /&gt;
      &lt;scope doc="Removes a previously installed callback handler and&amp;#xA;restores terminal settings" ilk="function" name="readline_callback_handler_remove" returns="bool" signature="readline_callback_handler_remove()" src="readline.c" /&gt;
      &lt;scope doc="Ask readline to redraw the display" ilk="function" name="readline_redisplay" returns="void" signature="readline_redisplay(void)" src="readline.c" /&gt;
      &lt;scope doc="Inform readline that the cursor has moved to a new line" ilk="function" name="readline_on_new_line" returns="void" signature="readline_on_new_line(void)" src="readline.c" /&gt;
      &lt;scope doc="Execute an external program" ilk="function" name="exec" returns="string" signature="exec(string command [, array &amp;amp;output [, int &amp;amp;return_value]])" src="exec.c" /&gt;
      &lt;scope doc="Execute an external program and display output" ilk="function" name="system" returns="int" signature="system(string command [, int &amp;amp;return_value])" src="exec.c" /&gt;
      &lt;scope doc="Execute an external program and display raw output" ilk="function" name="passthru" returns="void" signature="passthru(string command [, int &amp;amp;return_value])" src="exec.c" /&gt;
      &lt;scope doc="Escape shell metacharacters" ilk="function" name="escapeshellcmd" returns="string" signature="escapeshellcmd(string command)" src="exec.c" /&gt;
      &lt;scope doc="Quote and escape an argument for use in a shell command" ilk="function" name="escapeshellarg" returns="string" signature="escapeshellarg(string arg)" src="exec.c" /&gt;
      &lt;scope doc="Execute command via shell and return complete output as&amp;#xA;string" ilk="function" name="shell_exec" returns="string" signature="shell_exec(string cmd)" src="exec.c" /&gt;
      &lt;scope doc="Change the priority of the current process" ilk="function" name="proc_nice" returns="bool" signature="proc_nice(int priority)" src="exec.c" /&gt;
      &lt;scope doc="Calculate EZMLM list hash value" ilk="function" name="ezmlm_hash" returns="int" signature="ezmlm_hash(string addr)" src="mail.c" /&gt;
      &lt;scope doc="Send an email message" ilk="function" name="mail" returns="int" signature="mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])" src="mail.c" /&gt;
      &lt;scope doc="Hash a string" ilk="function" name="crypt" returns="string" signature="crypt(string str [, string salt])" src="crypt.c" /&gt;
      &lt;scope doc="Calculate Levenshtein distance between two strings" ilk="function" name="levenshtein" returns="int" signature="levenshtein(string str1, string str2[, int cost_ins, int cost_rep, int cost_del])" src="levenshtein.c" /&gt;
      &lt;scope doc="Return the absolute value of the number" ilk="function" name="abs" returns="int" signature="abs(int number)" src="math.c" /&gt;
      &lt;scope doc="Returns the next highest integer value of the number" ilk="function" name="ceil" returns="float" signature="ceil(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the next lowest integer value from the number" ilk="function" name="floor" returns="float" signature="floor(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the number rounded to specified precision" ilk="function" name="round" returns="float" signature="round(float number [, int precision [, int mode]])" src="math.c" /&gt;
      &lt;scope doc="Returns the sine of the number in radians" ilk="function" name="sin" returns="float" signature="sin(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the cosine of the number in radians" ilk="function" name="cos" returns="float" signature="cos(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the tangent of the number in radians" ilk="function" name="tan" returns="float" signature="tan(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the arc sine of the number in radians" ilk="function" name="asin" returns="float" signature="asin(float number)" src="math.c" /&gt;
      &lt;scope doc="Return the arc cosine of the number in radians" ilk="function" name="acos" returns="float" signature="acos(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the arc tangent of the number in radians" ilk="function" name="atan" returns="float" signature="atan(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the arc tangent of y x with the resulting&amp;#xA;quadrant determined by the signs of y and x" ilk="function" name="atan2" returns="float" signature="atan2(float y, float x)" src="math.c" /&gt;
      &lt;scope doc="Returns the hyperbolic sine of the number defined as&amp;#xA;exp number - exp -number" ilk="function" name="sinh" returns="float" signature="sinh(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the hyperbolic cosine of the number defined as&amp;#xA;exp number exp -number" ilk="function" name="cosh" returns="float" signature="cosh(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the hyperbolic tangent of the number defined as&amp;#xA;sinh number cosh number" ilk="function" name="tanh" returns="float" signature="tanh(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the inverse hyperbolic sine of the number i e&amp;#xA;the value whose hyperbolic sine is number" ilk="function" name="asinh" returns="float" signature="asinh(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the inverse hyperbolic cosine of the number i e&amp;#xA;the value whose hyperbolic cosine is number" ilk="function" name="acosh" returns="float" signature="acosh(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the inverse hyperbolic tangent of the number i&amp;#xA;e the value whose hyperbolic tangent is number" ilk="function" name="atanh" returns="float" signature="atanh(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns an approximation of pi" ilk="function" name="pi" returns="float" signature="pi(void)" src="math.c" /&gt;
      &lt;scope doc="Returns whether argument is finite" ilk="function" name="is_finite" returns="bool" signature="is_finite(float val)" src="math.c" /&gt;
      &lt;scope doc="Returns whether argument is infinite" ilk="function" name="is_infinite" returns="bool" signature="is_infinite(float val)" src="math.c" /&gt;
      &lt;scope doc="Returns whether argument is not a number" ilk="function" name="is_nan" returns="bool" signature="is_nan(float val)" src="math.c" /&gt;
      &lt;scope doc="Returns base raised to the power of exponent Returns&amp;#xA;integer result when possible" ilk="function" name="pow" returns="number" signature="pow(number base, number exponent)" src="math.c" /&gt;
      &lt;scope doc="Returns e raised to the power of the number" ilk="function" name="exp" returns="float" signature="exp(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns exp number - computed in a way that accurate&amp;#xA;even when the value of number is close to zero" ilk="function" name="expm1" returns="float" signature="expm1(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns log number computed in a way that accurate even&amp;#xA;when the value of number is close to zero" ilk="function" name="log1p" returns="float" signature="log1p(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the natural logarithm of the number or the base&amp;#xA;log if base is specified" ilk="function" name="log" returns="float" signature="log(float number, [float base])" src="math.c" /&gt;
      &lt;scope doc="Returns the base- logarithm of the number" ilk="function" name="log10" returns="float" signature="log10(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the square root of the number" ilk="function" name="sqrt" returns="float" signature="sqrt(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns sqrt num num num num" ilk="function" name="hypot" returns="float" signature="hypot(float num1, float num2)" src="math.c" /&gt;
      &lt;scope doc="Converts the number in degrees to the radian equivalent" ilk="function" name="deg2rad" returns="float" signature="deg2rad(float number)" src="math.c" /&gt;
      &lt;scope doc="Converts the radian number to the equivalent number in&amp;#xA;degrees" ilk="function" name="rad2deg" returns="float" signature="rad2deg(float number)" src="math.c" /&gt;
      &lt;scope doc="Returns the decimal equivalent of the binary number" ilk="function" name="bindec" returns="int" signature="bindec(string binary_number)" src="math.c" /&gt;
      &lt;scope doc="Returns the decimal equivalent of the hexadecimal&amp;#xA;number" ilk="function" name="hexdec" returns="int" signature="hexdec(string hexadecimal_number)" src="math.c" /&gt;
      &lt;scope doc="Returns the decimal equivalent of an octal string" ilk="function" name="octdec" returns="int" signature="octdec(string octal_number)" src="math.c" /&gt;
      &lt;scope doc="Returns a string containing a binary representation of&amp;#xA;the number" ilk="function" name="decbin" returns="string" signature="decbin(int decimal_number)" src="math.c" /&gt;
      &lt;scope doc="Returns a string containing an octal representation of&amp;#xA;the given number" ilk="function" name="decoct" returns="string" signature="decoct(int decimal_number)" src="math.c" /&gt;
      &lt;scope doc="Returns a string containing a hexadecimal&amp;#xA;representation of the given number" ilk="function" name="dechex" returns="string" signature="dechex(int decimal_number)" src="math.c" /&gt;
      &lt;scope doc="Converts a number in a string from any base lt to any&amp;#xA;base lt" ilk="function" name="base_convert" returns="string" signature="base_convert(string number, int frombase, int tobase)" src="math.c" /&gt;
      &lt;scope doc="Formats a number with grouped thousands" ilk="function" name="number_format" returns="string" signature="number_format(float number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])" src="math.c" /&gt;
      &lt;scope doc="Returns the remainder of dividing x by y as a float" ilk="function" name="fmod" returns="float" signature="fmod(float x, float y)" src="math.c" /&gt;
      &lt;scope doc="Dumps a string representation of variable to output" ilk="function" name="var_dump" returns="void" signature="var_dump(mixed var)" src="var.c" /&gt;
      &lt;scope doc="Dumps a string representation of an internal zend value&amp;#xA;to output" ilk="function" name="debug_zval_dump" returns="void" signature="debug_zval_dump(mixed var)" src="var.c" /&gt;
      &lt;scope doc="Outputs or returns a string representation of a&amp;#xA;variable" ilk="function" name="var_export" returns="mixed" signature="var_export(mixed var [, bool return])" src="var.c" /&gt;
      &lt;scope doc="Returns a string representation of variable which can&amp;#xA;later be unserialized" ilk="function" name="serialize" returns="string" signature="serialize(mixed variable)" src="var.c" /&gt;
      &lt;scope doc="Takes a string representation of variable and recreates&amp;#xA;it" ilk="function" name="unserialize" returns="mixed" signature="unserialize(string variable_representation)" src="var.c" /&gt;
      &lt;scope doc="Returns the allocated by PHP memory" ilk="function" name="memory_get_usage" returns="int" signature="memory_get_usage([real_usage])" src="var.c" /&gt;
      &lt;scope doc="Returns the peak allocated by PHP memory" ilk="function" name="memory_get_peak_usage" returns="int" signature="memory_get_peak_usage([real_usage])" src="var.c" /&gt;
      &lt;scope doc="Get PHP script owner&amp;apos;s UID" ilk="function" name="getmyuid" returns="int" signature="getmyuid(void)" src="pageinfo.c" /&gt;
      &lt;scope doc="Get PHP script owner&amp;apos;s GID" ilk="function" name="getmygid" returns="int" signature="getmygid(void)" src="pageinfo.c" /&gt;
      &lt;scope doc="Get current process ID" ilk="function" name="getmypid" returns="int" signature="getmypid(void)" src="pageinfo.c" /&gt;
      &lt;scope doc="Get the inode of the current script being parsed" ilk="function" name="getmyinode" returns="int" signature="getmyinode(void)" src="pageinfo.c" /&gt;
      &lt;scope doc="Get time of last page modification" ilk="function" name="getlastmod" returns="int" signature="getlastmod(void)" src="pageinfo.c" /&gt;
      &lt;scope doc="Returns either a string or a float containing the&amp;#xA;current time in seconds and microseconds" ilk="function" name="microtime" returns="mixed" signature="microtime([bool get_as_float])" src="microtime.c" /&gt;
      &lt;scope doc="Returns the current time as array" ilk="function" name="gettimeofday" returns="array" signature="gettimeofday([bool get_as_float])" src="microtime.c" /&gt;
      &lt;scope doc="Returns an array of usage statistics" ilk="function" name="getrusage" returns="array" signature="getrusage([int who])" src="microtime.c" /&gt;
      &lt;scope doc="kill a process opened by proc open" ilk="function" name="proc_terminate" returns="bool" signature="proc_terminate(resource process [, long signal])" src="proc_open.c" /&gt;
      &lt;scope doc="close a process opened by proc open" ilk="function" name="proc_close" returns="int" signature="proc_close(resource process)" src="proc_open.c" /&gt;
      &lt;scope doc="get information about a process opened by proc open" ilk="function" name="proc_get_status" returns="array" signature="proc_get_status(resource process)" src="proc_open.c" /&gt;
      &lt;scope doc="Run a process with more control over it&amp;apos;s file&amp;#xA;descriptors" ilk="function" name="proc_open" returns="resource" signature="proc_open(string command, array descriptorspec, array &amp;amp;pipes [, string cwd [, array env [, array other_options]]])" src="proc_open.c" /&gt;
      &lt;scope doc="Open connection to system logger" ilk="function" name="openlog" returns="bool" signature="openlog(string ident, int option, int facility)" src="syslog.c" /&gt;
      &lt;scope doc="Close connection to system logger" ilk="function" name="closelog" returns="bool" signature="closelog(void)" src="syslog.c" /&gt;
      &lt;scope doc="Generate a system log message" ilk="function" name="syslog" returns="bool" signature="syslog(int priority, string message)" src="syslog.c" /&gt;
      &lt;scope doc="Returns a value from the combined linear congruential&amp;#xA;generator" ilk="function" name="lcg_value" returns="float" signature="lcg_value()" src="lcg.c" /&gt;
      &lt;scope doc="Break english phrases down into their phonemes" ilk="function" name="metaphone" returns="string" signature="metaphone(string text[, int phones])" src="metaphone.c" /&gt;
      &lt;scope doc="Compares two quot PHP-standardized quot version number&amp;#xA;strings" ilk="function" name="version_compare" returns="int" signature="version_compare(string ver1, string ver2 [, string oper])" src="versioning.c" /&gt;
      &lt;scope doc="Encodes string using MIME base algorithm" ilk="function" name="base64_encode" returns="string" signature="base64_encode(string str)" src="base64.c" /&gt;
      &lt;scope doc="Decodes string using MIME base algorithm" ilk="function" name="base64_decode" returns="string" signature="base64_decode(string str[, bool strict])" src="base64.c" /&gt;
      &lt;scope doc="Creates a pair of connected indistinguishable socket&amp;#xA;streams" ilk="function" name="stream_socket_pair" returns="array" signature="stream_socket_pair(int domain, int type, int protocol)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Open a client connection to a remote address" ilk="function" name="stream_socket_client" returns="resource" signature="stream_socket_client(string remoteaddress [, long &amp;amp;errcode [, string &amp;amp;errstring [, double timeout [, long flags [, resource context]]]]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Create a server socket bound to localaddress" ilk="function" name="stream_socket_server" returns="resource" signature="stream_socket_server(string localaddress [, long &amp;amp;errcode [, string &amp;amp;errstring [, long flags [, resource context]]]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Accept a client connection from a server socket" ilk="function" name="stream_socket_accept" returns="resource" signature="stream_socket_accept(resource serverstream, [ double timeout [, string &amp;amp;peername ]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Returns either the locally bound or remote name for a&amp;#xA;socket stream" ilk="function" name="stream_socket_get_name" returns="string" signature="stream_socket_get_name(resource stream, bool want_peer)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Send data to a socket stream If target addr is&amp;#xA;specified it must be in dotted quad or ipv format" ilk="function" name="stream_socket_sendto" returns="long" signature="stream_socket_sendto(resouce stream, string data [, long flags [, string target_addr]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Receives data from a socket stream" ilk="function" name="stream_socket_recvfrom" returns="string" signature="stream_socket_recvfrom(resource stream, long amount [, long flags [, string &amp;amp;remote_addr]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Reads all remaining bytes or up to maxlen bytes from a&amp;#xA;stream and returns them as a string" ilk="function" name="stream_get_contents" returns="string" signature="stream_get_contents(resource source [, long maxlen [, long offset]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Reads up to maxlen bytes from source stream and writes&amp;#xA;them to dest stream" ilk="function" name="stream_copy_to_stream" returns="long" signature="stream_copy_to_stream(resource source, resource dest [, long maxlen [, long pos]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Retrieves header meta data from streams file pointers" ilk="function" name="stream_get_meta_data" returns="array" signature="stream_get_meta_data(resource fp)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Retrieves list of registered socket transports" ilk="function" name="stream_get_transports" returns="array" signature="stream_get_transports()" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Retrieves list of registered stream wrappers" ilk="function" name="stream_get_wrappers" returns="array" signature="stream_get_wrappers()" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Runs the select system call on the sets of streams with&amp;#xA;a timeout specified by tv sec and tv usec" ilk="function" name="stream_select" returns="int" signature="stream_select(array &amp;amp;read_streams, array &amp;amp;write_streams, array &amp;amp;except_streams, int tv_sec[, int tv_usec])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Retrieve options for a stream wrapper context" ilk="function" name="stream_context_get_options" returns="array" signature="stream_context_get_options(resource context" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Set an option for a wrapper" ilk="function" name="stream_context_set_option" returns="bool" signature="stream_context_set_option(resource context" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Set parameters for a file context" ilk="function" name="stream_context_set_params" returns="bool" signature="stream_context_set_params(resource context" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Get parameters of a file context" ilk="function" name="stream_context_get_params" returns="array" signature="stream_context_get_params(resource context" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Get a handle on the default file stream context and&amp;#xA;optionally set parameters" ilk="function" name="stream_context_get_default" returns="resource" signature="stream_context_get_default([array options])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Set default file stream context returns the context as&amp;#xA;a resource" ilk="function" name="stream_context_set_default" returns="resource" signature="stream_context_set_default(array options)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Create a file context and optionally set parameters" ilk="function" name="stream_context_create" returns="resource" signature="stream_context_create([array options[, array params]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Prepend a filter to a stream" ilk="function" name="stream_filter_prepend" returns="resource" signature="stream_filter_prepend(resource stream, string filtername[, int read_write[, string filterparams]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Append a filter to a stream" ilk="function" name="stream_filter_append" returns="resource" signature="stream_filter_append(resource stream, string filtername[, int read_write[, string filterparams]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Flushes any data in the filter&amp;apos;s internal buffer&amp;#xA;removes it from the chain and frees the resource" ilk="function" name="stream_filter_remove" returns="bool" signature="stream_filter_remove(resource stream_filter)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Read up to maxlen bytes from a stream or until the&amp;#xA;ending string is found" ilk="function" name="stream_get_line" returns="string" signature="stream_get_line(resource stream, int maxlen [, string ending])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Set blocking non-blocking mode on a socket or stream" ilk="function" name="stream_set_blocking" returns="bool" signature="stream_set_blocking(resource socket, int mode)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Set timeout on stream read to seconds microseonds" ilk="function" name="stream_set_timeout" returns="bool" signature="stream_set_timeout(resource stream, int seconds [, int microseconds])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Set file write buffer" ilk="function" name="stream_set_write_buffer" returns="int" signature="stream_set_write_buffer(resource fp, int buffer)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Set the stream chunk size" ilk="function" name="stream_set_chunk_size" returns="int" signature="stream_set_chunk_size(resource fp, int chunk_size)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Set file read buffer" ilk="function" name="stream_set_read_buffer" returns="int" signature="stream_set_read_buffer(resource fp, int buffer)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Enable or disable a specific kind of crypto on the&amp;#xA;stream" ilk="function" name="stream_socket_enable_crypto" returns="int" signature="stream_socket_enable_crypto(resource stream, bool enable [, int cryptokind [, resource sessionstream]])" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Determine what file will be opened by calls to fopen&amp;#xA;with a relative path" ilk="function" name="stream_resolve_include_path" returns="string" signature="stream_resolve_include_path(string filename)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="U" ilk="function" name="stream_is_local" returns="bool" signature="stream_is_local(resource stream" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Tells whether the stream supports locking through flock" ilk="function" name="stream_supports_lock" returns="bool" signature="stream_supports_lock(resource stream)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="causes all or part of a full-duplex connection on the&amp;#xA;socket associated with stream to be shut down If how" ilk="function" name="stream_socket_shutdown" returns="int" signature="stream_socket_shutdown(resource stream, int how)" src="streamsfuncs.c" /&gt;
      &lt;scope doc="Converts the binary representation of data to hex" ilk="function" name="bin2hex" returns="string" signature="bin2hex(string data)" src="string.c" /&gt;
      &lt;scope doc="Converts the hex representation of data to binary" ilk="function" name="hex2bin" returns="string" signature="hex2bin(string data)" src="string.c" /&gt;
      &lt;scope doc="Finds length of initial segment consisting entirely of&amp;#xA;characters found in mask If start or and length is&amp;#xA;provided works" ilk="function" name="strspn" returns="int" signature="strspn(string str, string mask [, start [, len]])" src="string.c" /&gt;
      &lt;scope doc="Finds length of initial segment consisting entirely of&amp;#xA;characters not found in mask If start or and length is&amp;#xA;provide" ilk="function" name="strcspn" returns="int" signature="strcspn(string str, string mask [, start [, len]])" src="string.c" /&gt;
      &lt;scope doc="Query language and locale information" ilk="function" name="nl_langinfo" returns="string" signature="nl_langinfo(int item)" src="string.c" /&gt;
      &lt;scope doc="Compares two strings using the current locale" ilk="function" name="strcoll" returns="int" signature="strcoll(string str1, string str2)" src="string.c" /&gt;
      &lt;scope doc="Strips whitespace from the beginning and end of a&amp;#xA;string" ilk="function" name="trim" returns="string" signature="trim(string str [, string character_mask])" src="string.c" /&gt;
      &lt;scope doc="Removes trailing whitespace" ilk="function" name="rtrim" returns="string" signature="rtrim(string str [, string character_mask])" src="string.c" /&gt;
      &lt;scope doc="Strips whitespace from the beginning of a string" ilk="function" name="ltrim" returns="string" signature="ltrim(string str [, string character_mask])" src="string.c" /&gt;
      &lt;scope doc="Wraps buffer to selected number of characters using&amp;#xA;string break char" ilk="function" name="wordwrap" returns="string" signature="wordwrap(string str [, int width [, string break [, boolean cut]]])" src="string.c" /&gt;
      &lt;scope doc="Splits a string on string separator and return array of&amp;#xA;components If limit is positive only limit number of&amp;#xA;components" ilk="function" name="explode" returns="array" signature="explode(string separator, string str [, int limit])" src="string.c" /&gt;
      &lt;scope doc="Joins array elements placing glue string between items&amp;#xA;and return one string&amp;#xA;join is an alias to implode" ilk="function" name="join" returns="string" signature="join([string glue,] array pieces)" /&gt;
      &lt;scope doc="Joins array elements placing glue string between items&amp;#xA;and return one string" ilk="function" name="implode" returns="string" signature="implode([string glue,] array pieces)" src="string.c" /&gt;
      &lt;scope doc="Tokenize a string" ilk="function" name="strtok" returns="string" signature="strtok([string str,] string token)" src="string.c" /&gt;
      &lt;scope doc="Makes a string uppercase" ilk="function" name="strtoupper" returns="string" signature="strtoupper(string str)" src="string.c" /&gt;
      &lt;scope doc="Makes a string lowercase" ilk="function" name="strtolower" returns="string" signature="strtolower(string str)" src="string.c" /&gt;
      &lt;scope doc="Returns the filename component of the path" ilk="function" name="basename" returns="string" signature="basename(string path [, string suffix])" src="string.c" /&gt;
      &lt;scope doc="Returns the directory name component of the path" ilk="function" name="dirname" returns="string" signature="dirname(string path)" src="string.c" /&gt;
      &lt;scope doc="Returns information about a certain string" ilk="function" name="pathinfo" returns="array" signature="pathinfo(string path[, int options])" src="string.c" /&gt;
      &lt;scope doc="Finds first occurrence of a string within another case&amp;#xA;insensitive" ilk="function" name="stristr" returns="string" signature="stristr(string haystack, string needle[, bool part])" src="string.c" /&gt;
      &lt;scope doc="Finds first occurrence of a string within another" ilk="function" name="strstr" returns="string" signature="strstr(string haystack, string needle[, bool part])" src="string.c" /&gt;
      &lt;scope doc="Finds first occurrence of a string within another&amp;#xA;strchr is an alias to strstr" ilk="function" name="strchr" returns="string" signature="strchr(string haystack, string needle[, bool part])" /&gt;
      &lt;scope doc="Finds position of first occurrence of a string within&amp;#xA;another" ilk="function" name="strpos" returns="int" signature="strpos(string haystack, string needle [, int offset])" src="string.c" /&gt;
      &lt;scope doc="Finds position of first occurrence of a string within&amp;#xA;another case insensitive" ilk="function" name="stripos" returns="int" signature="stripos(string haystack, string needle [, int offset])" src="string.c" /&gt;
      &lt;scope doc="Finds position of last occurrence of a string within&amp;#xA;another string" ilk="function" name="strrpos" returns="int" signature="strrpos(string haystack, string needle [, int offset])" src="string.c" /&gt;
      &lt;scope doc="Finds position of last occurrence of a string within&amp;#xA;another string" ilk="function" name="strripos" returns="int" signature="strripos(string haystack, string needle [, int offset])" src="string.c" /&gt;
      &lt;scope doc="Finds the last occurrence of a character in a string&amp;#xA;within another" ilk="function" name="strrchr" returns="string" signature="strrchr(string haystack, string needle)" src="string.c" /&gt;
      &lt;scope doc="Returns split line" ilk="function" name="chunk_split" returns="string" signature="chunk_split(string str [, int chunklen [, string ending]])" src="string.c" /&gt;
      &lt;scope doc="Returns part of a string" ilk="function" name="substr" returns="string" signature="substr(string str, int start [, int length])" src="string.c" /&gt;
      &lt;scope doc="Replaces part of a string with another string" ilk="function" name="substr_replace" returns="mixed" signature="substr_replace(mixed str, mixed repl, mixed start [, mixed length])" src="string.c" /&gt;
      &lt;scope doc="Quotes meta characters" ilk="function" name="quotemeta" returns="string" signature="quotemeta(string str)" src="string.c" /&gt;
      &lt;scope doc="Returns ASCII value of character" ilk="function" name="ord" returns="int" signature="ord(string character)" src="string.c" /&gt;
      &lt;scope doc="Converts ASCII code to a character" ilk="function" name="chr" returns="string" signature="chr(int ascii)" src="string.c" /&gt;
      &lt;scope doc="Makes a string&amp;apos;s first character uppercase" ilk="function" name="ucfirst" returns="string" signature="ucfirst(string str)" src="string.c" /&gt;
      &lt;scope doc="Make a string&amp;apos;s first character lowercase" ilk="function" name="lcfirst" returns="string" signature="lcfirst(string str)" src="string.c" /&gt;
      &lt;scope doc="Uppercase the first character of every word in a string" ilk="function" name="ucwords" returns="string" signature="ucwords(string str)" src="string.c" /&gt;
      &lt;scope doc="Translates characters in str using given translation&amp;#xA;tables" ilk="function" name="strtr" returns="string" signature="strtr(string str, string from[, string to])" src="string.c" /&gt;
      &lt;scope doc="Reverse a string" ilk="function" name="strrev" returns="string" signature="strrev(string str)" src="string.c" /&gt;
      &lt;scope doc="Calculates the similarity between two strings" ilk="function" name="similar_text" returns="int" signature="similar_text(string str1, string str2 [, float percent])" src="string.c" /&gt;
      &lt;scope doc="Escapes all chars mentioned in charlist with backslash&amp;#xA;It creates octal representations if asked to backslash&amp;#xA;characters with th bit" ilk="function" name="addcslashes" returns="string" signature="addcslashes(string str, string charlist)" src="string.c" /&gt;
      &lt;scope doc="Escapes single quote double quotes and backslash&amp;#xA;characters in a string with backslashes" ilk="function" name="addslashes" returns="string" signature="addslashes(string str)" src="string.c" /&gt;
      &lt;scope doc="Strips backslashes from a string Uses C-style&amp;#xA;conventions" ilk="function" name="stripcslashes" returns="string" signature="stripcslashes(string str)" src="string.c" /&gt;
      &lt;scope doc="Strips backslashes from a string" ilk="function" name="stripslashes" returns="string" signature="stripslashes(string str)" src="string.c" /&gt;
      &lt;scope doc="Replaces all occurrences of search in haystack with&amp;#xA;replace" ilk="function" name="str_replace" returns="mixed" signature="str_replace(mixed search, mixed replace, mixed subject [, int &amp;amp;replace_count])" src="string.c" /&gt;
      &lt;scope doc="Replaces all occurrences of search in haystack with&amp;#xA;replace case-insensitive" ilk="function" name="str_ireplace" returns="mixed" signature="str_ireplace(mixed search, mixed replace, mixed subject [, int &amp;amp;replace_count])" src="string.c" /&gt;
      &lt;scope doc="Converts logical Hebrew text to visual text" ilk="function" name="hebrev" returns="string" signature="hebrev(string str [, int max_chars_per_line])" src="string.c" /&gt;
      &lt;scope doc="Converts logical Hebrew text to visual text with&amp;#xA;newline conversion" ilk="function" name="hebrevc" returns="string" signature="hebrevc(string str [, int max_chars_per_line])" src="string.c" /&gt;
      &lt;scope doc="Converts newlines to HTML line breaks" ilk="function" name="nl2br" returns="string" signature="nl2br(string str [, bool is_xhtml])" src="string.c" /&gt;
      &lt;scope doc="Strips HTML and PHP tags from a string" ilk="function" name="strip_tags" returns="string" signature="strip_tags(string str [, string allowable_tags])" src="string.c" /&gt;
      &lt;scope doc="Set locale information" ilk="function" name="setlocale" returns="string" signature="setlocale(mixed category, string locale [, string ...])" src="string.c" /&gt;
      &lt;scope doc="Parses GET POST COOKIE data and sets global variables" ilk="function" name="parse_str" returns="void" signature="parse_str(string encoded_string [, array result])" src="string.c" /&gt;
      &lt;scope doc="Parse a CSV string into an array" ilk="function" name="str_getcsv" returns="array" signature="str_getcsv(string input[, string delimiter[, string enclosure[, string escape]]])" src="string.c" /&gt;
      &lt;scope doc="Returns the input string repeat mult times" ilk="function" name="str_repeat" returns="string" signature="str_repeat(string input, int mult)" src="string.c" /&gt;
      &lt;scope doc="Returns info about what characters are used in input" ilk="function" name="count_chars" returns="mixed" signature="count_chars(string input [, int mode])" src="string.c" /&gt;
      &lt;scope doc="Returns the result of string comparison using &amp;apos;natural&amp;apos;&amp;#xA;algorithm" ilk="function" name="strnatcmp" returns="int" signature="strnatcmp(string s1, string s2)" src="string.c" /&gt;
      &lt;scope doc="Returns numeric formatting information based on the&amp;#xA;current locale" ilk="function" name="localeconv" returns="array" signature="localeconv(void)" src="string.c" /&gt;
      &lt;scope doc="Returns the result of case-insensitive string&amp;#xA;comparison using &amp;apos;natural&amp;apos; algorithm" ilk="function" name="strnatcasecmp" returns="int" signature="strnatcasecmp(string s1, string s2)" src="string.c" /&gt;
      &lt;scope doc="Returns the number of times a substring occurs in the&amp;#xA;string" ilk="function" name="substr_count" returns="int" signature="substr_count(string haystack, string needle [, int offset [, int length]])" src="string.c" /&gt;
      &lt;scope doc="Returns input string padded on the left or right to&amp;#xA;specified length with pad string" ilk="function" name="str_pad" returns="string" signature="str_pad(string input, int pad_length [, string pad_string [, int pad_type]])" src="string.c" /&gt;
      &lt;scope doc="Implements an ANSI C compatible sscanf" ilk="function" name="sscanf" returns="mixed" signature="sscanf(string str, string format [, string ...])" src="string.c" /&gt;
      &lt;scope doc="Perform the rot transform on a string" ilk="function" name="str_rot13" returns="string" signature="str_rot13(string str)" src="string.c" /&gt;
      &lt;scope doc="Shuffles string One permutation of all possible is&amp;#xA;created" ilk="function" name="str_shuffle" returns="void" signature="str_shuffle(string str)" src="string.c" /&gt;
      &lt;scope doc="Counts the number of words inside a string If format of&amp;#xA;is specified then the function will return an array" ilk="function" name="str_word_count" returns="mixed" signature="str_word_count(string str, [int format [, string charlist]])" src="string.c" /&gt;
      &lt;scope doc="Convert monetary value s to string" ilk="function" name="money_format" returns="string" signature="money_format(string format , float value)" src="string.c" /&gt;
      &lt;scope doc="Convert a string to an array If split length is&amp;#xA;specified break the string down into chunks each split&amp;#xA;length" ilk="function" name="str_split" returns="array" signature="str_split(string str [, int split_length])" src="string.c" /&gt;
      &lt;scope doc="Search a string for any of a set of characters" ilk="function" name="strpbrk" returns="array" signature="strpbrk(string haystack, string char_list)" src="string.c" /&gt;
      &lt;scope doc="Binary safe optionally case insensitive comparison of&amp;#xA;strings from an offset up to length characters" ilk="function" name="substr_compare" returns="int" signature="substr_compare(string main_str, string str, int offset [, int length [, bool case_sensitivity]])" src="string.c" /&gt;
      &lt;scope doc="Get information about the capabilities of a browser If&amp;#xA;browser name is omitted or null HTTP USER AGENT is used" ilk="function" name="get_browser" returns="mixed" signature="get_browser([string browser_name [, bool return_array]])" src="browscap.c" /&gt;
      &lt;scope doc="Parse a URL and return its components" ilk="function" name="parse_url" returns="mixed" signature="parse_url(string url, [int url_component])" src="url.c" /&gt;
      &lt;scope doc="URL-encodes string" ilk="function" name="urlencode" returns="string" signature="urlencode(string str)" src="url.c" /&gt;
      &lt;scope doc="Decodes URL-encoded string" ilk="function" name="urldecode" returns="string" signature="urldecode(string str)" src="url.c" /&gt;
      &lt;scope doc="URL-encodes string" ilk="function" name="rawurlencode" returns="string" signature="rawurlencode(string str)" src="url.c" /&gt;
      &lt;scope doc="Decodes URL-encodes string" ilk="function" name="rawurldecode" returns="string" signature="rawurldecode(string str)" src="url.c" /&gt;
      &lt;scope doc="fetches all the headers sent by the server in response&amp;#xA;to a HTTP request" ilk="function" name="get_headers" returns="array" signature="get_headers(string url[, int format])" src="url.c" /&gt;
      &lt;scope doc="Portable file locking" ilk="function" name="flock" returns="bool" signature="flock(resource fp, int operation [, int &amp;amp;wouldblock])" src="file.c" /&gt;
      &lt;scope doc="Extracts all meta tag content attributes from a file&amp;#xA;and returns an array" ilk="function" name="get_meta_tags" returns="array" signature="get_meta_tags(string filename [, bool use_include_path])" src="file.c" /&gt;
      &lt;scope doc="Read the entire file into a string" ilk="function" name="file_get_contents" returns="string" signature="file_get_contents(string filename [, bool use_include_path [, resource context [, long offset [, long maxlen]]]])" src="file.c" /&gt;
      &lt;scope doc="Write Create a file with contents data and return the&amp;#xA;number of bytes written" ilk="function" name="file_put_contents" returns="int" signature="file_put_contents(string file, mixed data [, int flags [, resource context]])" src="file.c" /&gt;
      &lt;scope doc="Read entire file into an array" ilk="function" name="file" returns="array" signature="file(string filename [, int flags[, resource context]])" src="file.c" /&gt;
      &lt;scope doc="Create a unique filename in a directory" ilk="function" name="tempnam" returns="string" signature="tempnam(string dir, string prefix)" src="file.c" /&gt;
      &lt;scope doc="Create a temporary file that will be deleted&amp;#xA;automatically after use" ilk="function" name="tmpfile" returns="resource" signature="tmpfile(void)" src="file.c" /&gt;
      &lt;scope doc="Open a file or a URL and return a file pointer" ilk="function" name="fopen" returns="resource" signature="fopen(string filename, string mode [, bool use_include_path [, resource context]])" src="file.c" /&gt;
      &lt;scope doc="Close an open file pointer" ilk="function" name="fclose" returns="bool" signature="fclose(resource fp)" src="file.c" /&gt;
      &lt;scope doc="Execute a command and open either a read or a write&amp;#xA;pipe to it" ilk="function" name="popen" returns="resource" signature="popen(string command, string mode)" src="file.c" /&gt;
      &lt;scope doc="Close a file pointer opened by popen" ilk="function" name="pclose" returns="int" signature="pclose(resource fp)" src="file.c" /&gt;
      &lt;scope doc="Test for end-of-file on a file pointer" ilk="function" name="feof" returns="bool" signature="feof(resource fp)" src="file.c" /&gt;
      &lt;scope doc="Get a line from file pointer" ilk="function" name="fgets" returns="string" signature="fgets(resource fp[, int length])" src="file.c" /&gt;
      &lt;scope doc="Get a character from file pointer" ilk="function" name="fgetc" returns="string" signature="fgetc(resource fp)" src="file.c" /&gt;
      &lt;scope doc="Get a line from file pointer and strip HTML tags" ilk="function" name="fgetss" returns="string" signature="fgetss(resource fp [, int length [, string allowable_tags]])" src="file.c" /&gt;
      &lt;scope doc="Implements a mostly ANSI compatible fscanf" ilk="function" name="fscanf" returns="mixed" signature="fscanf(resource stream, string format [, string ...])" src="file.c" /&gt;
      &lt;scope doc="Binary-safe file write" ilk="function" name="fwrite" returns="int" signature="fwrite(resource fp, string str [, int length])" src="file.c" /&gt;
      &lt;scope doc="Flushes output" ilk="function" name="fflush" returns="bool" signature="fflush(resource fp)" src="file.c" /&gt;
      &lt;scope doc="Rewind the position of a file pointer" ilk="function" name="rewind" returns="bool" signature="rewind(resource fp)" src="file.c" /&gt;
      &lt;scope doc="Get file pointer&amp;apos;s read write position" ilk="function" name="ftell" returns="int" signature="ftell(resource fp)" src="file.c" /&gt;
      &lt;scope doc="Seek on a file pointer" ilk="function" name="fseek" returns="int" signature="fseek(resource fp, int offset [, int whence])" src="file.c" /&gt;
      &lt;scope doc="Create a directory" ilk="function" name="mkdir" returns="bool" signature="mkdir(string pathname [, int mode [, bool recursive [, resource context]]])" src="file.c" /&gt;
      &lt;scope doc="Remove a directory" ilk="function" name="rmdir" returns="bool" signature="rmdir(string dirname[, resource context])" src="file.c" /&gt;
      &lt;scope doc="Output a file or a URL" ilk="function" name="readfile" returns="int" signature="readfile(string filename [, bool use_include_path[, resource context]])" src="file.c" /&gt;
      &lt;scope doc="Return or change the umask" ilk="function" name="umask" returns="int" signature="umask([int mask])" src="file.c" /&gt;
      &lt;scope doc="Output all remaining data from a file pointer" ilk="function" name="fpassthru" returns="int" signature="fpassthru(resource fp)" src="file.c" /&gt;
      &lt;scope doc="Rename a file" ilk="function" name="rename" returns="bool" signature="rename(string old_name, string new_name[, resource context])" src="file.c" /&gt;
      &lt;scope doc="Delete a file" ilk="function" name="unlink" returns="bool" signature="unlink(string filename[, context context])" src="file.c" /&gt;
      &lt;scope doc="Truncate file to &amp;apos;size&amp;apos; length" ilk="function" name="ftruncate" returns="bool" signature="ftruncate(resource fp, int size)" src="file.c" /&gt;
      &lt;scope doc="Stat on a filehandle" ilk="function" name="fstat" returns="array" signature="fstat(resource fp)" src="file.c" /&gt;
      &lt;scope doc="Copy a file" ilk="function" name="copy" returns="bool" signature="copy(string source_file, string destination_file [, resource context])" src="file.c" /&gt;
      &lt;scope doc="Binary-safe file read" ilk="function" name="fread" returns="string" signature="fread(resource fp, int length)" src="file.c" /&gt;
      &lt;scope doc="Format line as CSV and write to file pointer" ilk="function" name="fputcsv" returns="int" signature="fputcsv(resource fp, array fields [, string delimiter [, string enclosure]])" src="file.c" /&gt;
      &lt;scope doc="Get line from file pointer and parse for CSV fields" ilk="function" name="fgetcsv" returns="array" signature="fgetcsv(resource fp [,int length [, string delimiter [, string enclosure [, string escape]]]])" src="file.c" /&gt;
      &lt;scope doc="Return the resolved path" ilk="function" name="realpath" returns="string" signature="realpath(string path)" src="file.c" /&gt;
      &lt;scope doc="Match filename against pattern" ilk="function" name="fnmatch" returns="bool" signature="fnmatch(string pattern, string filename [, int flags])" src="file.c" /&gt;
      &lt;scope doc="Returns directory path used for temporary files" ilk="function" name="sys_get_temp_dir" returns="string" signature="sys_get_temp_dir()" src="file.c" /&gt;
      &lt;scope doc="Get the host name of the current machine" ilk="function" name="gethostname" returns="string" signature="gethostname()" src="dns.c" /&gt;
      &lt;scope doc="Get the Internet host name corresponding to a given IP&amp;#xA;address" ilk="function" name="gethostbyaddr" returns="string" signature="gethostbyaddr(string ip_address)" src="dns.c" /&gt;
      &lt;scope doc="Get the IP address corresponding to a given Internet&amp;#xA;host name" ilk="function" name="gethostbyname" returns="string" signature="gethostbyname(string hostname)" src="dns.c" /&gt;
      &lt;scope doc="Return a list of IP addresses that a given hostname&amp;#xA;resolves to" ilk="function" name="gethostbynamel" returns="array" signature="gethostbynamel(string hostname)" src="dns.c" /&gt;
      &lt;scope doc="Check DNS records corresponding to a given Internet&amp;#xA;host name or IP address" ilk="function" name="dns_check_record" returns="bool" signature="dns_check_record(string host [, string type])" src="dns_win32.c" /&gt;
      &lt;scope doc="Get any Resource Record corresponding to a given&amp;#xA;Internet host name" ilk="function" name="dns_get_record" returns="false" signature="dns_get_record(string hostname [, int type[, array authns, array addtl]])" src="dns_win32.c" /&gt;
      &lt;scope doc="Get MX records corresponding to a given Internet host&amp;#xA;name" ilk="function" name="dns_get_mx" returns="bool" signature="dns_get_mx(string hostname, array mxhosts [, array weight])" src="dns.c" /&gt;
      &lt;scope doc="Return a formatted string" ilk="function" name="sprintf" returns="string" signature="sprintf(string format [, mixed arg1 [, mixed ...]])" src="formatted_print.c" /&gt;
      &lt;scope doc="Return a formatted string" ilk="function" name="vsprintf" returns="string" signature="vsprintf(string format, array args)" src="formatted_print.c" /&gt;
      &lt;scope doc="Output a formatted string" ilk="function" name="printf" returns="int" signature="printf(string format [, mixed arg1 [, mixed ...]])" src="formatted_print.c" /&gt;
      &lt;scope doc="Output a formatted string" ilk="function" name="vprintf" returns="int" signature="vprintf(string format, array args)" src="formatted_print.c" /&gt;
      &lt;scope doc="Output a formatted string into a stream" ilk="function" name="fprintf" returns="int" signature="fprintf(resource stream, string format [, mixed arg1 [, mixed ...]])" src="formatted_print.c" /&gt;
      &lt;scope doc="Output a formatted string into a stream" ilk="function" name="vfprintf" returns="int" signature="vfprintf(resource stream, string format, array args)" src="formatted_print.c" /&gt;
      &lt;scope doc="Takes one or more arguments and packs them into a&amp;#xA;binary string according to the format argument" ilk="function" name="pack" returns="string" signature="pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])" src="pack.c" /&gt;
      &lt;scope doc="Unpack binary string into named array elements&amp;#xA;according to format argument" ilk="function" name="unpack" returns="array" signature="unpack(string format, string input)" src="pack.c" /&gt;
      &lt;scope doc="Get total disk space for filesystem that path is on" ilk="function" name="disk_total_space" returns="float" signature="disk_total_space(string path)" src="filestat.c" /&gt;
      &lt;scope doc="Get free disk space for filesystem that path is on" ilk="function" name="disk_free_space" returns="float" signature="disk_free_space(string path)" src="filestat.c" /&gt;
      &lt;scope doc="Change file group" ilk="function" name="chgrp" returns="bool" signature="chgrp(string filename, mixed group)" src="filestat.c" /&gt;
      &lt;scope doc="Change symlink group" ilk="function" name="lchgrp" returns="bool" signature="lchgrp(string filename, mixed group)" src="filestat.c" /&gt;
      &lt;scope doc="Change file mode" ilk="function" name="chmod" returns="bool" signature="chmod(string filename, int mode)" src="filestat.c" /&gt;
      &lt;scope doc="Set modification time of file" ilk="function" name="touch" returns="bool" signature="touch(string filename [, int time [, int atime]])" src="filestat.c" /&gt;
      &lt;scope doc="Clear file stat cache" ilk="function" name="clearstatcache" returns="void" signature="clearstatcache([bool clear_realpath_cache[, string filename]])" src="filestat.c" /&gt;
      &lt;scope doc="Get file permissions" ilk="function" name="fileperms" returns="int" signature="fileperms(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Get file inode" ilk="function" name="fileinode" returns="int" signature="fileinode(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Get file size" ilk="function" name="filesize" returns="int" signature="filesize(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Get file owner" ilk="function" name="fileowner" returns="int" signature="fileowner(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Get file group" ilk="function" name="filegroup" returns="int" signature="filegroup(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Get last access time of file" ilk="function" name="fileatime" returns="int" signature="fileatime(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Get last modification time of file" ilk="function" name="filemtime" returns="int" signature="filemtime(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Get inode modification time of file" ilk="function" name="filectime" returns="int" signature="filectime(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Get file type" ilk="function" name="filetype" returns="string" signature="filetype(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Returns true if file can be written" ilk="function" name="is_writable" returns="bool" signature="is_writable(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Returns true if file can be read" ilk="function" name="is_readable" returns="bool" signature="is_readable(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Returns true if file is executable" ilk="function" name="is_executable" returns="bool" signature="is_executable(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Returns true if file is a regular file" ilk="function" name="is_file" returns="bool" signature="is_file(string filename)" src="filestat.c" /&gt;
      &lt;scope doc="Returns true if file is directory" ilk="function" name="is_dir" returns="bool" signature="is_dir(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Returns true if file is symbolic link" ilk="function" name="is_link" returns="bool" signature="is_link(string filename)" src="filestat.c" /&gt;
      &lt;scope doc="Returns true if filename exists" ilk="function" name="file_exists" returns="bool" signature="file_exists(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Give information about a file or symbolic link" ilk="function" name="lstat" returns="array" signature="lstat(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Give information about a file" ilk="function" name="stat" returns="array" signature="stat(string filename)" src="func_interceptors.c" /&gt;
      &lt;scope doc="Get current size of realpath cache" ilk="function" name="realpath_cache_size" returns="bool" signature="realpath_cache_size()" src="filestat.c" /&gt;
      &lt;scope doc="Get current size of realpath cache" ilk="function" name="realpath_cache_get" returns="bool" signature="realpath_cache_get()" src="filestat.c" /&gt;
      &lt;scope doc="Return a bucket object from the brigade for operating&amp;#xA;on" ilk="function" name="stream_bucket_make_writeable" returns="object" signature="stream_bucket_make_writeable(resource brigade)" src="user_filters.c" /&gt;
      &lt;scope doc="Prepend bucket to brigade" ilk="function" name="stream_bucket_prepend" returns="void" signature="stream_bucket_prepend(resource brigade, resource bucket)" src="user_filters.c" /&gt;
      &lt;scope doc="Append bucket to brigade" ilk="function" name="stream_bucket_append" returns="void" signature="stream_bucket_append(resource brigade, resource bucket)" src="user_filters.c" /&gt;
      &lt;scope doc="Create a new bucket for use on the current stream" ilk="function" name="stream_bucket_new" returns="resource" signature="stream_bucket_new(resource stream, string buffer)" src="user_filters.c" /&gt;
      &lt;scope doc="Returns a list of registered filters" ilk="function" name="stream_get_filters" returns="array" signature="stream_get_filters(void)" src="user_filters.c" /&gt;
      &lt;scope doc="Registers a custom filter handler class" ilk="function" name="stream_filter_register" returns="bool" signature="stream_filter_register(string filtername, string classname)" src="user_filters.c" /&gt;
      &lt;scope doc="Return the target of a symbolic link" ilk="function" name="readlink" returns="string" signature="readlink(string filename)" src="link_win32.c" /&gt;
      &lt;scope doc="Returns the st dev field of the UNIX C stat structure&amp;#xA;describing the link" ilk="function" name="linkinfo" returns="int" signature="linkinfo(string filename)" src="link_win32.c" /&gt;
      &lt;scope doc="Create a symbolic link" ilk="function" name="symlink" returns="int" signature="symlink(string target, string link)" src="link_win32.c" /&gt;
      &lt;scope doc="Create a hard link" ilk="function" name="link" returns="int" signature="link(string target, string link)" src="link_win32.c" /&gt;
      &lt;scope doc="Seeds random number generator" ilk="function" name="srand" returns="void" signature="srand([int seed])" src="rand.c" /&gt;
      &lt;scope doc="Seeds Mersenne Twister random number generator" ilk="function" name="mt_srand" returns="void" signature="mt_srand([int seed])" src="rand.c" /&gt;
      &lt;scope doc="Returns a random number" ilk="function" name="rand" returns="int" signature="rand([int min, int max])" src="rand.c" /&gt;
      &lt;scope doc="Returns a random number from Mersenne Twister" ilk="function" name="mt_rand" returns="int" signature="mt_rand([int min, int max])" src="rand.c" /&gt;
      &lt;scope doc="Returns the maximum value a random number can have" ilk="function" name="getrandmax" returns="int" signature="getrandmax(void)" src="rand.c" /&gt;
      &lt;scope doc="Returns the maximum value a random number from Mersenne&amp;#xA;Twister can have" ilk="function" name="mt_getrandmax" returns="int" signature="mt_getrandmax(void)" src="rand.c" /&gt;
      &lt;scope doc="uuencode a string" ilk="function" name="convert_uuencode" returns="string" signature="convert_uuencode(string data)" src="uuencode.c" /&gt;
      &lt;scope doc="decode a uuencoded string" ilk="function" name="convert_uudecode" returns="string" signature="convert_uudecode(string data)" src="uuencode.c" /&gt;
      &lt;scope doc="Returns the type of the variable" ilk="function" name="gettype" returns="string" signature="gettype(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Set the type of the variable" ilk="function" name="settype" returns="bool" signature="settype(mixed var, string type)" src="type.c" /&gt;
      &lt;scope doc="Get the integer value of a variable using the optional&amp;#xA;base for the conversion" ilk="function" name="intval" returns="int" signature="intval(mixed var [, int base])" src="type.c" /&gt;
      &lt;scope doc="Get the float value of a variable" ilk="function" name="floatval" returns="float" signature="floatval(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Get the boolean value of a variable" ilk="function" name="boolval" returns="bool" signature="boolval(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Get the string value of a variable" ilk="function" name="strval" returns="string" signature="strval(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Returns true if variable is null" ilk="function" name="is_null" returns="bool" signature="is_null(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Returns true if variable is a resource" ilk="function" name="is_resource" returns="bool" signature="is_resource(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Returns true if variable is a boolean" ilk="function" name="is_bool" returns="bool" signature="is_bool(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Returns true if variable is a long integer" ilk="function" name="is_long" returns="bool" signature="is_long(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Returns true if variable is float point" ilk="function" name="is_float" returns="bool" signature="is_float(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Returns true if variable is a string" ilk="function" name="is_string" returns="bool" signature="is_string(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Returns true if variable is an array" ilk="function" name="is_array" returns="bool" signature="is_array(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Returns true if variable is an object" ilk="function" name="is_object" returns="bool" signature="is_object(mixed var)" src="type.c" /&gt;
      &lt;scope doc="Returns true if value is a number or a numeric string" ilk="function" name="is_numeric" returns="bool" signature="is_numeric(mixed value)" src="type.c" /&gt;
      &lt;scope doc="Returns true if value is a scalar" ilk="function" name="is_scalar" returns="bool" signature="is_scalar(mixed value)" src="type.c" /&gt;
      &lt;scope doc="Returns true if var is callable" ilk="function" name="is_callable" returns="bool" signature="is_callable(mixed var [, bool syntax_only [, string callable_name]])" src="type.c" /&gt;
      &lt;scope doc="Sort an array by key value in reverse order" ilk="function" name="krsort" returns="bool" signature="krsort(array &amp;amp;array_arg [, int sort_flags])" src="array.c" /&gt;
      &lt;scope doc="Sort an array by key" ilk="function" name="ksort" returns="bool" signature="ksort(array &amp;amp;array_arg [, int sort_flags])" src="array.c" /&gt;
      &lt;scope doc="Count the number of elements in a variable usually an&amp;#xA;array" ilk="function" name="count" returns="int" signature="count(mixed var [, int mode])" src="array.c" /&gt;
      &lt;scope doc="Sort an array using natural sort" ilk="function" name="natsort" returns="void" signature="natsort(array &amp;amp;array_arg)" src="array.c" /&gt;
      &lt;scope doc="Sort an array using case-insensitive natural sort" ilk="function" name="natcasesort" returns="void" signature="natcasesort(array &amp;amp;array_arg)" src="array.c" /&gt;
      &lt;scope doc="Sort an array and maintain index association" ilk="function" name="asort" returns="bool" signature="asort(array &amp;amp;array_arg [, int sort_flags])" src="array.c" /&gt;
      &lt;scope doc="Sort an array in reverse order and maintain index&amp;#xA;association" ilk="function" name="arsort" returns="bool" signature="arsort(array &amp;amp;array_arg [, int sort_flags])" src="array.c" /&gt;
      &lt;scope doc="Sort an array" ilk="function" name="sort" returns="bool" signature="sort(array &amp;amp;array_arg [, int sort_flags])" src="array.c" /&gt;
      &lt;scope doc="Sort an array in reverse order" ilk="function" name="rsort" returns="bool" signature="rsort(array &amp;amp;array_arg [, int sort_flags])" src="array.c" /&gt;
      &lt;scope doc="Sort an array by values using a user-defined comparison&amp;#xA;function" ilk="function" name="usort" returns="bool" signature="usort(array array_arg, string cmp_function)" src="array.c" /&gt;
      &lt;scope doc="Sort an array with a user-defined comparison function&amp;#xA;and maintain index association" ilk="function" name="uasort" returns="bool" signature="uasort(array array_arg, string cmp_function)" src="array.c" /&gt;
      &lt;scope doc="Sort an array by keys using a user-defined comparison&amp;#xA;function" ilk="function" name="uksort" returns="bool" signature="uksort(array array_arg, string cmp_function)" src="array.c" /&gt;
      &lt;scope doc="Advances array argument&amp;apos;s internal pointer to the last&amp;#xA;element and return it" ilk="function" name="end" returns="mixed" signature="end(array array_arg)" src="array.c" /&gt;
      &lt;scope doc="Move array argument&amp;apos;s internal pointer to the previous&amp;#xA;element and return it" ilk="function" name="prev" returns="mixed" signature="prev(array array_arg)" src="array.c" /&gt;
      &lt;scope doc="Move array argument&amp;apos;s internal pointer to the next&amp;#xA;element and return it" ilk="function" name="next" returns="mixed" signature="next(array array_arg)" src="array.c" /&gt;
      &lt;scope doc="Set array argument&amp;apos;s internal pointer to the first&amp;#xA;element and return it" ilk="function" name="reset" returns="mixed" signature="reset(array array_arg)" src="array.c" /&gt;
      &lt;scope doc="throws RuntimeException throws InvalidArgumentException&amp;#xA;Return an array of all registered Iterator instances&amp;#xA;current result" ilk="function" name="current" returns="array" signature="current()" src="spl_observer.c" /&gt;
      &lt;scope doc="Return the key of the element currently pointed to by&amp;#xA;the internal array pointer" ilk="function" name="key" returns="mixed" signature="key(array array_arg)" src="array.c" /&gt;
      &lt;scope doc="Return the lowest value in an array or a series of&amp;#xA;arguments" ilk="function" name="min" returns="mixed" signature="min(mixed arg1 [, mixed arg2 [, mixed ...]])" src="array.c" /&gt;
      &lt;scope doc="Return the highest value in an array or a series of&amp;#xA;arguments" ilk="function" name="max" returns="mixed" signature="max(mixed arg1 [, mixed arg2 [, mixed ...]])" src="array.c" /&gt;
      &lt;scope doc="Apply a user function to every member of an array" ilk="function" name="array_walk" returns="bool" signature="array_walk(array input, string funcname [, mixed userdata])" src="array.c" /&gt;
      &lt;scope doc="Apply a user function recursively to every member of an&amp;#xA;array" ilk="function" name="array_walk_recursive" returns="bool" signature="array_walk_recursive(array input, string funcname [, mixed userdata])" src="array.c" /&gt;
      &lt;scope doc="Checks if the given value exists in the array" ilk="function" name="in_array" returns="bool" signature="in_array(mixed needle, array haystack [, bool strict])" src="array.c" /&gt;
      &lt;scope doc="Searches the array for a given value and returns the&amp;#xA;corresponding key if successful" ilk="function" name="array_search" returns="mixed" signature="array_search(mixed needle, array haystack [, bool strict])" src="array.c" /&gt;
      &lt;scope doc="Imports variables into symbol table from an array" ilk="function" name="extract" returns="int" signature="extract(array var_array [, int extract_type [, string prefix]])" src="array.c" /&gt;
      &lt;scope doc="Creates a hash containing variables and their values" ilk="function" name="compact" returns="array" signature="compact(mixed var_names [, mixed ...])" src="array.c" /&gt;
      &lt;scope doc="Create an array containing num elements starting with&amp;#xA;index start key each initialized to val" ilk="function" name="array_fill" returns="array" signature="array_fill(int start_key, int num, mixed val)" src="array.c" /&gt;
      &lt;scope doc="Create an array using the elements of the first&amp;#xA;parameter as keys each initialized to val" ilk="function" name="array_fill_keys" returns="array" signature="array_fill_keys(array keys, mixed val)" src="array.c" /&gt;
      &lt;scope doc="Create an array containing the range of integers or&amp;#xA;characters from low to high inclusive" ilk="function" name="range" returns="array" signature="range(mixed low, mixed high[, int step])" src="array.c" /&gt;
      &lt;scope doc="Randomly shuffle the contents of an array" ilk="function" name="shuffle" returns="bool" signature="shuffle(array array_arg)" src="array.c" /&gt;
      &lt;scope doc="Pushes elements onto the end of the array" ilk="function" name="array_push" returns="int" signature="array_push(array stack, mixed var [, mixed ...])" src="array.c" /&gt;
      &lt;scope doc="Pops an element off the end of the array" ilk="function" name="array_pop" returns="mixed" signature="array_pop(array stack)" src="array.c" /&gt;
      &lt;scope doc="Pops an element off the beginning of the array" ilk="function" name="array_shift" returns="mixed" signature="array_shift(array stack)" src="array.c" /&gt;
      &lt;scope doc="Pushes elements onto the beginning of the array" ilk="function" name="array_unshift" returns="int" signature="array_unshift(array stack, mixed var [, mixed ...])" src="array.c" /&gt;
      &lt;scope doc="Removes the elements designated by offset and length&amp;#xA;and replace them with supplied array" ilk="function" name="array_splice" returns="array" signature="array_splice(array input, int offset [, int length [, array replacement]])" src="array.c" /&gt;
      &lt;scope doc="Returns elements specified by offset and length" ilk="function" name="array_slice" returns="array" signature="array_slice(array input, int offset [, int length [, bool preserve_keys]])" src="array.c" /&gt;
      &lt;scope doc="Merges elements from passed arrays into one array" ilk="function" name="array_merge" returns="array" signature="array_merge(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="Recursively merges elements from passed arrays into one&amp;#xA;array" ilk="function" name="array_merge_recursive" returns="array" signature="array_merge_recursive(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="Replaces elements from passed arrays into one array" ilk="function" name="array_replace" returns="array" signature="array_replace(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="Recursively replaces elements from passed arrays into&amp;#xA;one array" ilk="function" name="array_replace_recursive" returns="array" signature="array_replace_recursive(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="Return just the keys from the input array optionally&amp;#xA;only for the specified search value" ilk="function" name="array_keys" returns="array" signature="array_keys(array input [, mixed search_value[, bool strict]])" src="array.c" /&gt;
      &lt;scope doc="Return just the values from the input array" ilk="function" name="array_values" returns="array" signature="array_values(array input)" src="array.c" /&gt;
      &lt;scope doc="Return the value as key and the frequency of that value&amp;#xA;in input as value" ilk="function" name="array_count_values" returns="array" signature="array_count_values(array input)" src="array.c" /&gt;
      &lt;scope doc="Return the values from a single column in the input&amp;#xA;array identified by the value key and optionally&amp;#xA;indexed by" ilk="function" name="array_column" returns="array" signature="array_column(array input, mixed column_key[, mixed index_key])" src="array.c" /&gt;
      &lt;scope doc="Return input as a new array with the order of the&amp;#xA;entries reversed" ilk="function" name="array_reverse" returns="array" signature="array_reverse(array input [, bool preserve keys])" src="array.c" /&gt;
      &lt;scope doc="Returns a copy of input array padded with pad value to&amp;#xA;size pad size" ilk="function" name="array_pad" returns="array" signature="array_pad(array input, int pad_size, mixed pad_value)" src="array.c" /&gt;
      &lt;scope doc="Return array with key lt - gt value flipped" ilk="function" name="array_flip" returns="array" signature="array_flip(array input)" src="array.c" /&gt;
      &lt;scope doc="Retuns an array with all string keys lowercased or&amp;#xA;uppercased" ilk="function" name="array_change_key_case" returns="array" signature="array_change_key_case(array input [, int case=CASE_LOWER])" src="array.c" /&gt;
      &lt;scope doc="Removes duplicate values from array" ilk="function" name="array_unique" returns="array" signature="array_unique(array input [, int sort_flags])" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have keys which are&amp;#xA;present in all the other arguments Kind of equivalent&amp;#xA;to" ilk="function" name="array_intersect_key" returns="array" signature="array_intersect_key(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have keys which are&amp;#xA;present in all the other arguments Kind of equivalent&amp;#xA;to" ilk="function" name="array_intersect_ukey" returns="array" signature="array_intersect_ukey(array arr1, array arr2 [, array ...], callback key_compare_func)" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;present in all the other arguments" ilk="function" name="array_intersect" returns="array" signature="array_intersect(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;present in all the other arguments Data is compared by" ilk="function" name="array_uintersect" returns="array" signature="array_uintersect(array arr1, array arr2 [, array ...], callback data_compare_func)" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;present in all the other arguments Keys are used to" ilk="function" name="array_intersect_assoc" returns="array" signature="array_intersect_assoc(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="U Returns the entries of arr that have values which are&amp;#xA;present in all the other arguments Keys are used" ilk="function" name="array_intersect_uassoc" returns="array" signature="array_intersect_uassoc(array arr1, array arr2 [, array ...], callback key_compare_func)" src="array.c" /&gt;
      &lt;scope doc="U Returns the entries of arr that have values which are&amp;#xA;present in all the other arguments Keys are used" ilk="function" name="array_uintersect_assoc" returns="array" signature="array_uintersect_assoc(array arr1, array arr2 [, array ...], callback data_compare_func)" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;present in all the other arguments Keys are used to" ilk="function" name="array_uintersect_uassoc" returns="array" signature="array_uintersect_uassoc(array arr1, array arr2 [, array ...], callback data_compare_func, callback key_compare_func)" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have keys which are not&amp;#xA;present in any of the others arguments This function" ilk="function" name="array_diff_key" returns="array" signature="array_diff_key(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have keys which are not&amp;#xA;present in any of the others arguments User supplied" ilk="function" name="array_diff_ukey" returns="array" signature="array_diff_ukey(array arr1, array arr2 [, array ...], callback key_comp_func)" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;not present in any of the others arguments" ilk="function" name="array_diff" returns="array" signature="array_diff(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;not present in any of the others arguments Elements are" ilk="function" name="array_udiff" returns="array" signature="array_udiff(array arr1, array arr2 [, array ...], callback data_comp_func)" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;not present in any of the others arguments but do" ilk="function" name="array_diff_assoc" returns="array" signature="array_diff_assoc(array arr1, array arr2 [, array ...])" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;not present in any of the others arguments but do" ilk="function" name="array_diff_uassoc" returns="array" signature="array_diff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func)" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;not present in any of the others arguments but do" ilk="function" name="array_udiff_assoc" returns="array" signature="array_udiff_assoc(array arr1, array arr2 [, array ...], callback key_comp_func)" src="array.c" /&gt;
      &lt;scope doc="Returns the entries of arr that have values which are&amp;#xA;not present in any of the others arguments but do" ilk="function" name="array_udiff_uassoc" returns="array" signature="array_udiff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func, callback key_comp_func)" src="array.c" /&gt;
      &lt;scope doc="Sort multiple arrays at once similar to how ORDER BY&amp;#xA;clause works in SQL" ilk="function" name="array_multisort" returns="bool" signature="array_multisort(array ar1 [, SORT_ASC" src="array.c" /&gt;
      &lt;scope doc="Return key keys for random entry entries in the array" ilk="function" name="array_rand" returns="mixed" signature="array_rand(array input [, int num_req])" src="array.c" /&gt;
      &lt;scope doc="Returns the sum of the array entries" ilk="function" name="array_sum" returns="mixed" signature="array_sum(array input)" src="array.c" /&gt;
      &lt;scope doc="Returns the product of the array entries" ilk="function" name="array_product" returns="mixed" signature="array_product(array input)" src="array.c" /&gt;
      &lt;scope doc="Iteratively reduce the array to a single value via the&amp;#xA;callback" ilk="function" name="array_reduce" returns="mixed" signature="array_reduce(array input, mixed callback [, mixed initial])" src="array.c" /&gt;
      &lt;scope doc="Filters elements from the array via the callback" ilk="function" name="array_filter" returns="array" signature="array_filter(array input [, mixed callback])" src="array.c" /&gt;
      &lt;scope doc="Applies the callback to the elements in given arrays" ilk="function" name="array_map" returns="array" signature="array_map(mixed callback, array input1 [, array input2 ,...])" src="array.c" /&gt;
      &lt;scope doc="Checks if the given key or index exists in the array" ilk="function" name="array_key_exists" returns="bool" signature="array_key_exists(mixed key, array search)" src="array.c" /&gt;
      &lt;scope doc="Split array into chunks" ilk="function" name="array_chunk" returns="array" signature="array_chunk(array input, int size [, bool preserve_keys])" src="array.c" /&gt;
      &lt;scope doc="Creates an array by using the elements of the first&amp;#xA;parameter as keys and the elements of the second as" ilk="function" name="array_combine" returns="array" signature="array_combine(array keys, array values)" src="array.c" /&gt;
      &lt;scope doc="Calculate the soundex key of a string" ilk="function" name="soundex" returns="string" signature="soundex(string str)" src="soundex.c" /&gt;
      &lt;scope doc="Checks if assertion is false" ilk="function" name="assert" returns="int" signature="assert(string" src="assert.c" /&gt;
      &lt;scope doc="Set get the various assert flags" ilk="function" name="assert_options" returns="mixed" signature="assert_options(int what [, mixed value])" src="assert.c" /&gt;
      &lt;scope doc="Load a PHP extension at runtime" ilk="function" name="dl" returns="int" signature="dl(string extension_filename)" src="dl.c" /&gt;
      &lt;scope doc="Embed binary IPTC data into a JPEG image" ilk="function" name="iptcembed" returns="array" signature="iptcembed(string iptcdata, string jpeg_file_name [, int spool])" src="iptc.c" /&gt;
      &lt;scope doc="Parse binary IPTC-data into associative array" ilk="function" name="iptcparse" returns="array" signature="iptcparse(string iptcdata)" src="iptc.c" /&gt;
      &lt;scope doc="Generates a form-encoded query string from an&amp;#xA;associative array or object" ilk="function" name="http_build_query" returns="string" signature="http_build_query(mixed formdata [, string prefix [, string arg_separator [, int enc_type]]])" src="http.c" /&gt;
      &lt;scope doc="Given the name of a constant this function will return&amp;#xA;the constant&amp;apos;s associated value" ilk="function" name="constant" returns="mixed" signature="constant(string const_name)" src="basic_functions.c" /&gt;
      &lt;scope doc="Converts a packed inet address to a human readable IP&amp;#xA;address string" ilk="function" name="inet_ntop" returns="string" signature="inet_ntop(string in_addr)" src="basic_functions.c" /&gt;
      &lt;scope doc="Converts a human readable IP address to a packed binary&amp;#xA;string" ilk="function" name="inet_pton" returns="string" signature="inet_pton(string ip_address)" src="basic_functions.c" /&gt;
      &lt;scope doc="Converts a string containing an IPv Internet Protocol&amp;#xA;dotted address into a proper address" ilk="function" name="ip2long" returns="int" signature="ip2long(string ip_address)" src="basic_functions.c" /&gt;
      &lt;scope doc="Converts an IPv Internet network address into a string&amp;#xA;in Internet standard dotted format" ilk="function" name="long2ip" returns="string" signature="long2ip(int proper_address)" src="basic_functions.c" /&gt;
      &lt;scope doc="Get the value of an environment variable" ilk="function" name="getenv" returns="string" signature="getenv(string varname)" src="basic_functions.c" /&gt;
      &lt;scope doc="Set the value of an environment variable" ilk="function" name="putenv" returns="bool" signature="putenv(string setting)" src="basic_functions.c" /&gt;
      &lt;scope doc="Get options from the command line argument list" ilk="function" name="getopt" returns="array" signature="getopt(string options [, array longopts])" src="basic_functions.c" /&gt;
      &lt;scope doc="Flush the output buffer" ilk="function" name="flush" returns="void" signature="flush(void)" src="basic_functions.c" /&gt;
      &lt;scope doc="Delay for a given number of seconds" ilk="function" name="sleep" returns="void" signature="sleep(int seconds)" src="basic_functions.c" /&gt;
      &lt;scope doc="Delay for a given number of micro seconds" ilk="function" name="usleep" returns="void" signature="usleep(int micro_seconds)" src="basic_functions.c" /&gt;
      &lt;scope doc="Delay for a number of seconds and nano seconds" ilk="function" name="time_nanosleep" returns="mixed" signature="time_nanosleep(long seconds, long nanoseconds)" src="basic_functions.c" /&gt;
      &lt;scope doc="Make the script sleep until the specified time" ilk="function" name="time_sleep_until" returns="mixed" signature="time_sleep_until(float timestamp)" src="basic_functions.c" /&gt;
      &lt;scope doc="Get the name of the owner of the current PHP script" ilk="function" name="get_current_user" returns="string" signature="get_current_user(void)" src="basic_functions.c" /&gt;
      &lt;scope doc="Get the value of a PHP configuration option" ilk="function" name="get_cfg_var" returns="mixed" signature="get_cfg_var(string option_name)" src="basic_functions.c" /&gt;
      &lt;scope doc="magic quotes runtime is not supported anymore" ilk="function" name="set_magic_quotes_runtime" returns="bool" signature="set_magic_quotes_runtime(int new_setting)" src="basic_functions.c" /&gt;
      &lt;scope doc="Get the current active configuration setting of magic&amp;#xA;quotes runtime" ilk="function" name="get_magic_quotes_runtime" returns="int" signature="get_magic_quotes_runtime(void)" src="basic_functions.c" /&gt;
      &lt;scope doc="Get the current active configuration setting of magic&amp;#xA;quotes gpc" ilk="function" name="get_magic_quotes_gpc" returns="int" signature="get_magic_quotes_gpc(void)" src="basic_functions.c" /&gt;
      &lt;scope doc="Send an error message somewhere" ilk="function" name="error_log" returns="bool" signature="error_log(string message [, int message_type [, string destination [, string extra_headers]]])" src="basic_functions.c" /&gt;
      &lt;scope doc="Get the last occurred error as associative array&amp;#xA;Returns NULL if there hasn&amp;apos;t been an error yet" ilk="function" name="error_get_last" returns="array" signature="error_get_last()" src="basic_functions.c" /&gt;
      &lt;scope doc="Call a user function which is the first parameter" ilk="function" name="call_user_func" returns="mixed" signature="call_user_func(mixed function_name [, mixed parmeter] [, mixed ...])" src="basic_functions.c" /&gt;
      &lt;scope doc="U Call a user function which is the first parameter&amp;#xA;with the arguments contained in array" ilk="function" name="call_user_func_array" returns="mixed" signature="call_user_func_array(string function_name, array parameters)" src="basic_functions.c" /&gt;
      &lt;scope doc="Call a user method on a specific object or class" ilk="function" name="call_user_method" returns="mixed" signature="call_user_method(string method_name, mixed object [, mixed parameter] [, mixed ...])" src="basic_functions.c" /&gt;
      &lt;scope doc="Call a user method on a specific object or class using&amp;#xA;a parameter array" ilk="function" name="call_user_method_array" returns="mixed" signature="call_user_method_array(string method_name, mixed object, array params)" src="basic_functions.c" /&gt;
      &lt;scope doc="U Call a user function which is the first parameter" ilk="function" name="forward_static_call" returns="mixed" signature="forward_static_call(mixed function_name [, mixed parmeter] [, mixed ...])" src="basic_functions.c" /&gt;
      &lt;scope doc="U Register a user-level function to be called on&amp;#xA;request termination" ilk="function" name="register_shutdown_function" returns="void" signature="register_shutdown_function(callback function)" src="basic_functions.c" /&gt;
      &lt;scope doc="Syntax highlight a source file" ilk="function" name="highlight_file" returns="bool" signature="highlight_file(string file_name [, bool return] )" src="basic_functions.c" /&gt;
      &lt;scope doc="Return source with stripped comments and whitespace" ilk="function" name="php_strip_whitespace" returns="string" signature="php_strip_whitespace(string file_name)" src="basic_functions.c" /&gt;
      &lt;scope doc="Syntax highlight a string or optionally return it" ilk="function" name="highlight_string" returns="bool" signature="highlight_string(string string [, bool return] )" src="basic_functions.c" /&gt;
      &lt;scope doc="Get a configuration option" ilk="function" name="ini_get" returns="string" signature="ini_get(string varname)" src="basic_functions.c" /&gt;
      &lt;scope doc="Get all configuration options" ilk="function" name="ini_get_all" returns="array" signature="ini_get_all([string extension[, bool details = true]])" src="basic_functions.c" /&gt;
      &lt;scope doc="Set a configuration option returns false on error and&amp;#xA;the old value of the configuration option on success" ilk="function" name="ini_set" returns="string" signature="ini_set(string varname, string newvalue)" src="basic_functions.c" /&gt;
      &lt;scope doc="Restore the value of a configuration option specified&amp;#xA;by varname" ilk="function" name="ini_restore" returns="void" signature="ini_restore(string varname)" src="basic_functions.c" /&gt;
      &lt;scope doc="Sets the include path configuration option" ilk="function" name="set_include_path" returns="string" signature="set_include_path(string new_include_path)" src="basic_functions.c" /&gt;
      &lt;scope doc="Get the current include path configuration option" ilk="function" name="get_include_path" returns="string" signature="get_include_path()" src="basic_functions.c" /&gt;
      &lt;scope doc="Restore the value of the include path configuration&amp;#xA;option" ilk="function" name="restore_include_path" returns="void" signature="restore_include_path()" src="basic_functions.c" /&gt;
      &lt;scope doc="Prints out or returns information about the specified&amp;#xA;variable" ilk="function" name="print_r" returns="mixed" signature="print_r(mixed var [, bool return])" src="basic_functions.c" /&gt;
      &lt;scope doc="Returns true if client disconnected" ilk="function" name="connection_aborted" returns="int" signature="connection_aborted(void)" src="basic_functions.c" /&gt;
      &lt;scope doc="Returns the connection status bitfield" ilk="function" name="connection_status" returns="int" signature="connection_status(void)" src="basic_functions.c" /&gt;
      &lt;scope doc="Set whether we want to ignore a user abort event or not" ilk="function" name="ignore_user_abort" returns="int" signature="ignore_user_abort([string value])" src="basic_functions.c" /&gt;
      &lt;scope doc="Returns port associated with service Protocol must be&amp;#xA;quot tcp quot or quot udp quot" ilk="function" name="getservbyname" returns="int" signature="getservbyname(string service, string protocol)" src="basic_functions.c" /&gt;
      &lt;scope doc="Returns service name associated with port Protocol must&amp;#xA;be quot tcp quot or quot udp quot" ilk="function" name="getservbyport" returns="string" signature="getservbyport(int port, string protocol)" src="basic_functions.c" /&gt;
      &lt;scope doc="Returns protocol number associated with name as per etc&amp;#xA;protocols" ilk="function" name="getprotobyname" returns="int" signature="getprotobyname(string name)" src="basic_functions.c" /&gt;
      &lt;scope doc="Returns protocol name associated with protocol number&amp;#xA;proto" ilk="function" name="getprotobynumber" returns="string" signature="getprotobynumber(int proto)" src="basic_functions.c" /&gt;
      &lt;scope doc="Registers a tick callback function" ilk="function" name="register_tick_function" returns="bool" signature="register_tick_function(string function_name [, mixed arg [, mixed ... ]])" src="basic_functions.c" /&gt;
      &lt;scope doc="Unregisters a tick callback function" ilk="function" name="unregister_tick_function" returns="void" signature="unregister_tick_function(string function_name)" src="basic_functions.c" /&gt;
      &lt;scope doc="Check if file was created by rfc upload" ilk="function" name="is_uploaded_file" returns="bool" signature="is_uploaded_file(string path)" src="basic_functions.c" /&gt;
      &lt;scope doc="Move a file if and only if it was created by an upload" ilk="function" name="move_uploaded_file" returns="bool" signature="move_uploaded_file(string path, string new_path)" src="basic_functions.c" /&gt;
      &lt;scope doc="Parse configuration file" ilk="function" name="parse_ini_file" returns="array" signature="parse_ini_file(string filename [, bool process_sections [, int scanner_mode]])" src="basic_functions.c" /&gt;
      &lt;scope doc="Parse configuration string" ilk="function" name="parse_ini_string" returns="array" signature="parse_ini_string(string ini_string [, bool process_sections [, int scanner_mode]])" src="basic_functions.c" /&gt;
      &lt;scope doc="" ilk="function" name="sys_getloadavg" returns="array" signature="sys_getloadavg()" src="basic_functions.c" /&gt;
      &lt;scope doc="Open a directory and return a dir handle" ilk="function" name="opendir" returns="mixed" signature="opendir(string path[, resource context])" src="dir.c" /&gt;
      &lt;scope doc="Directory class with properties handle and class and&amp;#xA;methods read rewind and close" ilk="function" name="dir" returns="object" signature="dir(string directory[, resource context])" src="dir.c" /&gt;
      &lt;scope doc="Close directory connection identified by the dir handle" ilk="function" name="closedir" returns="void" signature="closedir([resource dir_handle])" src="dir.c" /&gt;
      &lt;scope doc="Change root directory" ilk="function" name="chroot" returns="bool" signature="chroot(string directory)" src="dir.c" /&gt;
      &lt;scope doc="Change the current directory" ilk="function" name="chdir" returns="bool" signature="chdir(string directory)" src="dir.c" /&gt;
      &lt;scope doc="Gets the current directory" ilk="function" name="getcwd" returns="mixed" signature="getcwd(void)" src="dir.c" /&gt;
      &lt;scope doc="Rewind dir handle back to the start" ilk="function" name="rewinddir" returns="void" signature="rewinddir([resource dir_handle])" src="dir.c" /&gt;
      &lt;scope doc="Read directory entry from dir handle" ilk="function" name="readdir" returns="string" signature="readdir([resource dir_handle])" src="dir.c" /&gt;
      &lt;scope doc="Find pathnames matching a pattern" ilk="function" name="glob" returns="array" signature="glob(string pattern [, int flags])" src="dir.c" /&gt;
      &lt;scope doc="List files amp directories inside the specified path" ilk="function" name="scandir" returns="array" signature="scandir(string dir [, int sorting_order [, resource context]])" src="dir.c" /&gt;
      &lt;scope doc="Generates a unique ID" ilk="function" name="uniqid" returns="string" signature="uniqid([string prefix [, bool more_entropy]])" src="uniqid.c" /&gt;
      &lt;scope doc="Parse a time date generated with strftime" ilk="function" name="strptime" returns="string" signature="strptime(string timestamp, string format)" src="datetime.c" /&gt;
      &lt;scope doc="Verify a hash created using crypt or password hash" ilk="function" name="password_make_salt" returns="boolean" signature="password_make_salt(string password, string hash)" src="password.c" /&gt;
      &lt;scope doc="Hash a password" ilk="function" name="password_hash" returns="string" signature="password_hash(string password, int algo, array options = array())" src="password.c" /&gt;
      &lt;scope doc="Open Internet or Unix domain socket connection" ilk="function" name="fsockopen" returns="resource" signature="fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])" src="fsock.c" /&gt;
      &lt;scope doc="Open persistent Internet or Unix domain socket&amp;#xA;connection" ilk="function" name="pfsockopen" returns="resource" signature="pfsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])" src="fsock.c" /&gt;
      &lt;scope doc="Convert a quoted-printable string to an bit string" ilk="function" name="quoted_printable_decode" returns="string" signature="quoted_printable_decode(string str)" src="quot_print.c" /&gt;
      &lt;scope doc="" ilk="function" name="quoted_printable_encode" returns="string" signature="quoted_printable_encode(string str)" src="quot_print.c" /&gt;
      &lt;scope doc="Calculate the crc polynomial of a string" ilk="function" name="crc32" returns="string" signature="crc32(string str)" src="crc32.c" /&gt;
      &lt;scope doc="Get Mime-Type for image-type returned by getimagesize&amp;#xA;exif read data exif thumbnail exif imagetype" ilk="function" name="image_type_to_mime_type" returns="string" signature="image_type_to_mime_type(int imagetype)" src="image.c" /&gt;
      &lt;scope doc="Get file extension for image-type returned by&amp;#xA;getimagesize exif read data exif thumbnail exif&amp;#xA;imagetype" ilk="function" name="image_type_to_extension" returns="string" signature="image_type_to_extension(int imagetype [, bool include_dot])" src="image.c" /&gt;
      &lt;scope doc="Get the size of an image as -element array" ilk="function" name="getimagesize" returns="array" signature="getimagesize(string imagefile [, array info])" src="image.c" /&gt;
      &lt;scope doc="Get the size of an image as -element array" ilk="function" name="getimagesizefromstring" returns="array" signature="getimagesizefromstring(string data [, array info])" src="image.c" /&gt;
      &lt;scope doc="Sends a raw HTTP header" ilk="function" name="header" returns="void" signature="header(string header [, bool replace, [int http_response_code]])" src="head.c" /&gt;
      &lt;scope doc="Removes an HTTP header previously set using header" ilk="function" name="header_remove" returns="void" signature="header_remove([string name])" src="head.c" /&gt;
      &lt;scope doc="Send a cookie" ilk="function" name="setcookie" returns="bool" signature="setcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure[, bool httponly]]]]]])" src="head.c" /&gt;
      &lt;scope doc="Send a cookie with no url encoding of the value" ilk="function" name="setrawcookie" returns="bool" signature="setrawcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure[, bool httponly]]]]]])" src="head.c" /&gt;
      &lt;scope doc="Returns true if headers have already been sent false&amp;#xA;otherwise" ilk="function" name="headers_sent" returns="bool" signature="headers_sent([string &amp;amp;$file [, int &amp;amp;$line]])" src="head.c" /&gt;
      &lt;scope doc="Return list of headers to be sent already sent" ilk="function" name="headers_list" returns="array" signature="headers_list(void)" src="head.c" /&gt;
      &lt;scope doc="Sets a response code or returns the current HTTP&amp;#xA;response code" ilk="function" name="http_response_code" returns="long" signature="http_response_code([int response_code])" src="head.c" /&gt;
      &lt;scope doc="Convert special characters to HTML entities" ilk="function" name="htmlspecialchars" returns="string" signature="htmlspecialchars(string string [, int quote_style[, string charset[, bool double_encode]]])" src="html.c" /&gt;
      &lt;scope doc="Convert special HTML entities back to characters" ilk="function" name="htmlspecialchars_decode" returns="string" signature="htmlspecialchars_decode(string string [, int quote_style])" src="html.c" /&gt;
      &lt;scope doc="Convert all HTML entities to their applicable&amp;#xA;characters" ilk="function" name="html_entity_decode" returns="string" signature="html_entity_decode(string string [, int quote_style][, string charset])" src="html.c" /&gt;
      &lt;scope doc="Convert all applicable characters to HTML entities" ilk="function" name="htmlentities" returns="string" signature="htmlentities(string string [, int quote_style[, string charset[, bool double_encode]]])" src="html.c" /&gt;
      &lt;scope doc="Returns the internal translation table used by&amp;#xA;htmlspecialchars and htmlentities" ilk="function" name="get_html_translation_table" returns="array" signature="get_html_translation_table([int table [, int flags [, string charset_hint]]])" src="html.c" /&gt;
      &lt;scope doc="Convert from one Cyrillic character set to another" ilk="function" name="convert_cyr_string" returns="string" signature="convert_cyr_string(string str, string from, string to)" src="cyr_convert.c" /&gt;
      &lt;scope doc="Convert a pathname and a project identifier to a System&amp;#xA;V IPC key" ilk="function" name="ftok" returns="int" signature="ftok(string pathname, string proj)" src="ftok.c" /&gt;
      &lt;scope doc="Output a page of useful information about PHP and the&amp;#xA;current request" ilk="function" name="phpinfo" returns="void" signature="phpinfo([int what])" src="info.c" /&gt;
      &lt;scope doc="Return the current PHP version" ilk="function" name="phpversion" returns="string" signature="phpversion([string extension])" src="info.c" /&gt;
      &lt;scope doc="Prints the list of people who&amp;apos;ve contributed to the PHP&amp;#xA;project" ilk="function" name="phpcredits" returns="void" signature="phpcredits([int flag])" src="info.c" /&gt;
      &lt;scope doc="Return the current SAPI module name" ilk="function" name="php_sapi_name" returns="string" signature="php_sapi_name(void)" src="info.c" /&gt;
      &lt;scope doc="Return information about the system PHP was built on" ilk="function" name="php_uname" returns="string" signature="php_uname(void)" src="info.c" /&gt;
      &lt;scope doc="Return comma-separated string of ini files parsed from&amp;#xA;the additional ini dir" ilk="function" name="php_ini_scanned_files" returns="string" signature="php_ini_scanned_files(void)" src="info.c" /&gt;
      &lt;scope doc="Return the actual loaded ini filename" ilk="function" name="php_ini_loaded_file" returns="string" signature="php_ini_loaded_file(void)" src="info.c" /&gt;
      &lt;scope doc="Creates a new packet and serializes the given value" ilk="function" name="wddx_serialize_value" returns="string" signature="wddx_serialize_value(mixed var [, string comment])" src="wddx.c" /&gt;
      &lt;scope doc="Creates a new packet and serializes given variables&amp;#xA;into a struct" ilk="function" name="wddx_serialize_vars" returns="string" signature="wddx_serialize_vars(mixed var_name [, mixed ...])" src="wddx.c" /&gt;
      &lt;scope doc="Starts a WDDX packet with optional comment and returns&amp;#xA;the packet id" ilk="function" name="wddx_packet_start" returns="resource" signature="wddx_packet_start([string comment])" src="wddx.c" /&gt;
      &lt;scope doc="Ends specified WDDX packet and returns the string&amp;#xA;containing the packet" ilk="function" name="wddx_packet_end" returns="string" signature="wddx_packet_end(resource packet_id)" src="wddx.c" /&gt;
      &lt;scope doc="Serializes given variables and adds them to packet&amp;#xA;given by packet id" ilk="function" name="wddx_add_vars" returns="int" signature="wddx_add_vars(resource packet_id,  mixed var_names [, mixed ...])" src="wddx.c" /&gt;
      &lt;scope doc="Deserializes given packet and returns a PHP value" ilk="function" name="wddx_deserialize" returns="mixed" signature="wddx_deserialize(mixed packet)" src="wddx.c" /&gt;
      &lt;scope doc="Add a user to security database" ilk="function" name="ibase_add_user" returns="bool" signature="ibase_add_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" src="ibase_service.c" /&gt;
      &lt;scope doc="Modify a user in security database" ilk="function" name="ibase_modify_user" returns="bool" signature="ibase_modify_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" src="ibase_service.c" /&gt;
      &lt;scope doc="Delete a user from security database" ilk="function" name="ibase_delete_user" returns="bool" signature="ibase_delete_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" src="ibase_service.c" /&gt;
      &lt;scope doc="Connect to the service manager" ilk="function" name="ibase_service_attach" returns="resource" signature="ibase_service_attach(string host, string dba_username, string dba_password)" src="ibase_service.c" /&gt;
      &lt;scope doc="Disconnect from the service manager" ilk="function" name="ibase_service_detach" returns="bool" signature="ibase_service_detach(resource service_handle)" src="ibase_service.c" /&gt;
      &lt;scope doc="Initiates a backup task in the service manager and&amp;#xA;returns immediately" ilk="function" name="ibase_backup" returns="mixed" signature="ibase_backup(resource service_handle, string source_db, string dest_file [, int options [, bool verbose]])" src="ibase_service.c" /&gt;
      &lt;scope doc="Initiates a restore task in the service manager and&amp;#xA;returns immediately" ilk="function" name="ibase_restore" returns="mixed" signature="ibase_restore(resource service_handle, string source_file, string dest_db [, int options [, bool verbose]])" src="ibase_service.c" /&gt;
      &lt;scope doc="Execute a maintenance command on the database server" ilk="function" name="ibase_maintain_db" returns="bool" signature="ibase_maintain_db(resource service_handle, string db, int action [, int argument])" src="ibase_service.c" /&gt;
      &lt;scope doc="Request statistics about a database" ilk="function" name="ibase_db_info" returns="string" signature="ibase_db_info(resource service_handle, string db, int action [, int argument])" src="ibase_service.c" /&gt;
      &lt;scope doc="Request information about a database server" ilk="function" name="ibase_server_info" returns="string" signature="ibase_server_info(resource service_handle, int action)" src="ibase_service.c" /&gt;
      &lt;scope doc="Return error message" ilk="function" name="ibase_errmsg" returns="string" signature="ibase_errmsg(void)" src="interbase.c" /&gt;
      &lt;scope doc="Return error code" ilk="function" name="ibase_errcode" returns="int" signature="ibase_errcode(void)" src="interbase.c" /&gt;
      &lt;scope doc="Open a connection to an InterBase database" ilk="function" name="ibase_connect" returns="resource" signature="ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])" src="interbase.c" /&gt;
      &lt;scope doc="Open a persistent connection to an InterBase database" ilk="function" name="ibase_pconnect" returns="resource" signature="ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])" src="interbase.c" /&gt;
      &lt;scope doc="Close an InterBase connection" ilk="function" name="ibase_close" returns="bool" signature="ibase_close([resource link_identifier])" src="interbase.c" /&gt;
      &lt;scope doc="Drop an InterBase database" ilk="function" name="ibase_drop_db" returns="bool" signature="ibase_drop_db([resource link_identifier])" src="interbase.c" /&gt;
      &lt;scope doc="Start a transaction over one or several databases" ilk="function" name="ibase_trans" returns="resource" signature="ibase_trans([int trans_args [, resource link_identifier [, ... ], int trans_args [, resource link_identifier [, ... ]] [, ...]]])" src="interbase.c" /&gt;
      &lt;scope doc="Commit transaction" ilk="function" name="ibase_commit" returns="bool" signature="ibase_commit( resource link_identifier )" src="interbase.c" /&gt;
      &lt;scope doc="Rollback transaction" ilk="function" name="ibase_rollback" returns="bool" signature="ibase_rollback( resource link_identifier )" src="interbase.c" /&gt;
      &lt;scope doc="Commit transaction and retain the transaction context" ilk="function" name="ibase_commit_ret" returns="bool" signature="ibase_commit_ret( resource link_identifier )" src="interbase.c" /&gt;
      &lt;scope doc="Rollback transaction and retain the transaction context" ilk="function" name="ibase_rollback_ret" returns="bool" signature="ibase_rollback_ret( resource link_identifier )" src="interbase.c" /&gt;
      &lt;scope doc="Increments the named generator and returns its new&amp;#xA;value" ilk="function" name="ibase_gen_id" returns="int" signature="ibase_gen_id(string generator [, int increment [, resource link_identifier ]])" src="interbase.c" /&gt;
      &lt;scope doc="Waits for any one of the passed Interbase events to be&amp;#xA;posted by the database and returns its name" ilk="function" name="ibase_wait_event" returns="string" signature="ibase_wait_event([resource link_identifier,] string event [, string event [, ...]])" src="ibase_events.c" /&gt;
      &lt;scope doc="Register the callback for handling each of the named&amp;#xA;events" ilk="function" name="ibase_set_event_handler" returns="resource" signature="ibase_set_event_handler([resource link_identifier,] callback handler, string event [, string event [, ...]])" src="ibase_events.c" /&gt;
      &lt;scope doc="Frees the event handler set by ibase set event handler" ilk="function" name="ibase_free_event_handler" returns="bool" signature="ibase_free_event_handler(resource event)" src="ibase_events.c" /&gt;
      &lt;scope doc="Create blob for adding data" ilk="function" name="ibase_blob_create" returns="resource" signature="ibase_blob_create([resource link_identifier])" src="ibase_blobs.c" /&gt;
      &lt;scope doc="Open blob for retrieving data parts" ilk="function" name="ibase_blob_open" returns="resource" signature="ibase_blob_open([ resource link_identifier, ] string blob_id)" src="ibase_blobs.c" /&gt;
      &lt;scope doc="Add data into created blob" ilk="function" name="ibase_blob_add" returns="bool" signature="ibase_blob_add(resource blob_handle, string data)" src="ibase_blobs.c" /&gt;
      &lt;scope doc="Get len bytes data from open blob" ilk="function" name="ibase_blob_get" returns="string" signature="ibase_blob_get(resource blob_handle, int len)" src="ibase_blobs.c" /&gt;
      &lt;scope doc="Close blob" ilk="function" name="ibase_blob_close" returns="string" signature="ibase_blob_close(resource blob_handle)" src="ibase_blobs.c" /&gt;
      &lt;scope doc="Cancel creating blob" ilk="function" name="ibase_blob_cancel" returns="bool" signature="ibase_blob_cancel(resource blob_handle)" src="ibase_blobs.c" /&gt;
      &lt;scope doc="Return blob length and other useful info" ilk="function" name="ibase_blob_info" returns="array" signature="ibase_blob_info([ resource link_identifier, ] string blob_id)" src="ibase_blobs.c" /&gt;
      &lt;scope doc="Output blob contents to browser" ilk="function" name="ibase_blob_echo" returns="bool" signature="ibase_blob_echo([ resource link_identifier, ] string blob_id)" src="ibase_blobs.c" /&gt;
      &lt;scope doc="Create blob copy file in it and close it" ilk="function" name="ibase_blob_import" returns="string" signature="ibase_blob_import([ resource link_identifier, ] resource file)" src="ibase_blobs.c" /&gt;
      &lt;scope doc="Execute a query" ilk="function" name="ibase_query" returns="mixed" signature="ibase_query([resource link_identifier, [ resource link_identifier, ]] string query [, mixed bind_arg [, mixed bind_arg [, ...]]])" src="ibase_query.c" /&gt;
      &lt;scope doc="Returns the number of rows affected by the previous&amp;#xA;INSERT UPDATE or DELETE statement" ilk="function" name="ibase_affected_rows" returns="int" signature="ibase_affected_rows( [ resource link_identifier ] )" src="ibase_query.c" /&gt;
      &lt;scope doc="Return the number of rows that are available in a&amp;#xA;result" ilk="function" name="ibase_num_rows" returns="int" signature="ibase_num_rows( resource result_identifier )" src="ibase_query.c" /&gt;
      &lt;scope doc="Fetch a row from the results of a query" ilk="function" name="ibase_fetch_row" returns="array" signature="ibase_fetch_row(resource result [, int fetch_flags])" src="ibase_query.c" /&gt;
      &lt;scope doc="Fetch a row from the results of a query" ilk="function" name="ibase_fetch_assoc" returns="array" signature="ibase_fetch_assoc(resource result [, int fetch_flags])" src="ibase_query.c" /&gt;
      &lt;scope doc="Fetch a object from the results of a query" ilk="function" name="ibase_fetch_object" returns="object" signature="ibase_fetch_object(resource result [, int fetch_flags])" src="ibase_query.c" /&gt;
      &lt;scope doc="Assign a name to a result for use with WHERE CURRENT OF&amp;#xA;lt name gt statements" ilk="function" name="ibase_name_result" returns="bool" signature="ibase_name_result(resource result, string name)" src="ibase_query.c" /&gt;
      &lt;scope doc="Free the memory used by a result" ilk="function" name="ibase_free_result" returns="bool" signature="ibase_free_result(resource result)" src="ibase_query.c" /&gt;
      &lt;scope doc="Prepare a query for later execution" ilk="function" name="ibase_prepare" returns="resource" signature="ibase_prepare(resource link_identifier[, string query [, resource trans_identifier ]])" src="ibase_query.c" /&gt;
      &lt;scope doc="Execute a previously prepared query" ilk="function" name="ibase_execute" returns="mixed" signature="ibase_execute(resource query [, mixed bind_arg [, mixed bind_arg [, ...]]])" src="ibase_query.c" /&gt;
      &lt;scope doc="Free memory used by a query" ilk="function" name="ibase_free_query" returns="bool" signature="ibase_free_query(resource query)" src="ibase_query.c" /&gt;
      &lt;scope doc="Get the number of fields in result" ilk="function" name="ibase_num_fields" returns="int" signature="ibase_num_fields(resource query_result)" src="ibase_query.c" /&gt;
      &lt;scope doc="Get information about a field" ilk="function" name="ibase_field_info" returns="array" signature="ibase_field_info(resource query_result, int field_number)" src="ibase_query.c" /&gt;
      &lt;scope doc="Get the number of params in a prepared query" ilk="function" name="ibase_num_params" returns="int" signature="ibase_num_params(resource query)" src="ibase_query.c" /&gt;
      &lt;scope doc="Get information about a parameter" ilk="function" name="ibase_param_info" returns="array" signature="ibase_param_info(resource query, int field_number)" src="ibase_query.c" /&gt;
      &lt;scope doc="Returns the character count of str" ilk="function" name="iconv_strlen" returns="int" signature="iconv_strlen(string str [, string charset])" src="iconv.c" /&gt;
      &lt;scope doc="Returns specified part of a string" ilk="function" name="iconv_substr" returns="string" signature="iconv_substr(string str, int offset, [int length, string charset])" src="iconv.c" /&gt;
      &lt;scope doc="Finds position of first occurrence of needle within&amp;#xA;part of haystack beginning with offset" ilk="function" name="iconv_strpos" returns="int" signature="iconv_strpos(string haystack, string needle [, int offset [, string charset]])" src="iconv.c" /&gt;
      &lt;scope doc="Finds position of last occurrence of needle within part&amp;#xA;of haystack beginning with offset" ilk="function" name="iconv_strrpos" returns="int" signature="iconv_strrpos(string haystack, string needle [, string charset])" src="iconv.c" /&gt;
      &lt;scope doc="Composes a mime header field with field name and field&amp;#xA;value in a specified scheme" ilk="function" name="iconv_mime_encode" returns="string" signature="iconv_mime_encode(string field_name, string field_value [, array preference])" src="iconv.c" /&gt;
      &lt;scope doc="Decodes a mime header field" ilk="function" name="iconv_mime_decode" returns="string" signature="iconv_mime_decode(string encoded_string [, int mode, string charset])" src="iconv.c" /&gt;
      &lt;scope doc="Decodes multiple mime header fields" ilk="function" name="iconv_mime_decode_headers" returns="array" signature="iconv_mime_decode_headers(string headers [, int mode, string charset])" src="iconv.c" /&gt;
      &lt;scope doc="Returns str converted to the out charset character set" ilk="function" name="iconv" returns="string" signature="iconv(string in_charset, string out_charset, string str)" src="iconv.c" /&gt;
      &lt;scope doc="Sets internal encoding and output encoding for ob iconv&amp;#xA;handler" ilk="function" name="iconv_set_encoding" returns="bool" signature="iconv_set_encoding(string type, string charset)" src="iconv.c" /&gt;
      &lt;scope doc="Get internal encoding and output encoding for ob iconv&amp;#xA;handler" ilk="function" name="iconv_get_encoding" returns="mixed" signature="iconv_get_encoding([string type])" src="iconv.c" /&gt;
      &lt;scope doc="Reads up to length bytes from a BZip stream or bytes if&amp;#xA;length is not specified" ilk="function" name="bzread" returns="string" signature="bzread(resource bz[, int length])" src="bz2.c" /&gt;
      &lt;scope doc="Opens a new BZip stream" ilk="function" name="bzopen" returns="resource" signature="bzopen(string" src="bz2.c" /&gt;
      &lt;scope doc="Returns the error number" ilk="function" name="bzerrno" returns="int" signature="bzerrno(resource bz)" src="bz2.c" /&gt;
      &lt;scope doc="Returns the error string" ilk="function" name="bzerrstr" returns="string" signature="bzerrstr(resource bz)" src="bz2.c" /&gt;
      &lt;scope doc="Returns the error number and error string in an&amp;#xA;associative array" ilk="function" name="bzerror" returns="array" signature="bzerror(resource bz)" src="bz2.c" /&gt;
      &lt;scope doc="Compresses a string into BZip encoded data" ilk="function" name="bzcompress" returns="string" signature="bzcompress(string source [, int blocksize100k [, int workfactor]])" src="bz2.c" /&gt;
      &lt;scope doc="Decompresses BZip compressed data" ilk="function" name="bzdecompress" returns="string" signature="bzdecompress(string source [, int small])" src="bz2.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html DOMImplementationList-item Since" ilk="function" name="dom_domimplementationlist_item" returns="domdomimplementation" signature="dom_domimplementationlist_item(int index)" src="domimplementationlist.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html DOMStringList-item Since" ilk="function" name="dom_domstringlist_item" returns="domstring" signature="dom_domstringlist_item(int index)" src="domstringlist.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- BCCF Since" ilk="function" name="dom_characterdata_substring_data" returns="string" signature="dom_characterdata_substring_data(int offset, int count)" src="characterdata.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- A F Since" ilk="function" name="dom_characterdata_append_data" returns="void" signature="dom_characterdata_append_data(string arg)" src="characterdata.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- EDB F Since" ilk="function" name="dom_characterdata_insert_data" returns="void" signature="dom_characterdata_insert_data(int offset, string arg)" src="characterdata.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- C Since" ilk="function" name="dom_characterdata_delete_data" returns="void" signature="dom_characterdata_delete_data(int offset, int count)" src="characterdata.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-E CBA FB Since" ilk="function" name="dom_characterdata_replace_data" returns="void" signature="dom_characterdata_replace_data(int offset, int count, string arg)" src="characterdata.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_document_create_element" returns="DOMElement" signature="dom_document_create_element(string tagName [, string value])" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- CB B Since" ilk="function" name="dom_document_create_document_fragment" returns="DOMDocumentFragment" signature="dom_document_create_document_fragment()" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_document_create_text_node" returns="DOMText" signature="dom_document_create_text_node(string data)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_document_create_comment" returns="DOMComment" signature="dom_document_create_comment(string data)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-D C AF Since" ilk="function" name="dom_document_create_cdatasection" returns="DOMCdataSection" signature="dom_document_create_cdatasection(string data)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_document_create_processing_instruction" returns="DOMProcessingInstruction" signature="dom_document_create_processing_instruction(string target, string data)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_document_create_attribute" returns="DOMAttr" signature="dom_document_create_attribute(string name)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- B AE Since" ilk="function" name="dom_document_create_entity_reference" returns="DOMEntityReference" signature="dom_document_create_entity_reference(string name)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-A C Since" ilk="function" name="dom_document_get_elements_by_tag_name" returns="DOMNodeList" signature="dom_document_get_elements_by_tag_name(string tagname)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Core-Document-importNode Since DOM Level" ilk="function" name="dom_document_import_node" returns="DOMNode" signature="dom_document_import_node(DOMNode importedNode, boolean deep)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-DocCrElNS Since DOM Level" ilk="function" name="dom_document_create_element_ns" returns="DOMElement" signature="dom_document_create_element_ns(string namespaceURI, string qualifiedName [,string value])" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-DocCrAttrNS Since DOM Level" ilk="function" name="dom_document_create_attribute_ns" returns="DOMAttr" signature="dom_document_create_attribute_ns(string namespaceURI, string qualifiedName)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-getElBTNNS Since DOM Level" ilk="function" name="dom_document_get_elements_by_tag_name_ns" returns="DOMNodeList" signature="dom_document_get_elements_by_tag_name_ns(string namespaceURI, string localName)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-getElBId Since DOM Level" ilk="function" name="dom_document_get_element_by_id" returns="DOMElement" signature="dom_document_get_element_by_id(string elementId)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-Document -adoptNode Since DOM Level" ilk="function" name="dom_document_adopt_node" returns="DOMNode" signature="dom_document_adopt_node(DOMNode source)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-Document -normalizeDocument Since DOM Level" ilk="function" name="dom_document_normalize_document" returns="void" signature="dom_document_normalize_document()" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-Document -renameNode Since DOM Level" ilk="function" name="dom_document_rename_node" returns="DOMNode" signature="dom_document_rename_node(node n, string namespaceURI, string qualifiedName)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR DOM-Level- -LS load-save html&amp;#xA;LS-DocumentLS-load Since DOM Level" ilk="function" name="dom_document_load" returns="DOMNode" signature="dom_document_load(string source [, int options])" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR DOM-Level- -LS load-save html&amp;#xA;LS-DocumentLS-loadXML Since DOM Level" ilk="function" name="dom_document_loadxml" returns="DOMNode" signature="dom_document_loadxml(string source [, int options])" src="document.c" /&gt;
      &lt;scope doc="Convenience method to save to file" ilk="function" name="dom_document_save" returns="int" signature="dom_document_save(string file)" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR DOM-Level- -LS load-save html&amp;#xA;LS-DocumentLS-saveXML Since DOM Level" ilk="function" name="dom_document_savexml" returns="string" signature="dom_document_savexml([node n])" src="document.c" /&gt;
      &lt;scope doc="Substitutues xincludes in a DomDocument" ilk="function" name="dom_document_xinclude" returns="int" signature="dom_document_xinclude([int options])" src="document.c" /&gt;
      &lt;scope doc="Since DOM extended" ilk="function" name="dom_document_validate" returns="boolean" signature="dom_document_validate()" src="document.c" /&gt;
      &lt;scope doc="" ilk="function" name="dom_document_schema_validate_file" returns="boolean" signature="dom_document_schema_validate_file(string filename)" src="document.c" /&gt;
      &lt;scope doc="" ilk="function" name="dom_document_schema_validate" returns="boolean" signature="dom_document_schema_validate(string source)" src="document.c" /&gt;
      &lt;scope doc="" ilk="function" name="dom_document_relaxNG_validate_file" returns="boolean" signature="dom_document_relaxNG_validate_file(string filename)" src="document.c" /&gt;
      &lt;scope doc="" ilk="function" name="dom_document_relaxNG_validate_xml" returns="boolean" signature="dom_document_relaxNG_validate_xml(string source)" src="document.c" /&gt;
      &lt;scope doc="Since DOM extended" ilk="function" name="dom_document_load_html_file" returns="DOMNode" signature="dom_document_load_html_file(string source)" src="document.c" /&gt;
      &lt;scope doc="Since DOM extended" ilk="function" name="dom_document_load_html" returns="DOMNode" signature="dom_document_load_html(string source)" src="document.c" /&gt;
      &lt;scope doc="Convenience method to save to file as html" ilk="function" name="dom_document_save_html_file" returns="int" signature="dom_document_save_html_file(string file)" src="document.c" /&gt;
      &lt;scope doc="Convenience method to output as html" ilk="function" name="dom_document_save_html" returns="string" signature="dom_document_save_html()" src="document.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html ID- Since" ilk="function" name="dom_nodelist_item" returns="DOMNode" signature="dom_nodelist_item(int index)" src="nodelist.c" /&gt;
      &lt;scope doc="" ilk="function" name="dom_xpath_register_ns" returns="boolean" signature="dom_xpath_register_ns(string prefix, string uri)" src="xpath.c" /&gt;
      &lt;scope doc="" ilk="function" name="dom_xpath_query" returns="DOMNodeList" signature="dom_xpath_query(string expr [,DOMNode context [, boolean registerNodeNS]])" src="xpath.c" /&gt;
      &lt;scope doc="" ilk="function" name="dom_xpath_evaluate" returns="mixed" signature="dom_xpath_evaluate(string expr [,DOMNode context [, boolean registerNodeNS]])" src="xpath.c" /&gt;
      &lt;scope doc="" ilk="function" name="dom_xpath_register_php_functions" returns="void" signature="dom_xpath_register_php_functions()" src="xpath.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html DOMConfiguration-property Since" ilk="function" name="dom_domconfiguration_set_parameter" returns="dom_void" signature="dom_domconfiguration_set_parameter(string name, domuserdata value)" src="domconfiguration.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html DOMConfiguration-getParameter Since" ilk="function" name="dom_domconfiguration_get_parameter" returns="domdomuserdata" signature="dom_domconfiguration_get_parameter(string name)" src="domconfiguration.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html DOMConfiguration-canSetParameter Since" ilk="function" name="dom_domconfiguration_can_set_parameter" returns="boolean" signature="dom_domconfiguration_can_set_parameter(string name, domuserdata value)" src="domconfiguration.c" /&gt;
      &lt;scope doc="Get a simplexml element object from dom to allow for&amp;#xA;processing" ilk="function" name="dom_import_simplexml" returns="somNode" signature="dom_import_simplexml(sxeobject node)" src="php_dom.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_namednodemap_get_named_item" returns="DOMNode" signature="dom_namednodemap_get_named_item(string name)" src="namednodemap.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_namednodemap_set_named_item" returns="DOMNode" signature="dom_namednodemap_set_named_item(DOMNode arg)" src="namednodemap.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-D B Since" ilk="function" name="dom_namednodemap_remove_named_item" returns="DOMNode" signature="dom_namednodemap_remove_named_item(string name)" src="namednodemap.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- F Since" ilk="function" name="dom_namednodemap_item" returns="DOMNode" signature="dom_namednodemap_item(int index)" src="namednodemap.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-getNamedItemNS Since DOM Level" ilk="function" name="dom_namednodemap_get_named_item_ns" returns="DOMNode" signature="dom_namednodemap_get_named_item_ns(string namespaceURI, string localName)" src="namednodemap.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-setNamedItemNS Since DOM Level" ilk="function" name="dom_namednodemap_set_named_item_ns" returns="DOMNode" signature="dom_namednodemap_set_named_item_ns(DOMNode arg)" src="namednodemap.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-removeNamedItemNS Since DOM Level" ilk="function" name="dom_namednodemap_remove_named_item_ns" returns="DOMNode" signature="dom_namednodemap_remove_named_item_ns(string namespaceURI, string localName)" src="namednodemap.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Attr-isId Since DOM Level" ilk="function" name="dom_attr_is_id" returns="boolean" signature="dom_attr_is_id()" src="attr.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html ID-getDOMImpl Since" ilk="function" name="dom_domimplementationsource_get_domimplementation" returns="domdomimplementation" signature="dom_domimplementationsource_get_domimplementation(string features)" src="domimplementationsource.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html ID-getDOMImpls Since" ilk="function" name="dom_domimplementationsource_get_domimplementations" returns="domimplementationlist" signature="dom_domimplementationsource_get_domimplementations(string features)" src="domimplementationsource.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_node_insert_before" returns="domnode" signature="dom_node_insert_before(DomNode newChild, DomNode refChild)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_node_replace_child" returns="DomNode" signature="dom_node_replace_child(DomNode newChild, DomNode oldChild)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_node_remove_child" returns="DomNode" signature="dom_node_remove_child(DomNode oldChild)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- E Since" ilk="function" name="dom_node_append_child" returns="DomNode" signature="dom_node_append_child(DomNode newChild)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_node_has_child_nodes" returns="boolean" signature="dom_node_has_child_nodes()" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- A ED A Since" ilk="function" name="dom_node_clone_node" returns="DomNode" signature="dom_node_clone_node(boolean deep)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-normalize Since" ilk="function" name="dom_node_normalize" returns="void" signature="dom_node_normalize()" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-Level- -Core-Node-supports Since DOM Level" ilk="function" name="dom_node_is_supported" returns="boolean" signature="dom_node_is_supported(string feature, string version)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-NodeHasAttrs Since DOM Level" ilk="function" name="dom_node_has_attributes" returns="boolean" signature="dom_node_has_attributes()" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Node -compareDocumentPosition Since DOM Level" ilk="function" name="dom_node_compare_document_position" returns="short" signature="dom_node_compare_document_position(DomNode other)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Node -isSameNode Since DOM Level" ilk="function" name="dom_node_is_same_node" returns="boolean" signature="dom_node_is_same_node(DomNode other)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Node -lookupNamespacePrefix Since DOM Level" ilk="function" name="dom_node_lookup_prefix" returns="string" signature="dom_node_lookup_prefix(string namespaceURI)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR DOM-Level- -Core core html Node&amp;#xA;-isDefaultNamespace Since DOM Level" ilk="function" name="dom_node_is_default_namespace" returns="boolean" signature="dom_node_is_default_namespace(string namespaceURI)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR DOM-Level- -Core core html Node&amp;#xA;-lookupNamespaceURI Since DOM Level" ilk="function" name="dom_node_lookup_namespace_uri" returns="string" signature="dom_node_lookup_namespace_uri(string prefix)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Node -isEqualNode Since DOM Level" ilk="function" name="dom_node_is_equal_node" returns="boolean" signature="dom_node_is_equal_node(DomNode arg)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Node -getFeature Since DOM Level" ilk="function" name="dom_node_get_feature" returns="DomNode" signature="dom_node_get_feature(string feature, string version)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Node -setUserData Since DOM Level" ilk="function" name="dom_node_set_user_data" returns="mixed" signature="dom_node_set_user_data(string key, mixed data, userdatahandler handler)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Node -getUserData Since DOM Level" ilk="function" name="dom_node_get_user_data" returns="mixed" signature="dom_node_get_user_data(string key)" src="node.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html ID-ERRORS-DOMErrorHandler-handleError Since" ilk="function" name="dom_domerrorhandler_handle_error" returns="dom_boolean" signature="dom_domerrorhandler_handle_error(domerror error)" src="domerrorhandler.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html i n-methods-StringExtend-findOffset Since" ilk="function" name="dom_string_extend_find_offset16" returns="int" signature="dom_string_extend_find_offset16(int offset32)" src="string_extend.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html i n-methods-StringExtend-findOffset Since" ilk="function" name="dom_string_extend_find_offset32" returns="int" signature="dom_string_extend_find_offset32(int offset16)" src="string_extend.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html ID-handleUserDataEvent Since" ilk="function" name="dom_userdatahandler_handle" returns="dom_void" signature="dom_userdatahandler_handle(short operation, string key, domobject data, node src, node dst)" src="userdatahandler.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- EE F Since" ilk="function" name="dom_element_get_attribute" returns="string" signature="dom_element_get_attribute(string name)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-F F Since" ilk="function" name="dom_element_set_attribute" returns="void" signature="dom_element_set_attribute(string name, string value)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- D AC F Since" ilk="function" name="dom_element_remove_attribute" returns="void" signature="dom_element_remove_attribute(string name)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- A B Since" ilk="function" name="dom_element_get_attribute_node" returns="DOMAttr" signature="dom_element_get_attribute_node(string name)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- Since" ilk="function" name="dom_element_set_attribute_node" returns="DOMAttr" signature="dom_element_set_attribute_node(DOMAttr newAttr)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-D Since" ilk="function" name="dom_element_remove_attribute_node" returns="DOMAttr" signature="dom_element_remove_attribute_node(DOMAttr oldAttr)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- D Since" ilk="function" name="dom_element_get_elements_by_tag_name" returns="DOMNodeList" signature="dom_element_get_elements_by_tag_name(string name)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElGetAttrNS Since DOM Level" ilk="function" name="dom_element_get_attribute_ns" returns="string" signature="dom_element_get_attribute_ns(string namespaceURI, string localName)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElSetAttrNS Since DOM Level" ilk="function" name="dom_element_set_attribute_ns" returns="void" signature="dom_element_set_attribute_ns(string namespaceURI, string qualifiedName, string value)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElRemAtNS Since DOM Level" ilk="function" name="dom_element_remove_attribute_ns" returns="void" signature="dom_element_remove_attribute_ns(string namespaceURI, string localName)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElGetAtNodeNS Since DOM Level" ilk="function" name="dom_element_get_attribute_node_ns" returns="DOMAttr" signature="dom_element_get_attribute_node_ns(string namespaceURI, string localName)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElSetAtNodeNS Since DOM Level" ilk="function" name="dom_element_set_attribute_node_ns" returns="DOMAttr" signature="dom_element_set_attribute_node_ns(DOMAttr newAttr)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-A C Since DOM Level" ilk="function" name="dom_element_get_elements_by_tag_name_ns" returns="DOMNodeList" signature="dom_element_get_elements_by_tag_name_ns(string namespaceURI, string localName)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElHasAttr Since DOM Level" ilk="function" name="dom_element_has_attribute" returns="boolean" signature="dom_element_has_attribute(string name)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElHasAttrNS Since DOM Level" ilk="function" name="dom_element_has_attribute_ns" returns="boolean" signature="dom_element_has_attribute_ns(string namespaceURI, string localName)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElSetIdAttr Since DOM Level" ilk="function" name="dom_element_set_id_attribute" returns="void" signature="dom_element_set_id_attribute(string name, boolean isId)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElSetIdAttrNS Since DOM Level" ilk="function" name="dom_element_set_id_attribute_ns" returns="void" signature="dom_element_set_id_attribute_ns(string namespaceURI, string localName, boolean isId)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID-ElSetIdAttrNode Since DOM Level" ilk="function" name="dom_element_set_id_attribute_node" returns="void" signature="dom_element_set_id_attribute_node(attr idAttr, boolean isId)" src="element.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html ID- CED D Since" ilk="function" name="dom_domimplementation_has_feature" returns="boolean" signature="dom_domimplementation_has_feature(string feature, string version)" src="domimplementation.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Level- -Core-DOM-createDocType Since DOM Level" ilk="function" name="dom_domimplementation_create_document_type" returns="DOMDocumentType" signature="dom_domimplementation_create_document_type(string qualifiedName, string publicId, string systemId)" src="domimplementation.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html Level- -Core-DOM-createDocument Since DOM Level" ilk="function" name="dom_domimplementation_create_document" returns="DOMDocument" signature="dom_domimplementation_create_document(string namespaceURI, string qualifiedName, DOMDocumentType doctype)" src="domimplementation.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html DOMImplementation -getFeature Since DOM Level" ilk="function" name="dom_domimplementation_get_feature" returns="DOMNode" signature="dom_domimplementation_get_feature(string feature, string version)" src="domimplementation.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html NameList-getName Since" ilk="function" name="dom_namelist_get_name" returns="string" signature="dom_namelist_get_name(int index)" src="namelist.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html NameList-getNamespaceURI Since" ilk="function" name="dom_namelist_get_namespace_uri" returns="string" signature="dom_namelist_get_namespace_uri(int index)" src="namelist.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-ID- C D Since" ilk="function" name="dom_text_split_text" returns="DOMText" signature="dom_text_split_text(int offset)" src="text.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-Text -isWhitespaceInElementContent Since DOM&amp;#xA;Level" ilk="function" name="dom_text_is_whitespace_in_element_content" returns="boolean" signature="dom_text_is_whitespace_in_element_content()" src="text.c" /&gt;
      &lt;scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&amp;#xA;html core-Text -replaceWholeText Since DOM Level" ilk="function" name="dom_text_replace_whole_text" returns="DOMText" signature="dom_text_replace_whole_text(string content)" src="text.c" /&gt;
      &lt;scope doc="create a new broker object capable of requesting" ilk="function" name="enchant_broker_init" returns="resource" signature="enchant_broker_init()" src="enchant.c" /&gt;
      &lt;scope doc="Destroys the broker object and its dictionnaries" ilk="function" name="enchant_broker_free" returns="boolean" signature="enchant_broker_free(resource broker)" src="enchant.c" /&gt;
      &lt;scope doc="Returns the last error of the broker" ilk="function" name="enchant_broker_get_error" returns="string" signature="enchant_broker_get_error(resource broker)" src="enchant.c" /&gt;
      &lt;scope doc="Set the directory path for a given backend works with&amp;#xA;ispell and myspell" ilk="function" name="enchant_broker_set_dict_path" returns="bool" signature="enchant_broker_set_dict_path(resource broker, int dict_type, string value)" src="enchant.c" /&gt;
      &lt;scope doc="Get the directory path for a given backend works with&amp;#xA;ispell and myspell" ilk="function" name="enchant_broker_get_dict_path" returns="string" signature="enchant_broker_get_dict_path(resource broker, int dict_type)" src="enchant.c" /&gt;
      &lt;scope doc="Lists the dictionaries available for the given broker" ilk="function" name="enchant_broker_list_dicts" returns="string" signature="enchant_broker_list_dicts(resource broker)" src="enchant.c" /&gt;
      &lt;scope doc="create a new dictionary using tag the non-empty&amp;#xA;language tag you wish to request a dictionary for quot&amp;#xA;en US" ilk="function" name="enchant_broker_request_dict" returns="resource" signature="enchant_broker_request_dict(resource broker, string tag)" src="enchant.c" /&gt;
      &lt;scope doc="creates a dictionary using a PWL file A PWL file is&amp;#xA;personal word file one word per line It must" ilk="function" name="enchant_broker_request_pwl_dict" returns="resource" signature="enchant_broker_request_pwl_dict(resource broker, string filename)" src="enchant.c" /&gt;
      &lt;scope doc="Free the dictionary resource" ilk="function" name="enchant_broker_free_dict" returns="resource" signature="enchant_broker_free_dict(resource dict)" src="enchant.c" /&gt;
      &lt;scope doc="Whether a dictionary exists or not Using non-empty tag" ilk="function" name="enchant_broker_dict_exists" returns="bool" signature="enchant_broker_dict_exists(resource broker, string tag)" src="enchant.c" /&gt;
      &lt;scope doc="Declares a preference of dictionaries to use for the&amp;#xA;language described referred to by &amp;apos;tag&amp;apos; The ordering is&amp;#xA;a comma" ilk="function" name="enchant_broker_set_ordering" returns="bool" signature="enchant_broker_set_ordering(resource broker, string tag, string ordering)" src="enchant.c" /&gt;
      &lt;scope doc="Enumerates the Enchant providers and tells you some&amp;#xA;rudimentary information about them The same info is&amp;#xA;provided through phpinfo" ilk="function" name="enchant_broker_describe" returns="array" signature="enchant_broker_describe(resource broker)" src="enchant.c" /&gt;
      &lt;scope doc="If the word is correctly spelled return true otherwise&amp;#xA;return false if suggestions variable is provided fill&amp;#xA;it with spelling" ilk="function" name="enchant_dict_quick_check" returns="bool" signature="enchant_dict_quick_check(resource dict, string word [, array &amp;amp;suggestions])" src="enchant.c" /&gt;
      &lt;scope doc="If the word is correctly spelled return true otherwise&amp;#xA;return false" ilk="function" name="enchant_dict_check" returns="bool" signature="enchant_dict_check(resource dict, string word)" src="enchant.c" /&gt;
      &lt;scope doc="Will return a list of values if any of those&amp;#xA;pre-conditions are not met" ilk="function" name="enchant_dict_suggest" returns="array" signature="enchant_dict_suggest(resource dict, string word)" src="enchant.c" /&gt;
      &lt;scope doc="add &amp;apos;word&amp;apos; to personal word list" ilk="function" name="enchant_dict_add_to_personal" returns="void" signature="enchant_dict_add_to_personal(resource dict, string word)" src="enchant.c" /&gt;
      &lt;scope doc="add &amp;apos;word&amp;apos; to this spell-checking session" ilk="function" name="enchant_dict_add_to_session" returns="void" signature="enchant_dict_add_to_session(resource dict, string word)" src="enchant.c" /&gt;
      &lt;scope doc="whether or not &amp;apos;word&amp;apos; exists in this spelling-session" ilk="function" name="enchant_dict_is_in_session" returns="bool" signature="enchant_dict_is_in_session(resource dict, string word)" src="enchant.c" /&gt;
      &lt;scope doc="add a correction for &amp;apos;mis&amp;apos; using &amp;apos;cor&amp;apos; Notes that you&amp;#xA;replaced mis with cor so it&amp;apos;s possibly more likely that" ilk="function" name="enchant_dict_store_replacement" returns="void" signature="enchant_dict_store_replacement(resource dict, string mis, string cor)" src="enchant.c" /&gt;
      &lt;scope doc="Returns the last error of the current spelling-session" ilk="function" name="enchant_dict_get_error" returns="string" signature="enchant_dict_get_error(resource dict)" src="enchant.c" /&gt;
      &lt;scope doc="Describes an individual dictionary &amp;apos;dict&amp;apos;" ilk="function" name="enchant_dict_describe" returns="array" signature="enchant_dict_describe(resource dict)" src="enchant.c" /&gt;
      &lt;scope doc="Opens a connection to a MySQL Server" ilk="function" name="mysql_connect" returns="resource" signature="mysql_connect([string hostname[:port][:/path/to/socket] [, string username [, string password [, bool new [, int flags]]]]])" src="php_mysql.c" /&gt;
      &lt;scope doc="Opens a persistent connection to a MySQL Server" ilk="function" name="mysql_pconnect" returns="resource" signature="mysql_pconnect([string hostname[:port][:/path/to/socket] [, string username [, string password [, int flags]]]])" src="php_mysql.c" /&gt;
      &lt;scope doc="Close a MySQL connection" ilk="function" name="mysql_close" returns="bool" signature="mysql_close([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Selects a MySQL database" ilk="function" name="mysql_select_db" returns="bool" signature="mysql_select_db(string database_name [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns a string that represents the client library&amp;#xA;version" ilk="function" name="mysql_get_client_info" returns="string" signature="mysql_get_client_info(void)" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns a string describing the type of connection in&amp;#xA;use including the server host name" ilk="function" name="mysql_get_host_info" returns="string" signature="mysql_get_host_info([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns the protocol version used by current connection" ilk="function" name="mysql_get_proto_info" returns="int" signature="mysql_get_proto_info([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns a string that represents the server version&amp;#xA;number" ilk="function" name="mysql_get_server_info" returns="string" signature="mysql_get_server_info([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns a string containing information about the most&amp;#xA;recent query" ilk="function" name="mysql_info" returns="string" signature="mysql_info([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns the thread id of current connection" ilk="function" name="mysql_thread_id" returns="int" signature="mysql_thread_id([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns a string containing status information" ilk="function" name="mysql_stat" returns="string" signature="mysql_stat([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns the default character set for the current&amp;#xA;connection" ilk="function" name="mysql_client_encoding" returns="string" signature="mysql_client_encoding([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="sets client character set" ilk="function" name="mysql_set_charset" returns="bool" signature="mysql_set_charset(string csname [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Create a MySQL database" ilk="function" name="mysql_create_db" returns="bool" signature="mysql_create_db(string database_name [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Drops delete a MySQL database" ilk="function" name="mysql_drop_db" returns="bool" signature="mysql_drop_db(string database_name [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Sends an SQL query to MySQL" ilk="function" name="mysql_query" returns="resource" signature="mysql_query(string query [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Sends an SQL query to MySQL without fetching and&amp;#xA;buffering the result rows" ilk="function" name="mysql_unbuffered_query" returns="resource" signature="mysql_unbuffered_query(string query [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Sends an SQL query to MySQL" ilk="function" name="mysql_db_query" returns="resource" signature="mysql_db_query(string database_name, string query [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="List databases available on a MySQL server" ilk="function" name="mysql_list_dbs" returns="resource" signature="mysql_list_dbs([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="List tables in a MySQL database" ilk="function" name="mysql_list_tables" returns="resource" signature="mysql_list_tables(string database_name [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="List MySQL result fields" ilk="function" name="mysql_list_fields" returns="resource" signature="mysql_list_fields(string database_name, string table_name [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns a result set describing the current server&amp;#xA;threads" ilk="function" name="mysql_list_processes" returns="resource" signature="mysql_list_processes([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns the text of the error message from previous&amp;#xA;MySQL operation" ilk="function" name="mysql_error" returns="string" signature="mysql_error([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns the number of the error message from previous&amp;#xA;MySQL operation" ilk="function" name="mysql_errno" returns="int" signature="mysql_errno([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets number of affected rows in previous MySQL&amp;#xA;operation" ilk="function" name="mysql_affected_rows" returns="int" signature="mysql_affected_rows([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Escape string for mysql query" ilk="function" name="mysql_escape_string" returns="string" signature="mysql_escape_string(string to_be_escaped)" src="php_mysql.c" /&gt;
      &lt;scope doc="Escape special characters in a string for use in a SQL&amp;#xA;statement taking into account the current charset of&amp;#xA;the" ilk="function" name="mysql_real_escape_string" returns="string" signature="mysql_real_escape_string(string to_be_escaped [, int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets the ID generated from the previous INSERT&amp;#xA;operation" ilk="function" name="mysql_insert_id" returns="int" signature="mysql_insert_id([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets result data" ilk="function" name="mysql_result" returns="mixed" signature="mysql_result(resource result, int row [, mixed field])" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets number of rows in a result" ilk="function" name="mysql_num_rows" returns="int" signature="mysql_num_rows(resource result)" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets number of fields in a result" ilk="function" name="mysql_num_fields" returns="int" signature="mysql_num_fields(resource result)" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets a result row as an enumerated array" ilk="function" name="mysql_fetch_row" returns="array" signature="mysql_fetch_row(resource result)" src="php_mysql.c" /&gt;
      &lt;scope doc="Fetch a result row as an object" ilk="function" name="mysql_fetch_object" returns="object" signature="mysql_fetch_object(resource result [, string class_name [, NULL" src="php_mysql.c" /&gt;
      &lt;scope doc="Fetch a result row as an array associative numeric or&amp;#xA;both" ilk="function" name="mysql_fetch_array" returns="array" signature="mysql_fetch_array(resource result [, int result_type])" src="php_mysql.c" /&gt;
      &lt;scope doc="Fetch a result row as an associative array" ilk="function" name="mysql_fetch_assoc" returns="array" signature="mysql_fetch_assoc(resource result)" src="php_mysql.c" /&gt;
      &lt;scope doc="Move internal result pointer" ilk="function" name="mysql_data_seek" returns="bool" signature="mysql_data_seek(resource result, int row_number)" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets max data size of each column in a result" ilk="function" name="mysql_fetch_lengths" returns="array" signature="mysql_fetch_lengths(resource result)" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets column information from a result and return as an&amp;#xA;object" ilk="function" name="mysql_fetch_field" returns="object" signature="mysql_fetch_field(resource result [, int field_offset])" src="php_mysql.c" /&gt;
      &lt;scope doc="Sets result pointer to a specific field offset" ilk="function" name="mysql_field_seek" returns="bool" signature="mysql_field_seek(resource result, int field_offset)" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets the name of the specified field in a result" ilk="function" name="mysql_field_name" returns="string" signature="mysql_field_name(resource result, int field_index)" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets name of the table the specified field is in" ilk="function" name="mysql_field_table" returns="string" signature="mysql_field_table(resource result, int field_offset)" src="php_mysql.c" /&gt;
      &lt;scope doc="Returns the length of the specified field" ilk="function" name="mysql_field_len" returns="int" signature="mysql_field_len(resource result, int field_offset)" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets the type of the specified field in a result" ilk="function" name="mysql_field_type" returns="string" signature="mysql_field_type(resource result, int field_offset)" src="php_mysql.c" /&gt;
      &lt;scope doc="Gets the flags associated with the specified field in a&amp;#xA;result" ilk="function" name="mysql_field_flags" returns="string" signature="mysql_field_flags(resource result, int field_offset)" src="php_mysql.c" /&gt;
      &lt;scope doc="Free result memory" ilk="function" name="mysql_free_result" returns="bool" signature="mysql_free_result(resource result)" src="php_mysql.c" /&gt;
      &lt;scope doc="Ping a server connection If no connection then&amp;#xA;reconnect" ilk="function" name="mysql_ping" returns="bool" signature="mysql_ping([int link_identifier])" src="php_mysql.c" /&gt;
      &lt;scope doc="Create new zip using source uri for output" ilk="function" name="zip_open" returns="resource" signature="zip_open(string filename)" src="php_zip.c" /&gt;
      &lt;scope doc="Close a Zip archive" ilk="function" name="zip_close" returns="void" signature="zip_close(resource zip)" src="php_zip.c" /&gt;
      &lt;scope doc="Returns the next file in the archive" ilk="function" name="zip_read" returns="resource" signature="zip_read(resource zip)" src="php_zip.c" /&gt;
      &lt;scope doc="Open a Zip File pointed by the resource entry" ilk="function" name="zip_entry_open" returns="bool" signature="zip_entry_open(resource zip_dp, resource zip_entry [, string mode])" src="php_zip.c" /&gt;
      &lt;scope doc="Close a zip entry" ilk="function" name="zip_entry_close" returns="bool" signature="zip_entry_close(resource zip_ent)" src="php_zip.c" /&gt;
      &lt;scope doc="Read from an open directory entry" ilk="function" name="zip_entry_read" returns="mixed" signature="zip_entry_read(resource zip_entry [, int len])" src="php_zip.c" /&gt;
      &lt;scope doc="Return the name given a ZZip entry" ilk="function" name="zip_entry_name" returns="string" signature="zip_entry_name(resource zip_entry)" src="php_zip.c" /&gt;
      &lt;scope doc="Return the compressed size of a ZZip entry" ilk="function" name="zip_entry_compressedsize" returns="int" signature="zip_entry_compressedsize(resource zip_entry)" src="php_zip.c" /&gt;
      &lt;scope doc="Return the actual filesize of a ZZip entry" ilk="function" name="zip_entry_filesize" returns="int" signature="zip_entry_filesize(resource zip_entry)" src="php_zip.c" /&gt;
      &lt;scope doc="Return a string containing the compression method used&amp;#xA;on a particular entry" ilk="function" name="zip_entry_compressionmethod" returns="string" signature="zip_entry_compressionmethod(resource zip_entry)" src="php_zip.c" /&gt;
      &lt;scope doc="Return array of available PDO drivers" ilk="function" name="pdo_drivers" returns="array" signature="pdo_drivers()" src="pdo.c" /&gt;
      &lt;scope doc="Get the scripts which are accelerated by&amp;#xA;ZendAccelerator" ilk="function" name="accelerator_get_scripts" returns="array" signature="accelerator_get_scripts()" src="zend_accelerator_module.c" /&gt;
      &lt;scope doc="Obtain statistics information regarding code&amp;#xA;acceleration" ilk="function" name="accelerator_get_status" returns="array" signature="accelerator_get_status([bool fetch_scripts])" src="zend_accelerator_module.c" /&gt;
      &lt;scope doc="Obtain configuration information" ilk="function" name="accelerator_get_configuration" returns="array" signature="accelerator_get_configuration()" src="zend_accelerator_module.c" /&gt;
      &lt;scope doc="Request that the contents of the opcode cache to be&amp;#xA;reset" ilk="function" name="accelerator_reset" returns="void" signature="accelerator_reset()" src="zend_accelerator_module.c" /&gt;
      &lt;scope doc="Invalidates cached script in necessary or forced" ilk="function" name="opcache_invalidate" returns="void" signature="opcache_invalidate(string $script [, bool $force = false])" src="zend_accelerator_module.c" /&gt;
      &lt;scope doc="Parse a document stored in a string" ilk="function" name="tidy_parse_string" returns="bool" signature="tidy_parse_string(string input [, mixed config_options [, string encoding]])" src="tidy.c" /&gt;
      &lt;scope doc="Return warnings and errors which occurred parsing the&amp;#xA;specified document" ilk="function" name="tidy_get_error_buffer" returns="string" signature="tidy_get_error_buffer()" src="tidy.c" /&gt;
      &lt;scope doc="Return a string representing the parsed tidy markup" ilk="function" name="tidy_get_output" returns="string" signature="tidy_get_output()" src="tidy.c" /&gt;
      &lt;scope doc="Parse markup in file or URI" ilk="function" name="tidy_parse_file" returns="boolean" signature="tidy_parse_file(string file [, mixed config_options [, string encoding [, bool use_include_path]]])" src="tidy.c" /&gt;
      &lt;scope doc="Execute configured cleanup and repair operations on&amp;#xA;parsed markup" ilk="function" name="tidy_clean_repair" returns="boolean" signature="tidy_clean_repair()" src="tidy.c" /&gt;
      &lt;scope doc="Repair a string using an optionally provided&amp;#xA;configuration file" ilk="function" name="tidy_repair_string" returns="boolean" signature="tidy_repair_string(string data [, mixed config_file [, string encoding]])" src="tidy.c" /&gt;
      &lt;scope doc="Repair a file using an optionally provided&amp;#xA;configuration file" ilk="function" name="tidy_repair_file" returns="boolean" signature="tidy_repair_file(string filename [, mixed config_file [, string encoding [, bool use_include_path]]])" src="tidy.c" /&gt;
      &lt;scope doc="Run configured diagnostics on parsed and repaired&amp;#xA;markup" ilk="function" name="tidy_diagnose" returns="boolean" signature="tidy_diagnose()" src="tidy.c" /&gt;
      &lt;scope doc="Get release date version for Tidy library" ilk="function" name="tidy_get_release" returns="string" signature="tidy_get_release()" src="tidy.c" /&gt;
      &lt;scope doc="Returns the documentation for the given option name" ilk="function" name="tidy_get_opt_doc" returns="string" signature="tidy_get_opt_doc(tidy resource, string optname)" src="tidy.c" /&gt;
      &lt;scope doc="Get current Tidy configuration" ilk="function" name="tidy_get_config" returns="array" signature="tidy_get_config()" src="tidy.c" /&gt;
      &lt;scope doc="Get status of specfied document" ilk="function" name="tidy_get_status" returns="int" signature="tidy_get_status()" src="tidy.c" /&gt;
      &lt;scope doc="Get the Detected HTML version for the specified&amp;#xA;document" ilk="function" name="tidy_get_html_ver" returns="int" signature="tidy_get_html_ver()" src="tidy.c" /&gt;
      &lt;scope doc="Indicates if the document is a XHTML document" ilk="function" name="tidy_is_xhtml" returns="boolean" signature="tidy_is_xhtml()" src="tidy.c" /&gt;
      &lt;scope doc="Indicates if the document is a generic non HTML XHTML&amp;#xA;XML document" ilk="function" name="tidy_is_xml" returns="boolean" signature="tidy_is_xml()" src="tidy.c" /&gt;
      &lt;scope doc="Returns the Number of Tidy errors encountered for&amp;#xA;specified document" ilk="function" name="tidy_error_count" returns="int" signature="tidy_error_count()" src="tidy.c" /&gt;
      &lt;scope doc="Returns the Number of Tidy warnings encountered for&amp;#xA;specified document" ilk="function" name="tidy_warning_count" returns="int" signature="tidy_warning_count()" src="tidy.c" /&gt;
      &lt;scope doc="Returns the Number of Tidy accessibility warnings&amp;#xA;encountered for specified document" ilk="function" name="tidy_access_count" returns="int" signature="tidy_access_count()" src="tidy.c" /&gt;
      &lt;scope doc="Returns the Number of Tidy configuration errors&amp;#xA;encountered for specified document" ilk="function" name="tidy_config_count" returns="int" signature="tidy_config_count()" src="tidy.c" /&gt;
      &lt;scope doc="Returns the value of the specified configuration option&amp;#xA;for the tidy document" ilk="function" name="tidy_getopt" returns="mixed" signature="tidy_getopt(string option)" src="tidy.c" /&gt;
      &lt;scope doc="Returns a TidyNode Object representing the root of the&amp;#xA;tidy parse tree" ilk="function" name="tidy_get_root" returns="TidyNode" signature="tidy_get_root()" src="tidy.c" /&gt;
      &lt;scope doc="Returns a TidyNode Object starting from the lt HTML gt&amp;#xA;tag of the tidy parse tree" ilk="function" name="tidy_get_html" returns="TidyNode" signature="tidy_get_html()" src="tidy.c" /&gt;
      &lt;scope doc="Returns a TidyNode Object starting from the lt HEAD gt&amp;#xA;tag of the tidy parse tree" ilk="function" name="tidy_get_head" returns="TidyNode" signature="tidy_get_head()" src="tidy.c" /&gt;
      &lt;scope doc="Returns a TidyNode Object starting from the lt BODY gt&amp;#xA;tag of the tidy parse tree" ilk="function" name="tidy_get_body" returns="TidyNode" signature="tidy_get_body(resource tidy)" src="tidy.c" /&gt;
      &lt;scope doc="Return cURL version information" ilk="function" name="curl_version" returns="array" signature="curl_version([int version])" src="interface.c" /&gt;
      &lt;scope doc="Initialize a cURL session" ilk="function" name="curl_init" returns="resource" signature="curl_init([string url])" src="interface.c" /&gt;
      &lt;scope doc="Copy a cURL handle along with all of it&amp;apos;s preferences" ilk="function" name="curl_copy_handle" returns="resource" signature="curl_copy_handle(resource ch)" src="interface.c" /&gt;
      &lt;scope doc="Set an option for a cURL transfer" ilk="function" name="curl_setopt" returns="bool" signature="curl_setopt(resource ch, int option, mixed value)" src="interface.c" /&gt;
      &lt;scope doc="Set an array of option for a cURL transfer" ilk="function" name="curl_setopt_array" returns="bool" signature="curl_setopt_array(resource ch, array options)" src="interface.c" /&gt;
      &lt;scope doc="Perform a cURL session" ilk="function" name="curl_exec" returns="bool" signature="curl_exec(resource ch)" src="interface.c" /&gt;
      &lt;scope doc="Get information regarding a specific transfer" ilk="function" name="curl_getinfo" returns="mixed" signature="curl_getinfo(resource ch [, int option])" src="interface.c" /&gt;
      &lt;scope doc="Return a string contain the last error for the current&amp;#xA;session" ilk="function" name="curl_error" returns="string" signature="curl_error(resource ch)" src="interface.c" /&gt;
      &lt;scope doc="Return an integer containing the last error number" ilk="function" name="curl_errno" returns="int" signature="curl_errno(resource ch)" src="interface.c" /&gt;
      &lt;scope doc="Close a cURL session" ilk="function" name="curl_close" returns="void" signature="curl_close(resource ch)" src="interface.c" /&gt;
      &lt;scope doc="return string describing error code" ilk="function" name="curl_strerror" returns="bool" signature="curl_strerror(int code)" src="interface.c" /&gt;
      &lt;scope doc="Reset all options of a libcurl session handle" ilk="function" name="curl_reset" returns="void" signature="curl_reset(resource ch)" src="interface.c" /&gt;
      &lt;scope doc="URL encodes the given string" ilk="function" name="curl_escape" returns="void" signature="curl_escape(resource ch, string str)" src="interface.c" /&gt;
      &lt;scope doc="URL decodes the given string" ilk="function" name="curl_unescape" returns="void" signature="curl_unescape(resource ch, string str)" src="interface.c" /&gt;
      &lt;scope doc="pause and unpause a connection" ilk="function" name="curl_pause" returns="void" signature="curl_pause(resource ch, int bitmask)" src="interface.c" /&gt;
      &lt;scope doc="Returns a new cURL multi handle" ilk="function" name="curl_multi_init" returns="resource" signature="curl_multi_init(void)" src="multi.c" /&gt;
      &lt;scope doc="Add a normal cURL handle to a cURL multi handle" ilk="function" name="curl_multi_add_handle" returns="int" signature="curl_multi_add_handle(resource mh, resource ch)" src="multi.c" /&gt;
      &lt;scope doc="Remove a multi handle from a set of cURL handles" ilk="function" name="curl_multi_remove_handle" returns="int" signature="curl_multi_remove_handle(resource mh, resource ch)" src="multi.c" /&gt;
      &lt;scope doc="Get all the sockets associated with the cURL extension&amp;#xA;which can then be quot selected quot" ilk="function" name="curl_multi_select" returns="int" signature="curl_multi_select(resource mh[, double timeout])" src="multi.c" /&gt;
      &lt;scope doc="Run the sub-connections of the current cURL handle" ilk="function" name="curl_multi_exec" returns="int" signature="curl_multi_exec(resource mh, int &amp;amp;still_running)" src="multi.c" /&gt;
      &lt;scope doc="Return the content of a cURL handle if CURLOPT&amp;#xA;RETURNTRANSFER is set" ilk="function" name="curl_multi_getcontent" returns="string" signature="curl_multi_getcontent(resource ch)" src="multi.c" /&gt;
      &lt;scope doc="Get information about the current transfers" ilk="function" name="curl_multi_info_read" returns="array" signature="curl_multi_info_read(resource mh [, long msgs_in_queue])" src="multi.c" /&gt;
      &lt;scope doc="Close a set of cURL handles" ilk="function" name="curl_multi_close" returns="void" signature="curl_multi_close(resource mh)" src="multi.c" /&gt;
      &lt;scope doc="return string describing error code" ilk="function" name="curl_multi_strerror" returns="bool" signature="curl_multi_strerror(int code)" src="multi.c" /&gt;
      &lt;scope doc="Set an option for the curl multi handle" ilk="function" name="curl_multi_setopt" returns="int" signature="curl_multi_setopt(resource mh, int option, mixed value)" src="multi.c" /&gt;
      &lt;scope doc="Initialize a share curl handle" ilk="function" name="curl_share_init" returns="void" signature="curl_share_init()" src="share.c" /&gt;
      &lt;scope doc="Close a set of cURL handles" ilk="function" name="curl_share_close" returns="void" signature="curl_share_close(resource sh)" src="share.c" /&gt;
      &lt;scope doc="Set an option for a cURL transfer" ilk="function" name="curl_share_setopt" returns="bool" signature="curl_share_setopt(resource sh, int option, mixed value)" src="share.c" /&gt;
      &lt;scope doc="Create the CURLFile object" ilk="function" name="curl_file_create" returns="CURLFile" signature="curl_file_create(string $name, [string $mimetype [, string $postfilename]])" src="curl_file.c" /&gt;
      &lt;scope doc="Define a PHP variable to an Oracle column by name" ilk="function" name="oci_define_by_name" returns="bool" signature="oci_define_by_name(resource stmt, string name, mixed &amp;amp;var [, int type])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Bind a PHP variable to an Oracle placeholder by name" ilk="function" name="oci_bind_by_name" returns="bool" signature="oci_bind_by_name(resource stmt, string name, mixed &amp;amp;var, [, int maxlength [, int type]])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Bind a PHP array to an Oracle PL SQL type by name" ilk="function" name="oci_bind_array_by_name" returns="bool" signature="oci_bind_array_by_name(resource stmt, string name, array &amp;amp;var, int max_table_length [, int max_item_length [, int type ]])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Deletes large object description" ilk="function" name="oci_free_descriptor" returns="bool" signature="oci_free_descriptor()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Saves a large object" ilk="function" name="oci_lob_save" returns="bool" signature="oci_lob_save( string data [, int offset ])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Loads file into a LOB" ilk="function" name="oci_lob_import" returns="bool" signature="oci_lob_import( string filename )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Loads a large object" ilk="function" name="oci_lob_load" returns="string" signature="oci_lob_load()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Reads particular part of a large object" ilk="function" name="oci_lob_read" returns="string" signature="oci_lob_read( int length )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Checks if EOF is reached" ilk="function" name="oci_lob_eof" returns="bool" signature="oci_lob_eof()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Tells LOB pointer position" ilk="function" name="oci_lob_tell" returns="int" signature="oci_lob_tell()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Rewind pointer of a LOB" ilk="function" name="oci_lob_rewind" returns="bool" signature="oci_lob_rewind()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Moves the pointer of a LOB" ilk="function" name="oci_lob_seek" returns="bool" signature="oci_lob_seek( int offset [, int whence ])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Returns size of a large object" ilk="function" name="oci_lob_size" returns="int" signature="oci_lob_size()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Writes data to current position of a LOB" ilk="function" name="oci_lob_write" returns="int" signature="oci_lob_write( string string [, int length ])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Appends data from a LOB to another LOB" ilk="function" name="oci_lob_append" returns="bool" signature="oci_lob_append( object lob )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Truncates a LOB" ilk="function" name="oci_lob_truncate" returns="bool" signature="oci_lob_truncate( [ int length ])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Erases a specified portion of the internal LOB starting&amp;#xA;at a specified offset" ilk="function" name="oci_lob_erase" returns="int" signature="oci_lob_erase( [ int offset [, int length ] ] )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Flushes the LOB buffer" ilk="function" name="oci_lob_flush" returns="bool" signature="oci_lob_flush( [ int flag ] )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Enables disables buffering for a LOB" ilk="function" name="ocisetbufferinglob" returns="bool" signature="ocisetbufferinglob( boolean flag )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Returns current state of buffering for a LOB" ilk="function" name="ocigetbufferinglob" returns="bool" signature="ocigetbufferinglob()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Copies data from a LOB to another LOB" ilk="function" name="oci_lob_copy" returns="bool" signature="oci_lob_copy( object lob_to, object lob_from [, int length ] )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Tests to see if two LOB FILE locators are equal" ilk="function" name="oci_lob_is_equal" returns="bool" signature="oci_lob_is_equal( object lob1, object lob2 )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Writes a large object into a file" ilk="function" name="oci_lob_export" returns="bool" signature="oci_lob_export([string filename [, int start [, int length]]])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Writes temporary blob" ilk="function" name="oci_lob_write_temporary" returns="bool" signature="oci_lob_write_temporary(string var [, int lob_type])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Closes lob descriptor" ilk="function" name="oci_lob_close" returns="bool" signature="oci_lob_close()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Initialize a new empty descriptor LOB FILE LOB is&amp;#xA;default" ilk="function" name="oci_new_descriptor" returns="object" signature="oci_new_descriptor(resource connection [, int type])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Rollback the current context" ilk="function" name="oci_rollback" returns="bool" signature="oci_rollback(resource connection)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Commit the current context" ilk="function" name="oci_commit" returns="bool" signature="oci_commit(resource connection)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Tell the name of a column" ilk="function" name="oci_field_name" returns="string" signature="oci_field_name(resource stmt, int col)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Tell the maximum data size of a column" ilk="function" name="oci_field_size" returns="int" signature="oci_field_size(resource stmt, int col)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Tell the scale of a column" ilk="function" name="oci_field_scale" returns="int" signature="oci_field_scale(resource stmt, int col)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Tell the precision of a column" ilk="function" name="oci_field_precision" returns="int" signature="oci_field_precision(resource stmt, int col)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Tell the data type of a column" ilk="function" name="oci_field_type" returns="mixed" signature="oci_field_type(resource stmt, int col)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Tell the raw oracle data type of a column" ilk="function" name="oci_field_type_raw" returns="int" signature="oci_field_type_raw(resource stmt, int col)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Tell whether a column is NULL" ilk="function" name="oci_field_is_null" returns="bool" signature="oci_field_is_null(resource stmt, int col)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Toggle internal debugging output for the OCI extension" ilk="function" name="oci_internal_debug" returns="void" signature="oci_internal_debug(int onoff)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Execute a parsed statement" ilk="function" name="oci_execute" returns="bool" signature="oci_execute(resource stmt [, int mode])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Cancel reading from a cursor" ilk="function" name="oci_cancel" returns="bool" signature="oci_cancel(resource stmt)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Prepare a new row of data for reading" ilk="function" name="oci_fetch" returns="bool" signature="oci_fetch(resource stmt)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Fetch a row of result data into an array" ilk="function" name="ocifetchinto" returns="int" signature="ocifetchinto(resource stmt, array &amp;amp;output [, int mode])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Fetch all rows of result data into an array" ilk="function" name="oci_fetch_all" returns="int" signature="oci_fetch_all(resource stmt, array &amp;amp;output[, int skip[, int maxrows[, int flags]]])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Fetch a result row as an object" ilk="function" name="oci_fetch_object" returns="object" signature="oci_fetch_object( resource stmt )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Fetch a result row as an enumerated array" ilk="function" name="oci_fetch_row" returns="array" signature="oci_fetch_row( resource stmt )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Fetch a result row as an associative array" ilk="function" name="oci_fetch_assoc" returns="array" signature="oci_fetch_assoc( resource stmt )" src="oci8_interface.c" /&gt;
      &lt;scope doc="Fetch a result row as an array" ilk="function" name="oci_fetch_array" returns="array" signature="oci_fetch_array( resource stmt [, int mode ])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Free all resources associated with a statement" ilk="function" name="oci_free_statement" returns="bool" signature="oci_free_statement(resource stmt)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Disconnect from database" ilk="function" name="oci_close" returns="bool" signature="oci_close(resource connection)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Connect to an Oracle database and log on Returns a new&amp;#xA;session" ilk="function" name="oci_new_connect" returns="resource" signature="oci_new_connect(string user, string pass [, string db])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Connect to an Oracle database and log on Returns a new&amp;#xA;session" ilk="function" name="oci_connect" returns="resource" signature="oci_connect(string user, string pass [, string db [, string charset [, int session_mode ]])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Connect to an Oracle database using a persistent&amp;#xA;connection and log on Returns a new session" ilk="function" name="oci_pconnect" returns="resource" signature="oci_pconnect(string user, string pass [, string db [, string charset ]])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return the last error of stmt" ilk="function" name="oci_error" returns="array" signature="oci_error([resource stmt" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return the number of result columns in a statement" ilk="function" name="oci_num_fields" returns="int" signature="oci_num_fields(resource stmt)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Parse a SQL or PL SQL statement and return a statement&amp;#xA;resource" ilk="function" name="oci_parse" returns="resource" signature="oci_parse(resource connection, string statement)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Sets the number of rows to be prefetched on execute to&amp;#xA;prefetch rows for stmt" ilk="function" name="oci_set_prefetch" returns="bool" signature="oci_set_prefetch(resource stmt, int prefetch_rows)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Sets the client identifier attribute on the connection" ilk="function" name="oci_set_client_identifier" returns="bool" signature="oci_set_client_identifier(resource connection, string value)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Sets the edition attribute for all subsequent&amp;#xA;connections created" ilk="function" name="oci_set_edition" returns="bool" signature="oci_set_edition(string value)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Sets the module attribute on the connection" ilk="function" name="oci_set_module_name" returns="bool" signature="oci_set_module_name(resource connection, string value)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Sets the action attribute on the connection" ilk="function" name="oci_set_action" returns="bool" signature="oci_set_action(resource connection, string value)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Sets the client info attribute on the connection" ilk="function" name="oci_set_client_info" returns="bool" signature="oci_set_client_info(resource connection, string value)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Changes the password of an account" ilk="function" name="oci_password_change" returns="bool" signature="oci_password_change(resource connection, string username, string old_password, string new_password)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return a new cursor Statement-Handle - use this to bind&amp;#xA;ref-cursors" ilk="function" name="oci_new_cursor" returns="resource" signature="oci_new_cursor(resource connection)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return a single column of result data" ilk="function" name="oci_result" returns="string" signature="oci_result(resource stmt, mixed column)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return a string containing runtime client library&amp;#xA;version information" ilk="function" name="oci_client_version" returns="string" signature="oci_client_version()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return a string containing server version information" ilk="function" name="oci_server_version" returns="string" signature="oci_server_version(resource connection)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return the query type of an OCI statement" ilk="function" name="oci_statement_type" returns="string" signature="oci_statement_type(resource stmt)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return the row count of an OCI statement" ilk="function" name="oci_num_rows" returns="int" signature="oci_num_rows(resource stmt)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Deletes collection object" ilk="function" name="oci_free_collection" returns="bool" signature="oci_free_collection()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Append an object to the collection" ilk="function" name="oci_collection_append" returns="bool" signature="oci_collection_append(string value)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Retrieve the value at collection index ndx" ilk="function" name="oci_collection_element_get" returns="string" signature="oci_collection_element_get(int ndx)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Assign a collection from another existing collection" ilk="function" name="oci_collection_assign" returns="bool" signature="oci_collection_assign(object from)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Assign element val to collection at index ndx" ilk="function" name="oci_collection_element_assign" returns="bool" signature="oci_collection_element_assign(int index, string val)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return the size of a collection" ilk="function" name="oci_collection_size" returns="int" signature="oci_collection_size()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Return the max value of a collection For a varray this&amp;#xA;is the maximum length of the array" ilk="function" name="oci_collection_max" returns="int" signature="oci_collection_max()" src="oci8_interface.c" /&gt;
      &lt;scope doc="Trim num elements from the end of a collection" ilk="function" name="oci_collection_trim" returns="bool" signature="oci_collection_trim(int num)" src="oci8_interface.c" /&gt;
      &lt;scope doc="Initialize a new collection" ilk="function" name="oci_new_collection" returns="object" signature="oci_new_collection(resource connection, string tdo [, string schema])" src="oci8_interface.c" /&gt;
      &lt;scope doc="Toggle indentation on off - returns FALSE on error" ilk="function" name="xmlwriter_set_indent" returns="bool" signature="xmlwriter_set_indent(resource xmlwriter, bool indent)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Set string used for indenting - returns FALSE on error" ilk="function" name="xmlwriter_set_indent_string" returns="bool" signature="xmlwriter_set_indent_string(resource xmlwriter, string indentString)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start attribute - returns FALSE on error" ilk="function" name="xmlwriter_start_attribute" returns="bool" signature="xmlwriter_start_attribute(resource xmlwriter, string name)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End attribute - returns FALSE on error" ilk="function" name="xmlwriter_end_attribute" returns="bool" signature="xmlwriter_end_attribute(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start namespaced attribute - returns FALSE on&amp;#xA;error" ilk="function" name="xmlwriter_start_attribute_ns" returns="bool" signature="xmlwriter_start_attribute_ns(resource xmlwriter, string prefix, string name, string uri)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full attribute - returns FALSE on error" ilk="function" name="xmlwriter_write_attribute" returns="bool" signature="xmlwriter_write_attribute(resource xmlwriter, string name, string content)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full namespaced attribute - returns FALSE on&amp;#xA;error" ilk="function" name="xmlwriter_write_attribute_ns" returns="bool" signature="xmlwriter_write_attribute_ns(resource xmlwriter, string prefix, string name, string uri, string content)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start element tag - returns FALSE on error" ilk="function" name="xmlwriter_start_element" returns="bool" signature="xmlwriter_start_element(resource xmlwriter, string name)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start namespaced element tag - returns FALSE on&amp;#xA;error" ilk="function" name="xmlwriter_start_element_ns" returns="bool" signature="xmlwriter_start_element_ns(resource xmlwriter, string prefix, string name, string uri)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End current element - returns FALSE on error" ilk="function" name="xmlwriter_end_element" returns="bool" signature="xmlwriter_end_element(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End current element - returns FALSE on error" ilk="function" name="xmlwriter_full_end_element" returns="bool" signature="xmlwriter_full_end_element(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full element tag - returns FALSE on error" ilk="function" name="xmlwriter_write_element" returns="bool" signature="xmlwriter_write_element(resource xmlwriter, string name[, string content])" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full namesapced element tag - returns FALSE on&amp;#xA;error" ilk="function" name="xmlwriter_write_element_ns" returns="bool" signature="xmlwriter_write_element_ns(resource xmlwriter, string prefix, string name, string uri[, string content])" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start PI tag - returns FALSE on error" ilk="function" name="xmlwriter_start_pi" returns="bool" signature="xmlwriter_start_pi(resource xmlwriter, string target)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End current PI - returns FALSE on error" ilk="function" name="xmlwriter_end_pi" returns="bool" signature="xmlwriter_end_pi(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full PI tag - returns FALSE on error" ilk="function" name="xmlwriter_write_pi" returns="bool" signature="xmlwriter_write_pi(resource xmlwriter, string target, string content)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start CDATA tag - returns FALSE on error" ilk="function" name="xmlwriter_start_cdata" returns="bool" signature="xmlwriter_start_cdata(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End current CDATA - returns FALSE on error" ilk="function" name="xmlwriter_end_cdata" returns="bool" signature="xmlwriter_end_cdata(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full CDATA tag - returns FALSE on error" ilk="function" name="xmlwriter_write_cdata" returns="bool" signature="xmlwriter_write_cdata(resource xmlwriter, string content)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write text - returns FALSE on error" ilk="function" name="xmlwriter_write_raw" returns="bool" signature="xmlwriter_write_raw(resource xmlwriter, string content)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write text - returns FALSE on error" ilk="function" name="xmlwriter_text" returns="bool" signature="xmlwriter_text(resource xmlwriter, string content)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start comment - returns FALSE on error" ilk="function" name="xmlwriter_start_comment" returns="bool" signature="xmlwriter_start_comment(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create end comment - returns FALSE on error" ilk="function" name="xmlwriter_end_comment" returns="bool" signature="xmlwriter_end_comment(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full comment tag - returns FALSE on error" ilk="function" name="xmlwriter_write_comment" returns="bool" signature="xmlwriter_write_comment(resource xmlwriter, string content)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create document tag - returns FALSE on error" ilk="function" name="xmlwriter_start_document" returns="bool" signature="xmlwriter_start_document(resource xmlwriter, string version, string encoding, string standalone)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End current document - returns FALSE on error" ilk="function" name="xmlwriter_end_document" returns="bool" signature="xmlwriter_end_document(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start DTD tag - returns FALSE on error" ilk="function" name="xmlwriter_start_dtd" returns="bool" signature="xmlwriter_start_dtd(resource xmlwriter, string name, string pubid, string sysid)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End current DTD - returns FALSE on error" ilk="function" name="xmlwriter_end_dtd" returns="bool" signature="xmlwriter_end_dtd(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full DTD tag - returns FALSE on error" ilk="function" name="xmlwriter_write_dtd" returns="bool" signature="xmlwriter_write_dtd(resource xmlwriter, string name, string pubid, string sysid, string subset)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start DTD element - returns FALSE on error" ilk="function" name="xmlwriter_start_dtd_element" returns="bool" signature="xmlwriter_start_dtd_element(resource xmlwriter, string name)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End current DTD element - returns FALSE on error" ilk="function" name="xmlwriter_end_dtd_element" returns="bool" signature="xmlwriter_end_dtd_element(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full DTD element tag - returns FALSE on error" ilk="function" name="xmlwriter_write_dtd_element" returns="bool" signature="xmlwriter_write_dtd_element(resource xmlwriter, string name, string content)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start DTD AttList - returns FALSE on error" ilk="function" name="xmlwriter_start_dtd_attlist" returns="bool" signature="xmlwriter_start_dtd_attlist(resource xmlwriter, string name)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End current DTD AttList - returns FALSE on error" ilk="function" name="xmlwriter_end_dtd_attlist" returns="bool" signature="xmlwriter_end_dtd_attlist(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full DTD AttList tag - returns FALSE on error" ilk="function" name="xmlwriter_write_dtd_attlist" returns="bool" signature="xmlwriter_write_dtd_attlist(resource xmlwriter, string name, string content)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create start DTD Entity - returns FALSE on error" ilk="function" name="xmlwriter_start_dtd_entity" returns="bool" signature="xmlwriter_start_dtd_entity(resource xmlwriter, string name, bool isparam)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="End current DTD Entity - returns FALSE on error" ilk="function" name="xmlwriter_end_dtd_entity" returns="bool" signature="xmlwriter_end_dtd_entity(resource xmlwriter)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Write full DTD Entity tag - returns FALSE on error" ilk="function" name="xmlwriter_write_dtd_entity" returns="bool" signature="xmlwriter_write_dtd_entity(resource xmlwriter, string name, string content [, int pe [, string pubid [, string sysid [, string ndataid]]]])" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create new xmlwriter using source uri for output" ilk="function" name="xmlwriter_open_uri" returns="resource" signature="xmlwriter_open_uri(resource xmlwriter, string source)" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Create new xmlwriter using memory for string output" ilk="function" name="xmlwriter_open_memory" returns="resource" signature="xmlwriter_open_memory()" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Output current buffer as string" ilk="function" name="xmlwriter_output_memory" returns="string" signature="xmlwriter_output_memory(resource xmlwriter [,bool flush])" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Output current buffer" ilk="function" name="xmlwriter_flush" returns="mixed" signature="xmlwriter_flush(resource xmlwriter [,bool empty])" src="php_xmlwriter.c" /&gt;
      &lt;scope doc="Close all ODBC connections" ilk="function" name="odbc_close_all" returns="void" signature="odbc_close_all(void)" src="php_odbc.c" /&gt;
      &lt;scope doc="Handle binary column data" ilk="function" name="odbc_binmode" returns="bool" signature="odbc_binmode(int result_id, int mode)" src="php_odbc.c" /&gt;
      &lt;scope doc="Handle LONG columns" ilk="function" name="odbc_longreadlen" returns="bool" signature="odbc_longreadlen(int result_id, int length)" src="php_odbc.c" /&gt;
      &lt;scope doc="Prepares a statement for execution" ilk="function" name="odbc_prepare" returns="resource" signature="odbc_prepare(resource connection_id, string query)" src="php_odbc.c" /&gt;
      &lt;scope doc="Execute a prepared statement" ilk="function" name="odbc_execute" returns="bool" signature="odbc_execute(resource result_id [, array parameters_array])" src="php_odbc.c" /&gt;
      &lt;scope doc="Get cursor name" ilk="function" name="odbc_cursor" returns="string" signature="odbc_cursor(resource result_id)" src="php_odbc.c" /&gt;
      &lt;scope doc="Return information about the currently connected data&amp;#xA;source" ilk="function" name="odbc_data_source" returns="array" signature="odbc_data_source(resource connection_id, int fetch_type)" src="php_odbc.c" /&gt;
      &lt;scope doc="Prepare and execute an SQL statement" ilk="function" name="odbc_exec" returns="resource" signature="odbc_exec(resource connection_id, string query [, int flags])" src="php_odbc.c" /&gt;
      &lt;scope doc="Fetch a result row as an object" ilk="function" name="odbc_fetch_object" returns="object" signature="odbc_fetch_object(int result [, int rownumber])" src="php_odbc.c" /&gt;
      &lt;scope doc="Fetch a result row as an associative array" ilk="function" name="odbc_fetch_array" returns="array" signature="odbc_fetch_array(int result [, int rownumber])" src="php_odbc.c" /&gt;
      &lt;scope doc="Fetch one result row into an array" ilk="function" name="odbc_fetch_into" returns="int" signature="odbc_fetch_into(resource result_id, array &amp;amp;result_array, [, int rownumber])" src="php_odbc.c" /&gt;
      &lt;scope doc="" ilk="function" name="solid_fetch_prev" returns="bool" signature="solid_fetch_prev(resource result_id)" src="php_odbc.c" /&gt;
      &lt;scope doc="Fetch a row" ilk="function" name="odbc_fetch_row" returns="bool" signature="odbc_fetch_row(resource result_id [, int row_number])" src="php_odbc.c" /&gt;
      &lt;scope doc="Get result data" ilk="function" name="odbc_result" returns="mixed" signature="odbc_result(resource result_id, mixed field)" src="php_odbc.c" /&gt;
      &lt;scope doc="Print result as HTML table" ilk="function" name="odbc_result_all" returns="int" signature="odbc_result_all(resource result_id [, string format])" src="php_odbc.c" /&gt;
      &lt;scope doc="Free resources associated with a result" ilk="function" name="odbc_free_result" returns="bool" signature="odbc_free_result(resource result_id)" src="php_odbc.c" /&gt;
      &lt;scope doc="Connect to a datasource" ilk="function" name="odbc_connect" returns="resource" signature="odbc_connect(string DSN, string user, string password [, int cursor_option])" src="php_odbc.c" /&gt;
      &lt;scope doc="Establish a persistent connection to a datasource" ilk="function" name="odbc_pconnect" returns="resource" signature="odbc_pconnect(string DSN, string user, string password [, int cursor_option])" src="php_odbc.c" /&gt;
      &lt;scope doc="Close an ODBC connection" ilk="function" name="odbc_close" returns="void" signature="odbc_close(resource connection_id)" src="php_odbc.c" /&gt;
      &lt;scope doc="Get number of rows in a result" ilk="function" name="odbc_num_rows" returns="int" signature="odbc_num_rows(resource result_id)" src="php_odbc.c" /&gt;
      &lt;scope doc="Checks if multiple results are available" ilk="function" name="odbc_next_result" returns="bool" signature="odbc_next_result(resource result_id)" src="php_odbc.c" /&gt;
      &lt;scope doc="Get number of columns in a result" ilk="function" name="odbc_num_fields" returns="int" signature="odbc_num_fields(resource result_id)" src="php_odbc.c" /&gt;
      &lt;scope doc="Get a column name" ilk="function" name="odbc_field_name" returns="string" signature="odbc_field_name(resource result_id, int field_number)" src="php_odbc.c" /&gt;
      &lt;scope doc="Get the datatype of a column" ilk="function" name="odbc_field_type" returns="string" signature="odbc_field_type(resource result_id, int field_number)" src="php_odbc.c" /&gt;
      &lt;scope doc="Get the length precision of a column" ilk="function" name="odbc_field_len" returns="int" signature="odbc_field_len(resource result_id, int field_number)" src="php_odbc.c" /&gt;
      &lt;scope doc="Get the scale of a column" ilk="function" name="odbc_field_scale" returns="int" signature="odbc_field_scale(resource result_id, int field_number)" src="php_odbc.c" /&gt;
      &lt;scope doc="Return column number" ilk="function" name="odbc_field_num" returns="int" signature="odbc_field_num(resource result_id, string field_name)" src="php_odbc.c" /&gt;
      &lt;scope doc="Toggle autocommit mode or get status" ilk="function" name="odbc_autocommit" returns="mixed" signature="odbc_autocommit(resource connection_id [, int OnOff])" src="php_odbc.c" /&gt;
      &lt;scope doc="Commit an ODBC transaction" ilk="function" name="odbc_commit" returns="bool" signature="odbc_commit(resource connection_id)" src="php_odbc.c" /&gt;
      &lt;scope doc="Rollback a transaction" ilk="function" name="odbc_rollback" returns="bool" signature="odbc_rollback(resource connection_id)" src="php_odbc.c" /&gt;
      &lt;scope doc="Get the last error code" ilk="function" name="odbc_error" returns="string" signature="odbc_error([resource connection_id])" src="php_odbc.c" /&gt;
      &lt;scope doc="Get the last error message" ilk="function" name="odbc_errormsg" returns="string" signature="odbc_errormsg([resource connection_id])" src="php_odbc.c" /&gt;
      &lt;scope doc="Sets connection or statement options" ilk="function" name="odbc_setoption" returns="bool" signature="odbc_setoption(resource conn_id" src="php_odbc.c" /&gt;
      &lt;scope doc="Call the SQLTables function" ilk="function" name="odbc_tables" returns="resource" signature="odbc_tables(resource connection_id [, string qualifier [, string owner [, string name [, string table_types]]]])" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier that can be used to fetch a&amp;#xA;list of column names in specified tables" ilk="function" name="odbc_columns" returns="resource" signature="odbc_columns(resource connection_id [, string qualifier [, string owner [, string table_name [, string column_name]]]])" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier that can be used to fetch a&amp;#xA;list of columns and associated privileges for the&amp;#xA;specified" ilk="function" name="odbc_columnprivileges" returns="resource" signature="odbc_columnprivileges(resource connection_id, string catalog, string schema, string table, string column)" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier to either a list of foreign&amp;#xA;keys in the specified table or a list of foreign" ilk="function" name="odbc_foreignkeys" returns="resource" signature="odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier containing information&amp;#xA;about data types supported by the data source" ilk="function" name="odbc_gettypeinfo" returns="resource" signature="odbc_gettypeinfo(resource connection_id [, int data_type])" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier listing the column names&amp;#xA;that comprise the primary key for a table" ilk="function" name="odbc_primarykeys" returns="resource" signature="odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier containing the list of&amp;#xA;input and output parameters as well as the columns that&amp;#xA;make up" ilk="function" name="odbc_procedurecolumns" returns="resource" signature="odbc_procedurecolumns(resource connection_id [, string qualifier, string owner, string proc, string column])" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier containg the list of&amp;#xA;procedure names in a datasource" ilk="function" name="odbc_procedures" returns="resource" signature="odbc_procedures(resource connection_id [, string qualifier, string owner, string name])" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier containing either the&amp;#xA;optimal set of columns that uniquely identifies a row&amp;#xA;in the table or" ilk="function" name="odbc_specialcolumns" returns="resource" signature="odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier that contains statistics&amp;#xA;about a single table and the indexes associated with&amp;#xA;the table" ilk="function" name="odbc_statistics" returns="resource" signature="odbc_statistics(resource connection_id, string qualifier, string owner, string name, int unique, int accuracy)" src="php_odbc.c" /&gt;
      &lt;scope doc="Returns a result identifier containing a list of tables&amp;#xA;and the privileges associated with each table" ilk="function" name="odbc_tableprivileges" returns="resource" signature="odbc_tableprivileges(resource connection_id, string qualifier, string owner, string name)" src="php_odbc.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_connect" returns="int" signature="birdstep_connect(string server, string user, string pass)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_close" returns="bool" signature="birdstep_close(int id)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_exec" returns="int" signature="birdstep_exec(int index, string exec_str)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_fetch" returns="bool" signature="birdstep_fetch(int index)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_result" returns="mixed" signature="birdstep_result(int index, mixed col)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_freeresult" returns="bool" signature="birdstep_freeresult(int index)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_autocommit" returns="bool" signature="birdstep_autocommit(int index)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_off_autocommit" returns="bool" signature="birdstep_off_autocommit(int index)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_commit" returns="bool" signature="birdstep_commit(int index)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_rollback" returns="bool" signature="birdstep_rollback(int index)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_fieldname" returns="string" signature="birdstep_fieldname(int index, int col)" src="birdstep.c" /&gt;
      &lt;scope doc="" ilk="function" name="birdstep_fieldnum" returns="int" signature="birdstep_fieldnum(int index)" src="birdstep.c" /&gt;
      &lt;scope doc="Return an id for the semaphore with the given key and&amp;#xA;allow max acquire default processes to acquire it&amp;#xA;simultaneously" ilk="function" name="sem_get" returns="resource" signature="sem_get(int key [, int max_acquire [, int perm [, int auto_release]])" src="sysvsem.c" /&gt;
      &lt;scope doc="Acquires the semaphore with the given id blocking if&amp;#xA;necessary" ilk="function" name="sem_acquire" returns="bool" signature="sem_acquire(resource id)" src="sysvsem.c" /&gt;
      &lt;scope doc="Releases the semaphore with the given id" ilk="function" name="sem_release" returns="bool" signature="sem_release(resource id)" src="sysvsem.c" /&gt;
      &lt;scope doc="Removes semaphore from Unix systems" ilk="function" name="sem_remove" returns="bool" signature="sem_remove(resource id)" src="sysvsem.c" /&gt;
      &lt;scope doc="Legacy hack" ilk="function" name="ob_gzhandler" returns="string" signature="ob_gzhandler(string data, int flags)" src="zlib.c" /&gt;
      &lt;scope doc="Returns the coding type used for output compression" ilk="function" name="zlib_get_coding_type" returns="string" signature="zlib_get_coding_type(void)" src="zlib.c" /&gt;
      &lt;scope doc="Read and uncompress entire gz-file into an array" ilk="function" name="gzfile" returns="array" signature="gzfile(string filename [, int use_include_path])" src="zlib.c" /&gt;
      &lt;scope doc="Open a gz-file and return a gz-file pointer" ilk="function" name="gzopen" returns="resource" signature="gzopen(string filename, string mode [, int use_include_path])" src="zlib.c" /&gt;
      &lt;scope doc="Output a gz-file" ilk="function" name="readgzfile" returns="int" signature="readgzfile(string filename [, int use_include_path])" src="zlib.c" /&gt;
      &lt;scope doc="Compress data with the specified encoding" ilk="function" name="zlib_encode" returns="binary" signature="zlib_encode(binary data, int encoding[, int level = -1])" src="zlib.c" /&gt;
      &lt;scope doc="Uncompress any raw gzip zlib encoded data" ilk="function" name="zlib_decode" returns="binary" signature="zlib_decode(binary data[, int max_decoded_len])" src="zlib.c" /&gt;
      &lt;scope doc="Encode data with the raw deflate encoding" ilk="function" name="gzdeflate" returns="binary" signature="gzdeflate(binary data[, int level = -1[, int encoding = ZLIB_ENCODING_RAW])" src="zlib.c" /&gt;
      &lt;scope doc="Encode data with the gzip encoding" ilk="function" name="gzencode" returns="binary" signature="gzencode(binary data[, int level = -1[, int encoding = ZLIB_ENCODING_GZIP])" src="zlib.c" /&gt;
      &lt;scope doc="Encode data with the zlib encoding" ilk="function" name="gzcompress" returns="binary" signature="gzcompress(binary data[, int level = -1[, int encoding = ZLIB_ENCODING_DEFLATE])" src="zlib.c" /&gt;
      &lt;scope doc="Decode raw deflate encoded data" ilk="function" name="gzinflate" returns="binary" signature="gzinflate(binary data[, int max_decoded_len])" src="zlib.c" /&gt;
      &lt;scope doc="Decode gzip encoded data" ilk="function" name="gzdecode" returns="binary" signature="gzdecode(binary data[, int max_decoded_len])" src="zlib.c" /&gt;
      &lt;scope doc="Decode zlib encoded data" ilk="function" name="gzuncompress" returns="binary" signature="gzuncompress(binary data[, int max_decoded_len])" src="zlib.c" /&gt;
      &lt;scope doc="Create a new fileinfo resource" ilk="function" name="finfo_open" returns="resource" signature="finfo_open([int options [, string arg]])" src="fileinfo.c" /&gt;
      &lt;scope doc="Close fileinfo resource" ilk="function" name="finfo_close" returns="resource" signature="finfo_close(resource finfo)" src="fileinfo.c" /&gt;
      &lt;scope doc="Set libmagic configuration options" ilk="function" name="finfo_set_flags" returns="bool" signature="finfo_set_flags(resource finfo, int options)" src="fileinfo.c" /&gt;
      &lt;scope doc="Return information about a file" ilk="function" name="finfo_file" returns="string" signature="finfo_file(resource finfo, char *file_name [, int options [, resource context]])" src="fileinfo.c" /&gt;
      &lt;scope doc="Return infromation about a string buffer" ilk="function" name="finfo_buffer" returns="string" signature="finfo_buffer(resource finfo, char *string [, int options [, resource context]])" src="fileinfo.c" /&gt;
      &lt;scope doc="Return content-type for file" ilk="function" name="mime_content_type" returns="string" signature="mime_content_type(string filename" src="fileinfo.c" /&gt;
      &lt;scope doc="Format a local date time" ilk="function" name="date" returns="string" signature="date(string format [, long timestamp])" src="php_date.c" /&gt;
      &lt;scope doc="Format a GMT date time" ilk="function" name="gmdate" returns="string" signature="gmdate(string format [, long timestamp])" src="php_date.c" /&gt;
      &lt;scope doc="Format a local time date as integer" ilk="function" name="idate" returns="int" signature="idate(string format [, int timestamp])" src="php_date.c" /&gt;
      &lt;scope doc="Convert string representation of date and time to a&amp;#xA;timestamp" ilk="function" name="strtotime" returns="int" signature="strtotime(string time [, int now ])" src="php_date.c" /&gt;
      &lt;scope doc="Get UNIX timestamp for a date" ilk="function" name="mktime" returns="int" signature="mktime([int hour [, int min [, int sec [, int mon [, int day [, int year]]]]]])" src="php_date.c" /&gt;
      &lt;scope doc="Get UNIX timestamp for a GMT date" ilk="function" name="gmmktime" returns="int" signature="gmmktime([int hour [, int min [, int sec [, int mon [, int day [, int year]]]]]])" src="php_date.c" /&gt;
      &lt;scope doc="Returns true if it is a valid date in gregorian&amp;#xA;calendar" ilk="function" name="checkdate" returns="bool" signature="checkdate(int month, int day, int year)" src="php_date.c" /&gt;
      &lt;scope doc="Format a local time date according to locale settings" ilk="function" name="strftime" returns="string" signature="strftime(string format [, int timestamp])" src="php_date.c" /&gt;
      &lt;scope doc="Format a GMT UCT time date according to locale settings" ilk="function" name="gmstrftime" returns="string" signature="gmstrftime(string format [, int timestamp])" src="php_date.c" /&gt;
      &lt;scope doc="Return current UNIX timestamp" ilk="function" name="time" returns="int" signature="time(void)" src="php_date.c" /&gt;
      &lt;scope doc="Returns the results of the C system call localtime as&amp;#xA;an associative array if the associative array argument&amp;#xA;is set" ilk="function" name="localtime" returns="array" signature="localtime([int timestamp [, bool associative_array]])" src="php_date.c" /&gt;
      &lt;scope doc="Get date time information" ilk="function" name="getdate" returns="array" signature="getdate([int timestamp])" src="php_date.c" /&gt;
      &lt;scope doc="Returns new DateTime object" ilk="function" name="date_create" returns="DateTime" signature="date_create([string time[, DateTimeZone object]])" src="php_date.c" /&gt;
      &lt;scope doc="Returns new DateTime object" ilk="function" name="date_create_immutable" returns="DateTime" signature="date_create_immutable([string time[, DateTimeZone object]])" src="php_date.c" /&gt;
      &lt;scope doc="Returns new DateTime object formatted according to the&amp;#xA;specified format" ilk="function" name="date_create_from_format" returns="DateTime" signature="date_create_from_format(string format, string time[, DateTimeZone object])" src="php_date.c" /&gt;
      &lt;scope doc="Returns new DateTime object formatted according to the&amp;#xA;specified format" ilk="function" name="date_create_immutable_from_format" returns="DateTime" signature="date_create_immutable_from_format(string format, string time[, DateTimeZone object])" src="php_date.c" /&gt;
      &lt;scope doc="Returns the warnings and errors found while parsing a&amp;#xA;date time string" ilk="function" name="date_get_last_errors" returns="array" signature="date_get_last_errors()" src="php_date.c" /&gt;
      &lt;scope doc="Returns associative array with detailed info about&amp;#xA;given date" ilk="function" name="date_parse" returns="array" signature="date_parse(string date)" src="php_date.c" /&gt;
      &lt;scope doc="Returns associative array with detailed info about&amp;#xA;given date" ilk="function" name="date_parse_from_format" returns="array" signature="date_parse_from_format(string format, string date)" src="php_date.c" /&gt;
      &lt;scope doc="Returns date formatted according to given format" ilk="function" name="date_format" returns="string" signature="date_format(DateTimeInterface object, string format)" src="php_date.c" /&gt;
      &lt;scope doc="Alters the timestamp" ilk="function" name="date_modify" returns="DateTime" signature="date_modify(DateTime object, string modify)" src="php_date.c" /&gt;
      &lt;scope doc="Adds an interval to the current date in object" ilk="function" name="date_add" returns="DateTime" signature="date_add(DateTime object, DateInterval interval)" src="php_date.c" /&gt;
      &lt;scope doc="Subtracts an interval to the current date in object" ilk="function" name="date_sub" returns="DateTime" signature="date_sub(DateTime object, DateInterval interval)" src="php_date.c" /&gt;
      &lt;scope doc="Return new DateTimeZone object relative to give&amp;#xA;DateTime" ilk="function" name="date_timezone_get" returns="DateTimeZone" signature="date_timezone_get(DateTimeInterface object)" src="php_date.c" /&gt;
      &lt;scope doc="Sets the timezone for the DateTime object" ilk="function" name="date_timezone_set" returns="DateTime" signature="date_timezone_set(DateTime object, DateTimeZone object)" src="php_date.c" /&gt;
      &lt;scope doc="Returns the DST offset" ilk="function" name="date_offset_get" returns="long" signature="date_offset_get(DateTimeInterface object)" src="php_date.c" /&gt;
      &lt;scope doc="Sets the time" ilk="function" name="date_time_set" returns="DateTime" signature="date_time_set(DateTime object, long hour, long minute[, long second])" src="php_date.c" /&gt;
      &lt;scope doc="Sets the date" ilk="function" name="date_date_set" returns="DateTime" signature="date_date_set(DateTime object, long year, long month, long day)" src="php_date.c" /&gt;
      &lt;scope doc="Sets the ISO date" ilk="function" name="date_isodate_set" returns="DateTime" signature="date_isodate_set(DateTime object, long year, long week[, long day])" src="php_date.c" /&gt;
      &lt;scope doc="Sets the date and time based on an Unix timestamp" ilk="function" name="date_timestamp_set" returns="DateTime" signature="date_timestamp_set(DateTime object, long unixTimestamp)" src="php_date.c" /&gt;
      &lt;scope doc="Gets the Unix timestamp" ilk="function" name="date_timestamp_get" returns="long" signature="date_timestamp_get(DateTimeInterface object)" src="php_date.c" /&gt;
      &lt;scope doc="Returns the difference between two DateTime objects" ilk="function" name="date_diff" returns="DateInterval" signature="date_diff(DateTime object [, bool absolute])" src="php_date.c" /&gt;
      &lt;scope doc="Returns new DateTimeZone object" ilk="function" name="timezone_open" returns="DateTimeZone" signature="timezone_open(string timezone)" src="php_date.c" /&gt;
      &lt;scope doc="Returns the name of the timezone" ilk="function" name="timezone_name_get" returns="string" signature="timezone_name_get(DateTimeZone object)" src="php_date.c" /&gt;
      &lt;scope doc="Returns the timezone name from abbrevation" ilk="function" name="timezone_name_from_abbr" returns="string" signature="timezone_name_from_abbr(string abbr[, long gmtOffset[, long isdst]])" src="php_date.c" /&gt;
      &lt;scope doc="Returns the timezone offset" ilk="function" name="timezone_offset_get" returns="long" signature="timezone_offset_get(DateTimeZone object, DateTime object)" src="php_date.c" /&gt;
      &lt;scope doc="Returns numerically indexed array containing&amp;#xA;associative array for all transitions in the specified&amp;#xA;range for the timezone" ilk="function" name="timezone_transitions_get" returns="array" signature="timezone_transitions_get(DateTimeZone object [, long timestamp_begin [, long timestamp_end ]])" src="php_date.c" /&gt;
      &lt;scope doc="Returns location information for a timezone including&amp;#xA;country code latitude longitude and comments" ilk="function" name="timezone_location_get" returns="array" signature="timezone_location_get()" src="php_date.c" /&gt;
      &lt;scope doc="Uses the normal date parsers and sets up a DateInterval&amp;#xA;from the relative parts of the parsed string" ilk="function" name="date_interval_create_from_date_string" returns="DateInterval" signature="date_interval_create_from_date_string(string time)" src="php_date.c" /&gt;
      &lt;scope doc="Formats the interval" ilk="function" name="date_interval_format" returns="string" signature="date_interval_format(DateInterval object, string format)" src="php_date.c" /&gt;
      &lt;scope doc="Returns numerically index array with all timezone&amp;#xA;identifiers" ilk="function" name="timezone_identifiers_list" returns="array" signature="timezone_identifiers_list([long what[, string country]])" src="php_date.c" /&gt;
      &lt;scope doc="Returns the Olson database version number" ilk="function" name="timezone_version_get" returns="array" signature="timezone_version_get()" src="php_date.c" /&gt;
      &lt;scope doc="Returns associative array containing dst offset and the&amp;#xA;timezone name" ilk="function" name="timezone_abbreviations_list" returns="array" signature="timezone_abbreviations_list()" src="php_date.c" /&gt;
      &lt;scope doc="Sets the default timezone used by all date time&amp;#xA;functions in a script" ilk="function" name="date_default_timezone_set" returns="bool" signature="date_default_timezone_set(string timezone_identifier)" src="php_date.c" /&gt;
      &lt;scope doc="Gets the default timezone used by all date time&amp;#xA;functions in a script" ilk="function" name="date_default_timezone_get" returns="string" signature="date_default_timezone_get()" src="php_date.c" /&gt;
      &lt;scope doc="Returns time of sunrise for a given day and location" ilk="function" name="date_sunrise" returns="mixed" signature="date_sunrise(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])" src="php_date.c" /&gt;
      &lt;scope doc="Returns time of sunset for a given day and location" ilk="function" name="date_sunset" returns="mixed" signature="date_sunset(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])" src="php_date.c" /&gt;
      &lt;scope doc="Returns an array with information about sun set rise&amp;#xA;and twilight begin end" ilk="function" name="date_sun_info" returns="array" signature="date_sun_info(long time, float latitude, float longitude)" src="php_date.c" /&gt;
      &lt;scope doc="Convert UNIX timestamp to Julian Day" ilk="function" name="unixtojd" returns="int" signature="unixtojd([int timestamp])" src="cal_unix.c" /&gt;
      &lt;scope doc="Convert Julian Day to UNIX timestamp" ilk="function" name="jdtounix" returns="int" signature="jdtounix(int jday)" src="cal_unix.c" /&gt;
      &lt;scope doc="Returns information about a particular calendar" ilk="function" name="cal_info" returns="array" signature="cal_info([int calendar])" src="calendar.c" /&gt;
      &lt;scope doc="Returns the number of days in a month for a given year&amp;#xA;and calendar" ilk="function" name="cal_days_in_month" returns="int" signature="cal_days_in_month(int calendar, int month, int year)" src="calendar.c" /&gt;
      &lt;scope doc="Converts from a supported calendar to Julian Day Count" ilk="function" name="cal_to_jd" returns="int" signature="cal_to_jd(int calendar, int month, int day, int year)" src="calendar.c" /&gt;
      &lt;scope doc="Converts from Julian Day Count to a supported calendar&amp;#xA;and return extended information" ilk="function" name="cal_from_jd" returns="array" signature="cal_from_jd(int jd, int calendar)" src="calendar.c" /&gt;
      &lt;scope doc="Converts a julian day count to a gregorian calendar&amp;#xA;date" ilk="function" name="jdtogregorian" returns="string" signature="jdtogregorian(int juliandaycount)" src="calendar.c" /&gt;
      &lt;scope doc="Converts a gregorian calendar date to julian day count" ilk="function" name="gregoriantojd" returns="int" signature="gregoriantojd(int month, int day, int year)" src="calendar.c" /&gt;
      &lt;scope doc="Convert a julian day count to a julian calendar date" ilk="function" name="jdtojulian" returns="string" signature="jdtojulian(int juliandaycount)" src="calendar.c" /&gt;
      &lt;scope doc="Converts a julian calendar date to julian day count" ilk="function" name="juliantojd" returns="int" signature="juliantojd(int month, int day, int year)" src="calendar.c" /&gt;
      &lt;scope doc="Converts a julian day count to a jewish calendar date" ilk="function" name="jdtojewish" returns="string" signature="jdtojewish(int juliandaycount [, bool hebrew [, int fl]])" src="calendar.c" /&gt;
      &lt;scope doc="Converts a jewish calendar date to a julian day count" ilk="function" name="jewishtojd" returns="int" signature="jewishtojd(int month, int day, int year)" src="calendar.c" /&gt;
      &lt;scope doc="Converts a julian day count to a french republic&amp;#xA;calendar date" ilk="function" name="jdtofrench" returns="string" signature="jdtofrench(int juliandaycount)" src="calendar.c" /&gt;
      &lt;scope doc="Converts a french republic calendar date to julian day&amp;#xA;count" ilk="function" name="frenchtojd" returns="int" signature="frenchtojd(int month, int day, int year)" src="calendar.c" /&gt;
      &lt;scope doc="Returns name or number of day of week from julian day&amp;#xA;count" ilk="function" name="jddayofweek" returns="mixed" signature="jddayofweek(int juliandaycount [, int mode])" src="calendar.c" /&gt;
      &lt;scope doc="Returns name of month for julian day count" ilk="function" name="jdmonthname" returns="string" signature="jdmonthname(int juliandaycount, int mode)" src="calendar.c" /&gt;
      &lt;scope doc="Return the timestamp of midnight on Easter of a given&amp;#xA;year defaults to current year" ilk="function" name="easter_date" returns="int" signature="easter_date([int year])" src="easter.c" /&gt;
      &lt;scope doc="Return the number of days after March that Easter falls&amp;#xA;on for a given year defaults to current year" ilk="function" name="easter_days" returns="int" signature="easter_days([int year, [int method]])" src="easter.c" /&gt;
      &lt;scope doc="Creates or open a shared memory segment" ilk="function" name="shm_attach" returns="int" signature="shm_attach(int key [, int memsize [, int perm]])" src="sysvshm.c" /&gt;
      &lt;scope doc="Disconnects from shared memory segment" ilk="function" name="shm_detach" returns="bool" signature="shm_detach(resource shm_identifier)" src="sysvshm.c" /&gt;
      &lt;scope doc="Removes shared memory from Unix systems" ilk="function" name="shm_remove" returns="bool" signature="shm_remove(resource shm_identifier)" src="sysvshm.c" /&gt;
      &lt;scope doc="Inserts or updates a variable in shared memory" ilk="function" name="shm_put_var" returns="bool" signature="shm_put_var(resource shm_identifier, int variable_key, mixed variable)" src="sysvshm.c" /&gt;
      &lt;scope doc="Returns a variable from shared memory" ilk="function" name="shm_get_var" returns="mixed" signature="shm_get_var(resource id, int variable_key)" src="sysvshm.c" /&gt;
      &lt;scope doc="Checks whether a specific entry exists" ilk="function" name="shm_has_var" returns="bool" signature="shm_has_var(resource id, int variable_key)" src="sysvshm.c" /&gt;
      &lt;scope doc="Removes variable from shared memory" ilk="function" name="shm_remove_var" returns="bool" signature="shm_remove_var(resource id, int variable_key)" src="sysvshm.c" /&gt;
      &lt;scope doc="Set the textdomain to quot domain quot Returns the&amp;#xA;current domain" ilk="function" name="textdomain" returns="string" signature="textdomain(string domain)" src="gettext.c" /&gt;
      &lt;scope doc="Return the translation of msgid for the current domain&amp;#xA;or msgid unaltered if a translation does not exist" ilk="function" name="gettext" returns="string" signature="gettext(string msgid)" src="gettext.c" /&gt;
      &lt;scope doc="" ilk="function" name="dgettext" returns="of" signature="dgettext()" src="gettext.c" /&gt;
      &lt;scope doc="" ilk="function" name="dcgettext" returns="of" signature="dcgettext()" src="gettext.c" /&gt;
      &lt;scope doc="Bind to the text domain domain name looking for&amp;#xA;translations in dir Returns the current domain" ilk="function" name="bindtextdomain" returns="string" signature="bindtextdomain(string domain_name, string dir)" src="gettext.c" /&gt;
      &lt;scope doc="Plural version of gettext" ilk="function" name="ngettext" returns="string" signature="ngettext(string MSGID1, string MSGID2, int N)" src="gettext.c" /&gt;
      &lt;scope doc="Get headername for index or false if not defined" ilk="function" name="exif_tagname" returns="string" signature="exif_tagname(index)" src="exif.c" /&gt;
      &lt;scope doc="Reads header data from the JPEG TIFF image filename and&amp;#xA;optionally reads the internal thumbnails" ilk="function" name="exif_read_data" returns="array" signature="exif_read_data(string filename [, sections_needed [, sub_arrays[, read_thumbnail]]])" src="exif.c" /&gt;
      &lt;scope doc="Reads the embedded thumbnail" ilk="function" name="exif_thumbnail" returns="string" signature="exif_thumbnail(string filename [, &amp;amp;width, &amp;amp;height [, &amp;amp;imagetype]])" src="exif.c" /&gt;
      &lt;scope doc="Get the type of an image" ilk="function" name="exif_imagetype" returns="int" signature="exif_imagetype(string imagefile)" src="exif.c" /&gt;
      &lt;scope doc="Opens path using the specified handler in mode&amp;#xA;persistently" ilk="function" name="dba_popen" returns="resource" signature="dba_popen(string path, string mode [, string handlername, string ...])" src="dba.c" /&gt;
      &lt;scope doc="Opens path using the specified handler in mode" ilk="function" name="dba_open" returns="resource" signature="dba_open(string path, string mode [, string handlername, string ...])" src="dba.c" /&gt;
      &lt;scope doc="Closes database" ilk="function" name="dba_close" returns="void" signature="dba_close(resource handle)" src="dba.c" /&gt;
      &lt;scope doc="Checks if the specified key exists" ilk="function" name="dba_exists" returns="bool" signature="dba_exists(string key, resource handle)" src="dba.c" /&gt;
      &lt;scope doc="Fetches the data associated with key" ilk="function" name="dba_fetch" returns="string" signature="dba_fetch(string key, [int skip ,] resource handle)" src="dba.c" /&gt;
      &lt;scope doc="Splits an inifile key into an array of the form array&amp;#xA;gt group gt value name but returns false if" ilk="function" name="dba_key_split" returns="false" signature="dba_key_split(string key)" src="dba.c" /&gt;
      &lt;scope doc="Resets the internal key pointer and returns the first&amp;#xA;key" ilk="function" name="dba_firstkey" returns="string" signature="dba_firstkey(resource handle)" src="dba.c" /&gt;
      &lt;scope doc="Returns the next key" ilk="function" name="dba_nextkey" returns="string" signature="dba_nextkey(resource handle)" src="dba.c" /&gt;
      &lt;scope doc="Deletes the entry associated with key If inifile remove&amp;#xA;all other key lines" ilk="function" name="dba_delete" returns="bool" signature="dba_delete(string key, resource handle)" src="dba.c" /&gt;
      &lt;scope doc="If not inifile Insert value as key return false if key&amp;#xA;exists already If inifile Add vakue as key next" ilk="function" name="dba_insert" returns="bool" signature="dba_insert(string key, string value, resource handle)" src="dba.c" /&gt;
      &lt;scope doc="Inserts value as key replaces key if key exists already&amp;#xA;If inifile remove all other key lines" ilk="function" name="dba_replace" returns="bool" signature="dba_replace(string key, string value, resource handle)" src="dba.c" /&gt;
      &lt;scope doc="Optimizes e g clean up vacuum database" ilk="function" name="dba_optimize" returns="bool" signature="dba_optimize(resource handle)" src="dba.c" /&gt;
      &lt;scope doc="Synchronizes database" ilk="function" name="dba_sync" returns="bool" signature="dba_sync(resource handle)" src="dba.c" /&gt;
      &lt;scope doc="List configured database handlers" ilk="function" name="dba_handlers" returns="array" signature="dba_handlers([bool full_info])" src="dba.c" /&gt;
      &lt;scope doc="List opened databases" ilk="function" name="dba_list" returns="array" signature="dba_list()" src="dba.c" /&gt;
      &lt;scope doc="Return a string to confirm that the module is compiled&amp;#xA;in" ilk="function" name="confirm_extname_compiled" returns="string" signature="confirm_extname_compiled(string arg)" src="skeleton.c" /&gt;
      &lt;scope doc="Exports a CERT to file or a var" ilk="function" name="openssl_x509_export_to_file" returns="bool" signature="openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext = true])" src="openssl.c" /&gt;
      &lt;scope doc="Exports a CERT to file or a var" ilk="function" name="openssl_x509_export" returns="bool" signature="openssl_x509_export(mixed x509, string &amp;amp;out [, bool notext = true])" src="openssl.c" /&gt;
      &lt;scope doc="Checks if a private key corresponds to a CERT" ilk="function" name="openssl_x509_check_private_key" returns="bool" signature="openssl_x509_check_private_key(mixed cert, mixed key)" src="openssl.c" /&gt;
      &lt;scope doc="Returns an array of the fields values of the CERT" ilk="function" name="openssl_x509_parse" returns="array" signature="openssl_x509_parse(mixed x509 [, bool shortnames=true])" src="openssl.c" /&gt;
      &lt;scope doc="Checks the CERT to see if it can be used for the&amp;#xA;purpose in purpose cainfo holds information about&amp;#xA;trusted" ilk="function" name="openssl_x509_checkpurpose" returns="int" signature="openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile])" src="openssl.c" /&gt;
      &lt;scope doc="Reads X certificates" ilk="function" name="openssl_x509_read" returns="resource" signature="openssl_x509_read(mixed cert)" src="openssl.c" /&gt;
      &lt;scope doc="Frees X certificates" ilk="function" name="openssl_x509_free" returns="void" signature="openssl_x509_free(resource x509)" src="openssl.c" /&gt;
      &lt;scope doc="Creates and exports a PKCS to file" ilk="function" name="openssl_pkcs12_export_to_file" returns="bool" signature="openssl_pkcs12_export_to_file(mixed x509, string filename, mixed priv_key, string pass[, array args])" src="openssl.c" /&gt;
      &lt;scope doc="Creates and exports a PKCS to a var" ilk="function" name="openssl_pkcs12_export" returns="bool" signature="openssl_pkcs12_export(mixed x509, string &amp;amp;out, mixed priv_key, string pass[, array args])" src="openssl.c" /&gt;
      &lt;scope doc="Parses a PKCS to an array" ilk="function" name="openssl_pkcs12_read" returns="bool" signature="openssl_pkcs12_read(string PKCS12, array &amp;amp;certs, string pass)" src="openssl.c" /&gt;
      &lt;scope doc="Exports a CSR to file" ilk="function" name="openssl_csr_export_to_file" returns="bool" signature="openssl_csr_export_to_file(resource csr, string outfilename [, bool notext=true])" src="openssl.c" /&gt;
      &lt;scope doc="Exports a CSR to file or a var" ilk="function" name="openssl_csr_export" returns="bool" signature="openssl_csr_export(resource csr, string &amp;amp;out [, bool notext=true])" src="openssl.c" /&gt;
      &lt;scope doc="Signs a cert with another CERT" ilk="function" name="openssl_csr_sign" returns="resource" signature="openssl_csr_sign(mixed csr, mixed x509, mixed priv_key, long days [, array config_args [, long serial]])" src="openssl.c" /&gt;
      &lt;scope doc="Generates a privkey and CSR" ilk="function" name="openssl_csr_new" returns="bool" signature="openssl_csr_new(array dn, resource &amp;amp;privkey [, array configargs [, array extraattribs]])" src="openssl.c" /&gt;
      &lt;scope doc="Returns the subject of a CERT or FALSE on error" ilk="function" name="openssl_csr_get_subject" returns="mixed" signature="openssl_csr_get_subject(mixed csr)" src="openssl.c" /&gt;
      &lt;scope doc="Returns the subject of a CERT or FALSE on error" ilk="function" name="openssl_csr_get_public_key" returns="mixed" signature="openssl_csr_get_public_key(mixed csr)" src="openssl.c" /&gt;
      &lt;scope doc="Generates a new private key" ilk="function" name="openssl_pkey_new" returns="resource" signature="openssl_pkey_new([array configargs])" src="openssl.c" /&gt;
      &lt;scope doc="Gets an exportable representation of a key into a file" ilk="function" name="openssl_pkey_export_to_file" returns="bool" signature="openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase, array config_args)" src="openssl.c" /&gt;
      &lt;scope doc="Gets an exportable representation of a key into a&amp;#xA;string or file" ilk="function" name="openssl_pkey_export" returns="bool" signature="openssl_pkey_export(mixed key, &amp;amp;mixed out [, string passphrase [, array config_args]])" src="openssl.c" /&gt;
      &lt;scope doc="Gets public key from X certificate" ilk="function" name="openssl_pkey_get_public" returns="int" signature="openssl_pkey_get_public(mixed cert)" src="openssl.c" /&gt;
      &lt;scope doc="Frees a key" ilk="function" name="openssl_pkey_free" returns="void" signature="openssl_pkey_free(int key)" src="openssl.c" /&gt;
      &lt;scope doc="Gets private keys" ilk="function" name="openssl_pkey_get_private" returns="int" signature="openssl_pkey_get_private(string key [, string passphrase])" src="openssl.c" /&gt;
      &lt;scope doc="returns an array with the key details bits pkey type" ilk="function" name="openssl_pkey_get_details" returns="resource" signature="openssl_pkey_get_details(resource key)" src="openssl.c" /&gt;
      &lt;scope doc="Generates a PKCS v PBKDF string defaults to sha" ilk="function" name="openssl_pbkdf2" returns="string" signature="openssl_pbkdf2(string password, string salt, long key_length, long iterations [, string digest_method = &amp;quot;sha1&amp;quot;])" src="openssl.c" /&gt;
      &lt;scope doc="Verifys that the data block is intact the signer is who&amp;#xA;they say they are and returns the CERTs of" ilk="function" name="openssl_pkcs7_verify" returns="bool" signature="openssl_pkcs7_verify(string filename, long flags [, string signerscerts [, array cainfo [, string extracerts [, string content]]]])" src="openssl.c" /&gt;
      &lt;scope doc="Encrypts the message in the file named infile with the&amp;#xA;certificates in recipcerts and output the result to the&amp;#xA;file" ilk="function" name="openssl_pkcs7_encrypt" returns="bool" signature="openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, long flags [, long cipher]])" src="openssl.c" /&gt;
      &lt;scope doc="Signs the MIME message in the file named infile with&amp;#xA;signcert signkey and output the result to file name&amp;#xA;outfile" ilk="function" name="openssl_pkcs7_sign" returns="bool" signature="openssl_pkcs7_sign(string infile, string outfile, mixed signcert, mixed signkey, array headers [, long flags [, string extracertsfilename]])" src="openssl.c" /&gt;
      &lt;scope doc="Decrypts the S MIME message in the file name infilename&amp;#xA;and output the results to the file name outfilename&amp;#xA;recipcert" ilk="function" name="openssl_pkcs7_decrypt" returns="bool" signature="openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey])" src="openssl.c" /&gt;
      &lt;scope doc="Encrypts data with private key" ilk="function" name="openssl_private_encrypt" returns="bool" signature="openssl_private_encrypt(string data, string &amp;amp;crypted, mixed key [, int padding])" src="openssl.c" /&gt;
      &lt;scope doc="Decrypts data with private key" ilk="function" name="openssl_private_decrypt" returns="bool" signature="openssl_private_decrypt(string data, string &amp;amp;decrypted, mixed key [, int padding])" src="openssl.c" /&gt;
      &lt;scope doc="Encrypts data with public key" ilk="function" name="openssl_public_encrypt" returns="bool" signature="openssl_public_encrypt(string data, string &amp;amp;crypted, mixed key [, int padding])" src="openssl.c" /&gt;
      &lt;scope doc="Decrypts data with public key" ilk="function" name="openssl_public_decrypt" returns="bool" signature="openssl_public_decrypt(string data, string &amp;amp;crypted, resource key [, int padding])" src="openssl.c" /&gt;
      &lt;scope doc="Returns a description of the last error and alters the&amp;#xA;index of the error messages Returns false when the are" ilk="function" name="openssl_error_string" returns="mixed" signature="openssl_error_string(void)" src="openssl.c" /&gt;
      &lt;scope doc="Signs data" ilk="function" name="openssl_sign" returns="bool" signature="openssl_sign(string data, &amp;amp;string signature, mixed key[, mixed method])" src="openssl.c" /&gt;
      &lt;scope doc="Verifys data" ilk="function" name="openssl_verify" returns="int" signature="openssl_verify(string data, string signature, mixed key[, mixed method])" src="openssl.c" /&gt;
      &lt;scope doc="Seals data" ilk="function" name="openssl_seal" returns="int" signature="openssl_seal(string data, &amp;amp;string sealdata, &amp;amp;array ekeys, array pubkeys)" src="openssl.c" /&gt;
      &lt;scope doc="Opens data" ilk="function" name="openssl_open" returns="bool" signature="openssl_open(string data, &amp;amp;string opendata, string ekey, mixed privkey)" src="openssl.c" /&gt;
      &lt;scope doc="Return array of available digest methods" ilk="function" name="openssl_get_md_methods" returns="array" signature="openssl_get_md_methods([bool aliases = false])" src="openssl.c" /&gt;
      &lt;scope doc="Return array of available cipher methods" ilk="function" name="openssl_get_cipher_methods" returns="array" signature="openssl_get_cipher_methods([bool aliases = false])" src="openssl.c" /&gt;
      &lt;scope doc="Computes digest hash value for given data using given&amp;#xA;method returns raw or binhex encoded string" ilk="function" name="openssl_digest" returns="string" signature="openssl_digest(string data, string method [, bool raw_output=false])" src="openssl.c" /&gt;
      &lt;scope doc="Encrypts given data with given method and key returns&amp;#xA;raw or base encoded string" ilk="function" name="openssl_encrypt" returns="string" signature="openssl_encrypt(string data, string method, string password [, long options=0 [, string $iv=&amp;apos;&amp;apos;]])" src="openssl.c" /&gt;
      &lt;scope doc="Takes raw or base encoded string and dectupt it using&amp;#xA;given method and key" ilk="function" name="openssl_decrypt" returns="string" signature="openssl_decrypt(string data, string method, string password [, long options=0 [, string $iv = &amp;apos;&amp;apos;]])" src="openssl.c" /&gt;
      &lt;scope doc="" ilk="function" name="openssl_cipher_iv_length" returns="int" signature="openssl_cipher_iv_length(string $method)" src="openssl.c" /&gt;
      &lt;scope doc="Computes shared sicret for public value of remote DH&amp;#xA;key and local DH key" ilk="function" name="openssl_dh_compute_key" returns="string" signature="openssl_dh_compute_key(string pub_key, resource dh_key)" src="openssl.c" /&gt;
      &lt;scope doc="Returns a string of the length specified filled with&amp;#xA;random pseudo bytes" ilk="function" name="openssl_random_pseudo_bytes" returns="string" signature="openssl_random_pseudo_bytes(integer length [, &amp;amp;bool returned_strong_result])" src="openssl.c" /&gt;
      &lt;scope doc="Assigns a new value for a variant object" ilk="function" name="variant_set" returns="void" signature="variant_set(object variant, mixed value)" src="com_variant.c" /&gt;
      &lt;scope doc="quot Adds quot two variant values together and returns&amp;#xA;the result" ilk="function" name="variant_add" returns="mixed" signature="variant_add(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="concatenates two variant values together and returns&amp;#xA;the result" ilk="function" name="variant_cat" returns="mixed" signature="variant_cat(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="subtracts the value of the right variant from the left&amp;#xA;variant value and returns the result" ilk="function" name="variant_sub" returns="mixed" signature="variant_sub(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="multiplies the values of the two variants and returns&amp;#xA;the result" ilk="function" name="variant_mul" returns="mixed" signature="variant_mul(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="performs a bitwise AND operation between two variants&amp;#xA;and returns the result" ilk="function" name="variant_and" returns="mixed" signature="variant_and(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="Returns the result from dividing two variants" ilk="function" name="variant_div" returns="mixed" signature="variant_div(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="Performs a bitwise equivalence on two variants" ilk="function" name="variant_eqv" returns="mixed" signature="variant_eqv(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="Converts variants to integers and then returns the&amp;#xA;result from dividing them" ilk="function" name="variant_idiv" returns="mixed" signature="variant_idiv(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="Performs a bitwise implication on two variants" ilk="function" name="variant_imp" returns="mixed" signature="variant_imp(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="Divides two variants and returns only the remainder" ilk="function" name="variant_mod" returns="mixed" signature="variant_mod(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="Performs a logical disjunction on two variants" ilk="function" name="variant_or" returns="mixed" signature="variant_or(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="Returns the result of performing the power function&amp;#xA;with two variants" ilk="function" name="variant_pow" returns="mixed" signature="variant_pow(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="Performs a logical exclusion on two variants" ilk="function" name="variant_xor" returns="mixed" signature="variant_xor(mixed left, mixed right)" src="com_variant.c" /&gt;
      &lt;scope doc="Returns the absolute value of a variant" ilk="function" name="variant_abs" returns="mixed" signature="variant_abs(mixed left)" src="com_variant.c" /&gt;
      &lt;scope doc="Returns the integer part of a variant" ilk="function" name="variant_fix" returns="mixed" signature="variant_fix(mixed left)" src="com_variant.c" /&gt;
      &lt;scope doc="Returns the integer portion of a variant" ilk="function" name="variant_int" returns="mixed" signature="variant_int(mixed left)" src="com_variant.c" /&gt;
      &lt;scope doc="Performs logical negation on a variant" ilk="function" name="variant_neg" returns="mixed" signature="variant_neg(mixed left)" src="com_variant.c" /&gt;
      &lt;scope doc="Performs bitwise not negation on a variant" ilk="function" name="variant_not" returns="mixed" signature="variant_not(mixed left)" src="com_variant.c" /&gt;
      &lt;scope doc="Rounds a variant to the specified number of decimal&amp;#xA;places" ilk="function" name="variant_round" returns="mixed" signature="variant_round(mixed left, int decimals)" src="com_variant.c" /&gt;
      &lt;scope doc="Compares two variants" ilk="function" name="variant_cmp" returns="int" signature="variant_cmp(mixed left, mixed right [, int lcid [, int flags]])" src="com_variant.c" /&gt;
      &lt;scope doc="Converts a variant date time value to unix timestamp" ilk="function" name="variant_date_to_timestamp" returns="int" signature="variant_date_to_timestamp(object variant)" src="com_variant.c" /&gt;
      &lt;scope doc="Returns a variant date representation of a unix&amp;#xA;timestamp" ilk="function" name="variant_date_from_timestamp" returns="object" signature="variant_date_from_timestamp(int timestamp)" src="com_variant.c" /&gt;
      &lt;scope doc="Returns the VT XXX type code for a variant" ilk="function" name="variant_get_type" returns="int" signature="variant_get_type(object variant)" src="com_variant.c" /&gt;
      &lt;scope doc="Convert a variant into another type Variant is modified&amp;#xA;quot in-place quot" ilk="function" name="variant_set_type" returns="void" signature="variant_set_type(object variant, int type)" src="com_variant.c" /&gt;
      &lt;scope doc="Convert a variant into a new variant object of another&amp;#xA;type" ilk="function" name="variant_cast" returns="object" signature="variant_cast(object variant, int type)" src="com_variant.c" /&gt;
      &lt;scope doc="Returns a handle to an already running instance of a&amp;#xA;COM object" ilk="function" name="com_get_active_object" returns="object" signature="com_get_active_object(string progid [, int code_page ])" src="com_com.c" /&gt;
      &lt;scope doc="Generate a globally unique identifier GUID" ilk="function" name="com_create_guid" returns="string" signature="com_create_guid()" src="com_com.c" /&gt;
      &lt;scope doc="Connect events from a COM object to a PHP object" ilk="function" name="com_event_sink" returns="bool" signature="com_event_sink(object comobject, object sinkobject [, mixed sinkinterface])" src="com_com.c" /&gt;
      &lt;scope doc="Print out a PHP class definition for a dispatchable&amp;#xA;interface" ilk="function" name="com_print_typeinfo" returns="bool" signature="com_print_typeinfo(object comobject " src="com_com.c" /&gt;
      &lt;scope doc="Process COM messages sleeping for up to timeoutms&amp;#xA;milliseconds" ilk="function" name="com_message_pump" returns="bool" signature="com_message_pump([int timeoutms])" src="com_com.c" /&gt;
      &lt;scope doc="Loads a Typelibrary and registers its constants" ilk="function" name="com_load_typelib" returns="bool" signature="com_load_typelib(string typelib_name [, int case_insensitive])" src="com_com.c" /&gt;
      &lt;scope doc="Get number of affected rows in previous MySQL operation" ilk="function" name="mysqli_affected_rows" returns="mixed" signature="mysqli_affected_rows(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Turn auto commit on or of" ilk="function" name="mysqli_autocommit" returns="bool" signature="mysqli_autocommit(object link, bool mode)" src="mysqli_api.c" /&gt;
      &lt;scope doc="U Bind variables to a prepared statement as parameters" ilk="function" name="mysqli_stmt_bind_param" returns="bool" signature="mysqli_stmt_bind_param(object stmt, string types, mixed variable [,mixed,....])" src="mysqli_api.c" /&gt;
      &lt;scope doc="U Bind variables to a prepared statement for result&amp;#xA;storage" ilk="function" name="mysqli_stmt_bind_result" returns="bool" signature="mysqli_stmt_bind_result(object stmt, mixed var, [,mixed, ...])" src="mysqli_api.c" /&gt;
      &lt;scope doc="Change logged-in user of the active connection" ilk="function" name="mysqli_change_user" returns="bool" signature="mysqli_change_user(object link, string user, string password, string database)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Returns the name of the character set used for this&amp;#xA;connection" ilk="function" name="mysqli_character_set_name" returns="string" signature="mysqli_character_set_name(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Close connection" ilk="function" name="mysqli_close" returns="bool" signature="mysqli_close(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Commit outstanding actions and close transaction" ilk="function" name="mysqli_commit" returns="bool" signature="mysqli_commit(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Move internal result pointer" ilk="function" name="mysqli_data_seek" returns="bool" signature="mysqli_data_seek(object result, int offset)" src="mysqli_api.c" /&gt;
      &lt;scope doc="U" ilk="function" name="mysqli_debug" returns="void" signature="mysqli_debug(string debug)" src="mysqli_api.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_dump_debug_info" returns="bool" signature="mysqli_dump_debug_info(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Returns the numerical value of the error message from&amp;#xA;previous MySQL operation" ilk="function" name="mysqli_errno" returns="int" signature="mysqli_errno(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Returns the text of the error message from previous&amp;#xA;MySQL operation" ilk="function" name="mysqli_error" returns="string" signature="mysqli_error(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Execute a prepared statement" ilk="function" name="mysqli_stmt_execute" returns="bool" signature="mysqli_stmt_execute(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="U Fetch results from a prepared statement into the&amp;#xA;bound variables" ilk="function" name="mysqli_stmt_fetch" returns="mixed" signature="mysqli_stmt_fetch(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Fetch the number of fields returned by the last query&amp;#xA;for the given link" ilk="function" name="mysqli_field_count" returns="int" signature="mysqli_field_count(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Set result pointer to a specified field offset" ilk="function" name="mysqli_field_seek" returns="int" signature="mysqli_field_seek(object result, int fieldnr)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get current field offset of result pointer" ilk="function" name="mysqli_field_tell" returns="int" signature="mysqli_field_tell(object result)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Free query result memory for the given result handle" ilk="function" name="mysqli_free_result" returns="void" signature="mysqli_free_result(object result)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get MySQL client info" ilk="function" name="mysqli_get_client_info" returns="string" signature="mysqli_get_client_info(void)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get MySQL client info" ilk="function" name="mysqli_get_client_version" returns="int" signature="mysqli_get_client_version(void)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get MySQL protocol information" ilk="function" name="mysqli_get_proto_info" returns="int" signature="mysqli_get_proto_info(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get MySQL server info" ilk="function" name="mysqli_get_server_info" returns="string" signature="mysqli_get_server_info(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Return the MySQL version for the server referenced by&amp;#xA;the given link" ilk="function" name="mysqli_get_server_version" returns="int" signature="mysqli_get_server_version(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get information about the most recent query" ilk="function" name="mysqli_info" returns="string" signature="mysqli_info(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Initialize mysqli and return a resource for use with&amp;#xA;mysql real connect" ilk="function" name="mysqli_init" returns="resource" signature="mysqli_init(void)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get the ID generated from the previous INSERT operation" ilk="function" name="mysqli_insert_id" returns="mixed" signature="mysqli_insert_id(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Kill a mysql process on the server" ilk="function" name="mysqli_kill" returns="bool" signature="mysqli_kill(object link, int processid)" src="mysqli_api.c" /&gt;
      &lt;scope doc="check if there any more query results from a multi&amp;#xA;query" ilk="function" name="mysqli_more_results" returns="bool" signature="mysqli_more_results(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="read next result from multi query" ilk="function" name="mysqli_next_result" returns="bool" signature="mysqli_next_result(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="read next result from multi query" ilk="function" name="mysqli_stmt_next_result" returns="bool" signature="mysqli_stmt_next_result(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get number of fields in result" ilk="function" name="mysqli_num_fields" returns="int" signature="mysqli_num_fields(object result)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get number of rows in result" ilk="function" name="mysqli_num_rows" returns="mixed" signature="mysqli_num_rows(object result)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Set options" ilk="function" name="mysqli_options" returns="bool" signature="mysqli_options(object link, int flags, mixed values)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Ping a server connection or reconnect if there is no&amp;#xA;connection" ilk="function" name="mysqli_ping" returns="bool" signature="mysqli_ping(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Prepare a SQL statement for execution" ilk="function" name="mysqli_prepare" returns="mixed" signature="mysqli_prepare(object link, string query)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Open a connection to a mysql server" ilk="function" name="mysqli_real_connect" returns="bool" signature="mysqli_real_connect(object link [,string hostname [,string username [,string passwd [,string dbname [,int port [,string socket [,int flags]]]]]]])" src="mysqli_api.c" /&gt;
      &lt;scope doc="Binary-safe version of mysql query" ilk="function" name="mysqli_real_query" returns="bool" signature="mysqli_real_query(object link, string query)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Escapes special characters in a string for use in a SQL&amp;#xA;statement taking into account the current charset of&amp;#xA;the" ilk="function" name="mysqli_real_escape_string" returns="string" signature="mysqli_real_escape_string(object link, string escapestr)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Undo actions from current transaction" ilk="function" name="mysqli_rollback" returns="bool" signature="mysqli_rollback(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_stmt_send_long_data" returns="bool" signature="mysqli_stmt_send_long_data(object stmt, int param_nr, string data)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Return the number of rows affected in the last query&amp;#xA;for the given link" ilk="function" name="mysqli_stmt_affected_rows" returns="mixed" signature="mysqli_stmt_affected_rows(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Close statement" ilk="function" name="mysqli_stmt_close" returns="bool" signature="mysqli_stmt_close(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Move internal result pointer" ilk="function" name="mysqli_stmt_data_seek" returns="void" signature="mysqli_stmt_data_seek(object stmt, int offset)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Return the number of result columns for the given&amp;#xA;statement" ilk="function" name="mysqli_stmt_field_count" returns="int" signature="mysqli_stmt_field_count(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Free stored result memory for the given statement&amp;#xA;handle" ilk="function" name="mysqli_stmt_free_result" returns="void" signature="mysqli_stmt_free_result(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get the ID generated from the previous INSERT operation" ilk="function" name="mysqli_stmt_insert_id" returns="mixed" signature="mysqli_stmt_insert_id(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Return the number of parameter for the given statement" ilk="function" name="mysqli_stmt_param_count" returns="int" signature="mysqli_stmt_param_count(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="reset a prepared statement" ilk="function" name="mysqli_stmt_reset" returns="bool" signature="mysqli_stmt_reset(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Return the number of rows in statements result set" ilk="function" name="mysqli_stmt_num_rows" returns="mixed" signature="mysqli_stmt_num_rows(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Select a MySQL database" ilk="function" name="mysqli_select_db" returns="bool" signature="mysqli_select_db(object link, string dbname)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Returns the SQLSTATE error from previous MySQL&amp;#xA;operation" ilk="function" name="mysqli_sqlstate" returns="string" signature="mysqli_sqlstate(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="U" ilk="function" name="mysqli_ssl_set" returns="bool" signature="mysqli_ssl_set(object link ,string key ,string cert ,string ca ,string capath ,string cipher])" src="mysqli_api.c" /&gt;
      &lt;scope doc="Get current system status" ilk="function" name="mysqli_stat" returns="mixed" signature="mysqli_stat(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Flush tables or caches or reset replication server&amp;#xA;information" ilk="function" name="mysqli_refresh" returns="bool" signature="mysqli_refresh(object link, long options)" src="mysqli_api.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_stmt_attr_set" returns="int" signature="mysqli_stmt_attr_set(object stmt, long attr, long mode)" src="mysqli_api.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_stmt_attr_get" returns="int" signature="mysqli_stmt_attr_get(object stmt, long attr)" src="mysqli_api.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_stmt_errno" returns="int" signature="mysqli_stmt_errno(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_stmt_error" returns="string" signature="mysqli_stmt_error(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Initialize statement object" ilk="function" name="mysqli_stmt_init" returns="mixed" signature="mysqli_stmt_init(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="prepare server side statement with query" ilk="function" name="mysqli_stmt_prepare" returns="bool" signature="mysqli_stmt_prepare(object stmt, string query)" src="mysqli_api.c" /&gt;
      &lt;scope doc="return result set from statement" ilk="function" name="mysqli_stmt_result_metadata" returns="mixed" signature="mysqli_stmt_result_metadata(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_stmt_store_result" returns="bool" signature="mysqli_stmt_store_result(stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_stmt_sqlstate" returns="string" signature="mysqli_stmt_sqlstate(object stmt)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Buffer result set on client" ilk="function" name="mysqli_store_result" returns="object" signature="mysqli_store_result(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Return the current thread ID" ilk="function" name="mysqli_thread_id" returns="int" signature="mysqli_thread_id(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Return whether thread safety is given or not" ilk="function" name="mysqli_thread_safe" returns="bool" signature="mysqli_thread_safe(void)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Directly retrieve query results - do not buffer results&amp;#xA;on client side" ilk="function" name="mysqli_use_result" returns="mixed" signature="mysqli_use_result(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Open a connection to a mysql server" ilk="function" name="mysqli_connect" returns="object" signature="mysqli_connect([string hostname [,string username [,string passwd [,string dbname [,int port [,string socket]]]]]])" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_link_construct" returns="object" signature="mysqli_link_construct()" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="Returns the numerical value of the error message from&amp;#xA;last connect command" ilk="function" name="mysqli_connect_errno" returns="int" signature="mysqli_connect_errno(void)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="Returns the text of the error message from previous&amp;#xA;MySQL operation" ilk="function" name="mysqli_connect_error" returns="string" signature="mysqli_connect_error(void)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="Returns statistics about the zval cache" ilk="function" name="mysqli_get_client_stats" returns="array" signature="mysqli_get_client_stats(void)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="Returns statistics about the zval cache" ilk="function" name="mysqli_get_connection_stats" returns="array" signature="mysqli_get_connection_stats(void)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_stmt_error_list" returns="string" signature="mysqli_stmt_error_list(object stmt)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="allows to execute multiple queries" ilk="function" name="mysqli_multi_query" returns="bool" signature="mysqli_multi_query(object link, string query)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_query" returns="mixed" signature="mysqli_query(object link, string query [,int resultmode])" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="U Poll connections" ilk="function" name="mysqli_poll" returns="int" signature="mysqli_poll(array read, array write, array error, long sec [, long usec])" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="U Poll connections" ilk="function" name="mysqli_reap_async_query" returns="int" signature="mysqli_reap_async_query(object link)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="U Buffer result set on client" ilk="function" name="mysqli_stmt_get_result" returns="object" signature="mysqli_stmt_get_result(object link)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_get_warnings" returns="object" signature="mysqli_get_warnings(object link)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_stmt_get_warnings" returns="object" signature="mysqli_stmt_get_warnings(object link)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="sets client character set" ilk="function" name="mysqli_set_charset" returns="bool" signature="mysqli_set_charset(object link, string csname)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="U returns a character set object" ilk="function" name="mysqli_get_charset" returns="object" signature="mysqli_get_charset(object link)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="Starts a transaction" ilk="function" name="mysqli_begin_transaction" returns="bool" signature="mysqli_begin_transaction(object link, [int flags [, string name]])" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="Starts a transaction" ilk="function" name="mysqli_savepoint" returns="bool" signature="mysqli_savepoint(object link, string name)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="Starts a transaction" ilk="function" name="mysqli_release_savepoint" returns="bool" signature="mysqli_release_savepoint(object link, string name)" src="mysqli_nonapi.c" /&gt;
      &lt;scope doc="initialize and start embedded server" ilk="function" name="mysqli_embedded_server_start" returns="bool" signature="mysqli_embedded_server_start(bool start, array arguments, array groups)" src="mysqli_embedded.c" /&gt;
      &lt;scope doc="" ilk="function" name="mysqli_embedded_server_end" returns="void" signature="mysqli_embedded_server_end(void)" src="mysqli_embedded.c" /&gt;
      &lt;scope doc="sets report level" ilk="function" name="mysqli_report" returns="bool" signature="mysqli_report(int flags)" src="mysqli_report.c" /&gt;
      &lt;scope doc="Open a PostgreSQL connection" ilk="function" name="pg_connect" returns="resource" signature="pg_connect(string connection_string[, int connect_type] " src="pgsql.c" /&gt;
      &lt;scope doc="Open a persistent PostgreSQL connection" ilk="function" name="pg_pconnect" returns="resource" signature="pg_pconnect(string connection_string " src="pgsql.c" /&gt;
      &lt;scope doc="Close a PostgreSQL connection" ilk="function" name="pg_close" returns="bool" signature="pg_close([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Get the database name" ilk="function" name="pg_dbname" returns="string" signature="pg_dbname([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Get the error message string" ilk="function" name="pg_last_error" returns="string" signature="pg_last_error([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Get the options associated with the connection" ilk="function" name="pg_options" returns="string" signature="pg_options([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Return the port number associated with the connection" ilk="function" name="pg_port" returns="int" signature="pg_port([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Return the tty name associated with the connection" ilk="function" name="pg_tty" returns="string" signature="pg_tty([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the host name associated with the connection" ilk="function" name="pg_host" returns="string" signature="pg_host([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Returns an array with client protocol and server&amp;#xA;version when available" ilk="function" name="pg_version" returns="array" signature="pg_version([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the value of a server parameter" ilk="function" name="pg_parameter_status" returns="false" signature="pg_parameter_status([resource connection,] string param_name)" src="pgsql.c" /&gt;
      &lt;scope doc="Ping database If connection is bad try to reconnect" ilk="function" name="pg_ping" returns="bool" signature="pg_ping([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Execute a query" ilk="function" name="pg_query" returns="resource" signature="pg_query([resource connection,] string query)" src="pgsql.c" /&gt;
      &lt;scope doc="Execute a query" ilk="function" name="pg_query_params" returns="resource" signature="pg_query_params([resource connection,] string query, array params)" src="pgsql.c" /&gt;
      &lt;scope doc="Prepare a query for future execution" ilk="function" name="pg_prepare" returns="resource" signature="pg_prepare([resource connection,] string stmtname, string query)" src="pgsql.c" /&gt;
      &lt;scope doc="Execute a prepared query" ilk="function" name="pg_execute" returns="resource" signature="pg_execute([resource connection,] string stmtname, array params)" src="pgsql.c" /&gt;
      &lt;scope doc="Return the number of rows in the result" ilk="function" name="pg_num_rows" returns="int" signature="pg_num_rows(resource result)" src="pgsql.c" /&gt;
      &lt;scope doc="Return the number of fields in the result" ilk="function" name="pg_num_fields" returns="int" signature="pg_num_fields(resource result)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the number of affected tuples" ilk="function" name="pg_affected_rows" returns="int" signature="pg_affected_rows(resource result)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the last notice set by the backend" ilk="function" name="pg_last_notice" returns="string" signature="pg_last_notice(resource connection)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the name of the table field belongs to or&amp;#xA;table&amp;apos;s oid if oid only is true" ilk="function" name="pg_field_table" returns="mixed" signature="pg_field_table(resource result, int field_number[, bool oid_only])" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the name of the field" ilk="function" name="pg_field_name" returns="string" signature="pg_field_name(resource result, int field_number)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the internal size of the field" ilk="function" name="pg_field_size" returns="int" signature="pg_field_size(resource result, int field_number)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the type name for the given field" ilk="function" name="pg_field_type" returns="string" signature="pg_field_type(resource result, int field_number)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the type oid for the given field" ilk="function" name="pg_field_type_oid" returns="string" signature="pg_field_type_oid(resource result, int field_number)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the field number of the named field" ilk="function" name="pg_field_num" returns="int" signature="pg_field_num(resource result, string field_name)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns values from a result identifier" ilk="function" name="pg_fetch_result" returns="mixed" signature="pg_fetch_result(resource result, [int row_number,] mixed field_name)" src="pgsql.c" /&gt;
      &lt;scope doc="Get a row as an enumerated array" ilk="function" name="pg_fetch_row" returns="array" signature="pg_fetch_row(resource result [, int row [, int result_type]])" src="pgsql.c" /&gt;
      &lt;scope doc="Fetch a row as an assoc array" ilk="function" name="pg_fetch_assoc" returns="array" signature="pg_fetch_assoc(resource result [, int row])" src="pgsql.c" /&gt;
      &lt;scope doc="Fetch a row as an array" ilk="function" name="pg_fetch_array" returns="array" signature="pg_fetch_array(resource result [, int row [, int result_type]])" src="pgsql.c" /&gt;
      &lt;scope doc="Fetch a row as an object" ilk="function" name="pg_fetch_object" returns="object" signature="pg_fetch_object(resource result [, int row [, string class_name [, NULL" src="pgsql.c" /&gt;
      &lt;scope doc="Fetch all rows into array" ilk="function" name="pg_fetch_all" returns="array" signature="pg_fetch_all(resource result)" src="pgsql.c" /&gt;
      &lt;scope doc="Fetch all rows into array" ilk="function" name="pg_fetch_all_columns" returns="array" signature="pg_fetch_all_columns(resource result [, int column_number])" src="pgsql.c" /&gt;
      &lt;scope doc="Set internal row offset" ilk="function" name="pg_result_seek" returns="bool" signature="pg_result_seek(resource result, int offset)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the printed length" ilk="function" name="pg_field_prtlen" returns="int" signature="pg_field_prtlen(resource result, [int row,] mixed field_name_or_number)" src="pgsql.c" /&gt;
      &lt;scope doc="Test if a field is NULL" ilk="function" name="pg_field_is_null" returns="int" signature="pg_field_is_null(resource result, [int row,] mixed field_name_or_number)" src="pgsql.c" /&gt;
      &lt;scope doc="Free result memory" ilk="function" name="pg_free_result" returns="bool" signature="pg_free_result(resource result)" src="pgsql.c" /&gt;
      &lt;scope doc="Returns the last object identifier" ilk="function" name="pg_last_oid" returns="string" signature="pg_last_oid(resource result)" src="pgsql.c" /&gt;
      &lt;scope doc="Enable tracing a PostgreSQL connection" ilk="function" name="pg_trace" returns="bool" signature="pg_trace(string filename [, string mode [, resource connection]])" src="pgsql.c" /&gt;
      &lt;scope doc="Disable tracing of a PostgreSQL connection" ilk="function" name="pg_untrace" returns="bool" signature="pg_untrace([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Create a large object" ilk="function" name="pg_lo_create" returns="mixed" signature="pg_lo_create([resource connection],[mixed large_object_oid])" src="pgsql.c" /&gt;
      &lt;scope doc="Delete a large object" ilk="function" name="pg_lo_unlink" returns="bool" signature="pg_lo_unlink([resource connection,] string large_object_oid)" src="pgsql.c" /&gt;
      &lt;scope doc="Open a large object and return fd" ilk="function" name="pg_lo_open" returns="resource" signature="pg_lo_open([resource connection,] int large_object_oid, string mode)" src="pgsql.c" /&gt;
      &lt;scope doc="Close a large object" ilk="function" name="pg_lo_close" returns="bool" signature="pg_lo_close(resource large_object)" src="pgsql.c" /&gt;
      &lt;scope doc="Read a large object" ilk="function" name="pg_lo_read" returns="string" signature="pg_lo_read(resource large_object [, int len])" src="pgsql.c" /&gt;
      &lt;scope doc="Write a large object" ilk="function" name="pg_lo_write" returns="int" signature="pg_lo_write(resource large_object, string buf [, int len])" src="pgsql.c" /&gt;
      &lt;scope doc="Read a large object and send straight to browser" ilk="function" name="pg_lo_read_all" returns="int" signature="pg_lo_read_all(resource large_object)" src="pgsql.c" /&gt;
      &lt;scope doc="Import large object direct from filesystem" ilk="function" name="pg_lo_import" returns="int" signature="pg_lo_import([resource connection, ] string filename [, mixed oid])" src="pgsql.c" /&gt;
      &lt;scope doc="Export large object direct to filesystem" ilk="function" name="pg_lo_export" returns="bool" signature="pg_lo_export([resource connection, ] int objoid, string filename)" src="pgsql.c" /&gt;
      &lt;scope doc="Seeks position of large object" ilk="function" name="pg_lo_seek" returns="bool" signature="pg_lo_seek(resource large_object, int offset [, int whence])" src="pgsql.c" /&gt;
      &lt;scope doc="Returns current position of large object" ilk="function" name="pg_lo_tell" returns="int" signature="pg_lo_tell(resource large_object)" src="pgsql.c" /&gt;
      &lt;scope doc="Set error verbosity" ilk="function" name="pg_set_error_verbosity" returns="int" signature="pg_set_error_verbosity([resource connection,] int verbosity)" src="pgsql.c" /&gt;
      &lt;scope doc="Set client encoding" ilk="function" name="pg_set_client_encoding" returns="int" signature="pg_set_client_encoding([resource connection,] string encoding)" src="pgsql.c" /&gt;
      &lt;scope doc="Get the current client encoding" ilk="function" name="pg_client_encoding" returns="string" signature="pg_client_encoding([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Sync with backend Completes the Copy command" ilk="function" name="pg_end_copy" returns="bool" signature="pg_end_copy([resource connection])" src="pgsql.c" /&gt;
      &lt;scope doc="Send null-terminated string to backend server" ilk="function" name="pg_put_line" returns="bool" signature="pg_put_line([resource connection,] string query)" src="pgsql.c" /&gt;
      &lt;scope doc="Copy table to array" ilk="function" name="pg_copy_to" returns="array" signature="pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])" src="pgsql.c" /&gt;
      &lt;scope doc="Copy table from array" ilk="function" name="pg_copy_from" returns="bool" signature="pg_copy_from(resource connection, string table_name , array rows [, string delimiter [, string null_as]])" src="pgsql.c" /&gt;
      &lt;scope doc="Escape string for text char type" ilk="function" name="pg_escape_string" returns="string" signature="pg_escape_string([resource connection,] string data)" src="pgsql.c" /&gt;
      &lt;scope doc="Escape binary for bytea type" ilk="function" name="pg_escape_bytea" returns="string" signature="pg_escape_bytea([resource connection,] string data)" src="pgsql.c" /&gt;
      &lt;scope doc="Unescape binary for bytea type" ilk="function" name="pg_unescape_bytea" returns="string" signature="pg_unescape_bytea(string data)" src="pgsql.c" /&gt;
      &lt;scope doc="Escape parameter as string literal i e parameter" ilk="function" name="pg_escape_literal" returns="string" signature="pg_escape_literal([resource connection,] string data)" src="pgsql.c" /&gt;
      &lt;scope doc="Escape identifier i e table name field name" ilk="function" name="pg_escape_identifier" returns="string" signature="pg_escape_identifier([resource connection,] string data)" src="pgsql.c" /&gt;
      &lt;scope doc="Get error message associated with result" ilk="function" name="pg_result_error" returns="string" signature="pg_result_error(resource result)" src="pgsql.c" /&gt;
      &lt;scope doc="Get error message field associated with result" ilk="function" name="pg_result_error_field" returns="string" signature="pg_result_error_field(resource result, int fieldcode)" src="pgsql.c" /&gt;
      &lt;scope doc="Get connection status" ilk="function" name="pg_connection_status" returns="int" signature="pg_connection_status(resource connection)" src="pgsql.c" /&gt;
      &lt;scope doc="Get transaction status" ilk="function" name="pg_transaction_status" returns="int" signature="pg_transaction_status(resource connection)" src="pgsql.c" /&gt;
      &lt;scope doc="Reset connection reconnect" ilk="function" name="pg_connection_reset" returns="bool" signature="pg_connection_reset(resource connection)" src="pgsql.c" /&gt;
      &lt;scope doc="Cancel request" ilk="function" name="pg_cancel_query" returns="bool" signature="pg_cancel_query(resource connection)" src="pgsql.c" /&gt;
      &lt;scope doc="Get connection is busy or not" ilk="function" name="pg_connection_busy" returns="bool" signature="pg_connection_busy(resource connection)" src="pgsql.c" /&gt;
      &lt;scope doc="Send asynchronous query" ilk="function" name="pg_send_query" returns="bool" signature="pg_send_query(resource connection, string query)" src="pgsql.c" /&gt;
      &lt;scope doc="Send asynchronous parameterized query" ilk="function" name="pg_send_query_params" returns="bool" signature="pg_send_query_params(resource connection, string query, array params)" src="pgsql.c" /&gt;
      &lt;scope doc="Asynchronously prepare a query for future execution" ilk="function" name="pg_send_prepare" returns="bool" signature="pg_send_prepare(resource connection, string stmtname, string query)" src="pgsql.c" /&gt;
      &lt;scope doc="Executes prevriously prepared stmtname asynchronously" ilk="function" name="pg_send_execute" returns="bool" signature="pg_send_execute(resource connection, string stmtname, array params)" src="pgsql.c" /&gt;
      &lt;scope doc="Get asynchronous query result" ilk="function" name="pg_get_result" returns="resource" signature="pg_get_result(resource connection)" src="pgsql.c" /&gt;
      &lt;scope doc="Get status of query result" ilk="function" name="pg_result_status" returns="mixed" signature="pg_result_status(resource result[, long result_type])" src="pgsql.c" /&gt;
      &lt;scope doc="Get asynchronous notification" ilk="function" name="pg_get_notify" returns="array" signature="pg_get_notify([resource connection[, result_type]])" src="pgsql.c" /&gt;
      &lt;scope doc="Get backend server pid" ilk="function" name="pg_get_pid" returns="int" signature="pg_get_pid([resource connection)" src="pgsql.c" /&gt;
      &lt;scope doc="Get meta data" ilk="function" name="pg_meta_data" returns="array" signature="pg_meta_data(resource db, string table)" src="pgsql.c" /&gt;
      &lt;scope doc="Check and convert values for PostgreSQL SQL statement" ilk="function" name="pg_convert" returns="array" signature="pg_convert(resource db, string table, array values[, int options])" src="pgsql.c" /&gt;
      &lt;scope doc="Insert values filed gt value to table" ilk="function" name="pg_insert" returns="mixed" signature="pg_insert(resource db, string table, array values[, int options])" src="pgsql.c" /&gt;
      &lt;scope doc="Update table using values field gt value and ids id gt&amp;#xA;value" ilk="function" name="pg_update" returns="mixed" signature="pg_update(resource db, string table, array fields, array ids[, int options])" src="pgsql.c" /&gt;
      &lt;scope doc="Delete records has ids id gt value" ilk="function" name="pg_delete" returns="mixed" signature="pg_delete(resource db, string table, array ids[, int options])" src="pgsql.c" /&gt;
      &lt;scope doc="Select records that has ids id gt value" ilk="function" name="pg_select" returns="mixed" signature="pg_select(resource db, string table, array ids[, int options])" src="pgsql.c" /&gt;
      &lt;scope doc="Copy the iterator into an array" ilk="function" name="iterator_to_array" returns="array" signature="iterator_to_array(Traversable it [, bool use_keys = true])" src="spl_iterators.c" /&gt;
      &lt;scope doc="Count the elements in an iterator" ilk="function" name="iterator_count" returns="int" signature="iterator_count(Traversable it)" src="spl_iterators.c" /&gt;
      &lt;scope doc="Calls a function for every element in an iterator" ilk="function" name="iterator_apply" returns="int" signature="iterator_apply(Traversable it, mixed function [, mixed params])" src="spl_iterators.c" /&gt;
      &lt;scope doc="Return an array containing the names of all parent&amp;#xA;classes" ilk="function" name="class_parents" returns="array" signature="class_parents(object instance [, boolean autoload = true])" src="php_spl.c" /&gt;
      &lt;scope doc="Return all classes and interfaces implemented by SPL" ilk="function" name="class_implements" returns="array" signature="class_implements(mixed what [, bool autoload ])" src="php_spl.c" /&gt;
      &lt;scope doc="Return all traits used by a class" ilk="function" name="class_uses" returns="array" signature="class_uses(mixed what [, bool autoload ])" src="php_spl.c" /&gt;
      &lt;scope doc="Return an array containing the names of all clsses and&amp;#xA;interfaces defined in SPL" ilk="function" name="spl_classes" returns="array" signature="spl_classes()" src="php_spl.c" /&gt;
      &lt;scope doc="Default implementation for autoload" ilk="function" name="spl_autoload" returns="void" signature="spl_autoload(string class_name [, string file_extensions])" src="php_spl.c" /&gt;
      &lt;scope doc="Register and return default file extensions for spl&amp;#xA;autoload" ilk="function" name="spl_autoload_extensions" returns="string" signature="spl_autoload_extensions([string file_extensions])" src="php_spl.c" /&gt;
      &lt;scope doc="Try all registerd autoload function to load the&amp;#xA;requested class" ilk="function" name="spl_autoload_call" returns="void" signature="spl_autoload_call(string class_name)" src="php_spl.c" /&gt;
      &lt;scope doc="Register given function as autoload implementation" ilk="function" name="spl_autoload_register" returns="bool" signature="spl_autoload_register([mixed autoload_function = &amp;quot;spl_autoload&amp;quot; [, throw = true [, prepend]]])" src="php_spl.c" /&gt;
      &lt;scope doc="Unregister given function as autoload implementation" ilk="function" name="spl_autoload_unregister" returns="bool" signature="spl_autoload_unregister(mixed autoload_function)" src="php_spl.c" /&gt;
      &lt;scope doc="Return all registered autoload functionns" ilk="function" name="spl_autoload_functions" returns="array" signature="spl_autoload_functions()" src="php_spl.c" /&gt;
      &lt;scope doc="Return hash id for given object" ilk="function" name="spl_object_hash" returns="string" signature="spl_object_hash(object obj)" src="php_spl.c" /&gt;
      &lt;scope doc="throws InvalidArgumentException Attach a new iterator" ilk="function" name="attachIterator" returns="void" signature="attachIterator(Iterator iterator[, mixed info])" src="spl_observer.c" /&gt;
      &lt;scope doc="Recode string str according to request string" ilk="function" name="recode_string" returns="string" signature="recode_string(string request, string str)" src="recode.c" /&gt;
      &lt;scope doc="Recode file input into file output according to request" ilk="function" name="recode_file" returns="bool" signature="recode_file(string request, resource input, resource output)" src="recode.c" /&gt;
      &lt;scope doc="Turn on Output Buffering specifying an optional output&amp;#xA;handler" ilk="function" name="ob_start" returns="bool" signature="ob_start([string" src="output.c" /&gt;
      &lt;scope doc="Flush send contents of the output buffer The last&amp;#xA;buffer content is sent to next buffer" ilk="function" name="ob_flush" returns="bool" signature="ob_flush(void)" src="output.c" /&gt;
      &lt;scope doc="Clean delete the current output buffer" ilk="function" name="ob_clean" returns="bool" signature="ob_clean(void)" src="output.c" /&gt;
      &lt;scope doc="Flush send the output buffer and delete current output&amp;#xA;buffer" ilk="function" name="ob_end_flush" returns="bool" signature="ob_end_flush(void)" src="output.c" /&gt;
      &lt;scope doc="Clean the output buffer and delete current output&amp;#xA;buffer" ilk="function" name="ob_end_clean" returns="bool" signature="ob_end_clean(void)" src="output.c" /&gt;
      &lt;scope doc="Get current buffer contents flush send the output&amp;#xA;buffer and delete current output buffer" ilk="function" name="ob_get_flush" returns="bool" signature="ob_get_flush(void)" src="output.c" /&gt;
      &lt;scope doc="Get current buffer contents and delete current output&amp;#xA;buffer" ilk="function" name="ob_get_clean" returns="bool" signature="ob_get_clean(void)" src="output.c" /&gt;
      &lt;scope doc="Return the contents of the output buffer" ilk="function" name="ob_get_contents" returns="string" signature="ob_get_contents(void)" src="output.c" /&gt;
      &lt;scope doc="Return the nesting level of the output buffer" ilk="function" name="ob_get_level" returns="int" signature="ob_get_level(void)" src="output.c" /&gt;
      &lt;scope doc="Return the length of the output buffer" ilk="function" name="ob_get_length" returns="int" signature="ob_get_length(void)" src="output.c" /&gt;
      &lt;scope doc="List all output buffers in an array" ilk="function" name="ob_list_handlers" returns="array" signature="ob_list_handlers()" src="output.c" /&gt;
      &lt;scope doc="Return the status of the active or all output buffers" ilk="function" name="ob_get_status" returns="array" signature="ob_get_status([bool full_status])" src="output.c" /&gt;
      &lt;scope doc="Turn implicit flush on off and is equivalent to calling&amp;#xA;flush after every output call" ilk="function" name="ob_implicit_flush" returns="void" signature="ob_implicit_flush([int flag])" src="output.c" /&gt;
      &lt;scope doc="Reset clear URL rewriter values" ilk="function" name="output_reset_rewrite_vars" returns="bool" signature="output_reset_rewrite_vars(void)" src="output.c" /&gt;
      &lt;scope doc="Add URL rewriter values" ilk="function" name="output_add_rewrite_var" returns="bool" signature="output_add_rewrite_var(string name, string value)" src="output.c" /&gt;
      &lt;scope doc="Registers a custom URL protocol handler class" ilk="function" name="stream_wrapper_register" returns="bool" signature="stream_wrapper_register(string protocol, string classname[, integer flags])" src="userspace.c" /&gt;
      &lt;scope doc="Unregister a wrapper for the life of the current&amp;#xA;request" ilk="function" name="stream_wrapper_unregister" returns="bool" signature="stream_wrapper_unregister(string protocol)" src="userspace.c" /&gt;
      &lt;scope doc="Restore the original protocol handler overriding if&amp;#xA;necessary" ilk="function" name="stream_wrapper_restore" returns="bool" signature="stream_wrapper_restore(string protocol)" src="userspace.c" /&gt;
      &lt;scope doc="call a header function" ilk="function" name="header_register_callback" returns="bool" signature="header_register_callback(mixed callback)" src="SAPI.c" /&gt;
      &lt;scope doc="Sets the maximum time a script can run" ilk="function" name="set_time_limit" returns="bool" signature="set_time_limit(int seconds)" src="main.c" /&gt;
      &lt;scope doc="Perform an apache sub-request" ilk="function" name="virtual" returns="bool" signature="virtual(string uri)" src="php_functions.c" /&gt;
      &lt;scope doc="Fetch all HTTP request headers" ilk="function" name="getallheaders" returns="array" signature="getallheaders(void)" src="php_functions.c" /&gt;
      &lt;scope doc="Fetch all HTTP response headers" ilk="function" name="apache_response_headers" returns="array" signature="apache_response_headers(void)" src="php_functions.c" /&gt;
      &lt;scope doc="Get and set Apache request notes" ilk="function" name="apache_note" returns="string" signature="apache_note(string note_name [, string note_value])" src="php_functions.c" /&gt;
      &lt;scope doc="Set an Apache subprocess env variable" ilk="function" name="apache_setenv" returns="bool" signature="apache_setenv(string variable, string value [, bool walk_to_top])" src="php_functions.c" /&gt;
      &lt;scope doc="Get an Apache subprocess env variable" ilk="function" name="apache_getenv" returns="bool" signature="apache_getenv(string variable [, bool walk_to_top])" src="php_functions.c" /&gt;
      &lt;scope doc="Fetch Apache version" ilk="function" name="apache_get_version" returns="string" signature="apache_get_version(void)" src="php_functions.c" /&gt;
      &lt;scope doc="Get a list of loaded Apache modules" ilk="function" name="apache_get_modules" returns="array" signature="apache_get_modules(void)" src="php_functions.c" /&gt;
      &lt;scope doc="Terminate apache process after this request" ilk="function" name="apache_child_terminate" returns="bool" signature="apache_child_terminate(void)" src="php_apache.c" /&gt;
      &lt;scope doc="Fetch all HTTP request headers" ilk="function" name="apache_request_headers" returns="array" signature="apache_request_headers(void)" src="php_apache.c" /&gt;
      &lt;scope doc="Perform a partial request of the given URI to obtain&amp;#xA;information about it" ilk="function" name="apache_lookup_uri" returns="object" signature="apache_lookup_uri(string URI)" src="php_apache.c" /&gt;
      &lt;scope doc="Reset the Apache write timer" ilk="function" name="apache_reset_timeout" returns="bool" signature="apache_reset_timeout(void)" src="php_apache.c" /&gt;
      &lt;scope doc="fetch all incoming request headers" ilk="function" name="apache_request_headers_in" returns="array" signature="apache_request_headers_in()" src="php_apache.c" /&gt;
      &lt;scope doc="fetch all outgoing request headers" ilk="function" name="apache_request_headers_out" returns="array" signature="apache_request_headers_out([{string name" src="php_apache.c" /&gt;
      &lt;scope doc="fetch all headers that go out in case of an error or a&amp;#xA;subrequest" ilk="function" name="apache_request_err_headers_out" returns="array" signature="apache_request_err_headers_out([{string name" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_server_port" returns="int" signature="apache_request_server_port()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_remote_host" returns="int" signature="apache_request_remote_host([int type])" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_update_mtime" returns="long" signature="apache_request_update_mtime([int dependency_mtime])" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_set_etag" returns="void" signature="apache_request_set_etag()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_set_last_modified" returns="void" signature="apache_request_set_last_modified()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_meets_conditions" returns="long" signature="apache_request_meets_conditions()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_discard_request_body" returns="long" signature="apache_request_discard_request_body()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_satisfies" returns="long" signature="apache_request_satisfies()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_is_initial_req" returns="bool" signature="apache_request_is_initial_req()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_some_auth_required" returns="bool" signature="apache_request_some_auth_required()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_auth_type" returns="string" signature="apache_request_auth_type()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_auth_name" returns="string" signature="apache_request_auth_name()" src="php_apache.c" /&gt;
      &lt;scope doc="" ilk="function" name="apache_request_log_error" returns="boolean" signature="apache_request_log_error(string message, [long facility])" src="php_apache.c" /&gt;
      &lt;scope doc="Returns sub-request for the specified uri You would&amp;#xA;need to run it yourself with run" ilk="function" name="apache_request_sub_req_lookup_uri" returns="object" signature="apache_request_sub_req_lookup_uri(string uri)" src="php_apache.c" /&gt;
      &lt;scope doc="Returns sub-request for the specified file You would&amp;#xA;need to run it yourself with run" ilk="function" name="apache_request_sub_req_lookup_file" returns="object" signature="apache_request_sub_req_lookup_file(string file)" src="php_apache.c" /&gt;
      &lt;scope doc="Returns sub-request for the specified file You would&amp;#xA;need to run it yourself with run" ilk="function" name="apache_request_sub_req_method_uri" returns="object" signature="apache_request_sub_req_method_uri(string method, string uri)" src="php_apache.c" /&gt;
      &lt;scope doc="This is a wrapper for ap sub run req and ap destory sub&amp;#xA;req It takes sub request runs it" ilk="function" name="apache_request_run" returns="long" signature="apache_request_run()" src="php_apache.c" /&gt;
      &lt;scope doc="Perform an NSAPI sub-request" ilk="function" name="nsapi_virtual" returns="bool" signature="nsapi_virtual(string uri)" src="nsapi.c" /&gt;
      &lt;scope doc="Get all headers from the request" ilk="function" name="nsapi_request_headers" returns="array" signature="nsapi_request_headers(void)" src="nsapi.c" /&gt;
      &lt;scope doc="Get all headers from the response" ilk="function" name="nsapi_response_headers" returns="array" signature="nsapi_response_headers(void)" src="nsapi.c" /&gt;
      &lt;scope doc="Fetch all HTTP request headers" ilk="function" name="litespeed_request_headers" returns="array" signature="litespeed_request_headers(void)" src="lsapi_main.c" /&gt;
      &lt;scope doc="Fetch all HTTP response headers" ilk="function" name="litespeed_response_headers" returns="array" signature="litespeed_response_headers(void)" src="lsapi_main.c" /&gt;
      &lt;scope doc="Sets the flags describing the actions the filter may&amp;#xA;take" ilk="function" name="smfi_setflags" returns="void" signature="smfi_setflags(long flags)" src="php_milter.c" /&gt;
      &lt;scope doc="Sets the number of seconds libmilter will wait for an&amp;#xA;MTA connection before timing out a socket" ilk="function" name="smfi_settimeout" returns="void" signature="smfi_settimeout(long timeout)" src="php_milter.c" /&gt;
      &lt;scope doc="Returns the value of the given macro or NULL if the&amp;#xA;macro is not defined" ilk="function" name="smfi_getsymval" returns="string" signature="smfi_getsymval(string macro)" src="php_milter.c" /&gt;
      &lt;scope doc="Directly set the SMTP error reply code for this&amp;#xA;connection This code will be used on subsequent error&amp;#xA;replies resulting" ilk="function" name="smfi_setreply" returns="bool" signature="smfi_setreply(string rcode, string xcode, string message)" src="php_milter.c" /&gt;
      &lt;scope doc="Adds a header to the current message" ilk="function" name="smfi_addheader" returns="bool" signature="smfi_addheader(string headerf, string headerv)" src="php_milter.c" /&gt;
      &lt;scope doc="Changes a header&amp;apos;s value for the current message" ilk="function" name="smfi_chgheader" returns="bool" signature="smfi_chgheader(string headerf, string headerv)" src="php_milter.c" /&gt;
      &lt;scope doc="Add a recipient to the message envelope" ilk="function" name="smfi_addrcpt" returns="bool" signature="smfi_addrcpt(string rcpt)" src="php_milter.c" /&gt;
      &lt;scope doc="Removes the named recipient from the current message&amp;apos;s&amp;#xA;envelope" ilk="function" name="smfi_delrcpt" returns="bool" signature="smfi_delrcpt(string rcpt)" src="php_milter.c" /&gt;
      &lt;scope doc="Replaces the body of the current message If called more&amp;#xA;than once subsequent calls result in data being&amp;#xA;appended to" ilk="function" name="smfi_replacebody" returns="bool" signature="smfi_replacebody(string body)" src="php_milter.c" /&gt;
      &lt;scope doc="Return a boolean to confirm if the process title was&amp;#xA;successfully changed or not" ilk="function" name="cli_set_process_title" returns="boolean" signature="cli_set_process_title(string arg)" src="php_cli_process_title.c" /&gt;
      &lt;scope doc="Return a string with the current process title NULL if&amp;#xA;error" ilk="function" name="cli_get_process_title" returns="string" signature="cli_get_process_title()" src="php_cli_process_title.c" /&gt;
      &lt;scope doc="Changes file owner" ilk="function" name="chown" signature="chown ( string filename, mixed user )" /&gt;
      &lt;scope doc="Determine whether a variable is set" ilk="function" name="isset" signature="bool isset ( mixed var [, mixed var [, ...]] )" /&gt;
      &lt;scope doc="Determine whether a variable is considered to be empty." ilk="function" name="empty" signature="bool empty ( mixed $var )" /&gt;
      &lt;scope doc="unset() destroys the specified variables." ilk="function" name="unset" signature="void unset ( mixed $var [, mixed $var [, mixed $...]] )" /&gt;
      &lt;scope doc="Returns an array with the file names that were include&amp;#xA;once &amp;apos;d&amp;#xA;get_required_files is an alias to get_included_files" ilk="function" name="get_required_files" returns="array" signature="get_required_files(void)" /&gt;
      &lt;scope doc="Generates a user-level error warning notice message&amp;#xA;user_error is an alias to trigger_error" ilk="function" name="user_error" returns="void" signature="user_error(string message [, int error_type])" /&gt;
      &lt;scope doc="Retrieve the error number set by the last posix&amp;#xA;function which failed&amp;#xA;posix_errno is an alias to posix_get_last_error" ilk="function" name="posix_errno" returns="int" signature="posix_errno(void)" /&gt;
      &lt;scope doc="Write session data and end session&amp;#xA;session_commit is an alias to session_write_close" ilk="function" name="session_commit" returns="void" signature="session_commit(void)" /&gt;
      &lt;scope doc="Removes trailing whitespace&amp;#xA;chop is an alias to rtrim" ilk="function" name="chop" returns="string" signature="chop(string str [, string character_mask])" /&gt;
      &lt;scope doc="magic quotes runtime is not supported anymore&amp;#xA;magic_quotes_runtime is an alias to set_magic_quotes_runtime" ilk="function" name="magic_quotes_runtime" returns="bool" signature="magic_quotes_runtime(int new_setting)" /&gt;
      &lt;scope doc="Syntax highlight a source file&amp;#xA;show_source is an alias to highlight_file" ilk="function" name="show_source" returns="bool" signature="show_source(string file_name [, bool return] )" /&gt;
      &lt;scope doc="Set a configuration option returns false on error and&amp;#xA;the old value of the configuration option on success&amp;#xA;ini_alter is an alias to ini_set" ilk="function" name="ini_alter" returns="string" signature="ini_alter(string varname, string newvalue)" /&gt;
      &lt;scope doc="Check DNS records corresponding to a given Internet&amp;#xA;host name or IP address&amp;#xA;checkdnsrr is an alias to dns_check_record" ilk="function" name="checkdnsrr" returns="bool" signature="checkdnsrr(string host [, string type])" /&gt;
      &lt;scope doc="Get MX records corresponding to a given Internet host&amp;#xA;name&amp;#xA;getmxrr is an alias to dns_get_mx" ilk="function" name="getmxrr" returns="bool" signature="getmxrr(string hostname, array mxhosts [, array weight])" /&gt;
      &lt;scope doc="Get the float value of a variable&amp;#xA;doubleval is an alias to floatval" ilk="function" name="doubleval" returns="float" signature="doubleval(mixed var)" /&gt;
      &lt;scope doc="Returns true if variable is a long integer&amp;#xA;is_int is an alias to is_long" ilk="function" name="is_int" returns="bool" signature="is_int(mixed var)" /&gt;
      &lt;scope doc="Returns true if variable is a long integer&amp;#xA;is_integer is an alias to is_long" ilk="function" name="is_integer" returns="bool" signature="is_integer(mixed var)" /&gt;
      &lt;scope doc="Returns true if variable is float point&amp;#xA;is_double is an alias to is_float" ilk="function" name="is_double" returns="bool" signature="is_double(mixed var)" /&gt;
      &lt;scope doc="Returns true if variable is float point&amp;#xA;is_real is an alias to is_float" ilk="function" name="is_real" returns="bool" signature="is_real(mixed var)" /&gt;
      &lt;scope doc="Binary-safe file write&amp;#xA;fputs is an alias to fwrite" ilk="function" name="fputs" returns="int" signature="fputs(resource fp, string str [, int length])" /&gt;
      &lt;scope doc="Set file write buffer&amp;#xA;set_file_buffer is an alias to stream_set_write_buffer" ilk="function" name="set_file_buffer" returns="int" signature="set_file_buffer(resource fp, int buffer)" /&gt;
      &lt;scope doc="Set blocking non-blocking mode on a socket or stream&amp;#xA;set_socket_blocking is an alias to stream_set_blocking" ilk="function" name="set_socket_blocking" returns="bool" signature="set_socket_blocking(resource socket, int mode)" /&gt;
      &lt;scope doc="Set blocking non-blocking mode on a socket or stream&amp;#xA;socket_set_blocking is an alias to stream_set_blocking" ilk="function" name="socket_set_blocking" returns="bool" signature="socket_set_blocking(resource socket, int mode)" /&gt;
      &lt;scope doc="Registers a custom URL protocol handler class&amp;#xA;stream_register_wrapper is an alias to stream_wrapper_register" ilk="function" name="stream_register_wrapper" returns="bool" signature="stream_register_wrapper(string protocol, string classname[, integer flags])" /&gt;
      &lt;scope doc="Set timeout on stream read to seconds microseonds&amp;#xA;socket_set_timeout is an alias to stream_set_timeout" ilk="function" name="socket_set_timeout" returns="bool" signature="socket_set_timeout(resource stream, int seconds [, int microseconds])" /&gt;
      &lt;scope doc="Retrieves header meta data from streams file pointers&amp;#xA;socket_get_status is an alias to stream_get_meta_data" ilk="function" name="socket_get_status" returns="array" signature="socket_get_status(resource fp)" /&gt;
      &lt;scope doc="Returns true if file can be written&amp;#xA;is_writeable is an alias to is_writable" ilk="function" name="is_writeable" returns="bool" signature="is_writeable(string filename)" /&gt;
      &lt;scope doc="Get free disk space for filesystem that path is on&amp;#xA;diskfreespace is an alias to disk_free_space" ilk="function" name="diskfreespace" returns="float" signature="diskfreespace(string path)" /&gt;
      &lt;scope doc="throws RuntimeException throws InvalidArgumentException&amp;#xA;Return an array of all registered Iterator instances&amp;#xA;current result&amp;#xA;pos is an alias to current" ilk="function" name="pos" returns="array" signature="pos()" /&gt;
      &lt;scope doc="Count the number of elements in a variable usually an&amp;#xA;array&amp;#xA;sizeof is an alias to count" ilk="function" name="sizeof" returns="int" signature="sizeof(mixed var [, int mode])" /&gt;
      &lt;scope doc="Checks if the given key or index exists in the array&amp;#xA;key_exists is an alias to array_key_exists" ilk="function" name="key_exists" returns="bool" signature="key_exists(mixed key, array search)" /&gt;
      &lt;scope doc="Sends an SQL query to MySQL&amp;#xA;mysql is an alias to mysql_db_query" ilk="function" name="mysql" returns="resource" signature="mysql(string database_name, string query [, int link_identifier])" /&gt;
      &lt;scope doc="Gets the name of the specified field in a result&amp;#xA;mysql_fieldname is an alias to mysql_field_name" ilk="function" name="mysql_fieldname" returns="string" signature="mysql_fieldname(resource result, int field_index)" /&gt;
      &lt;scope doc="Gets name of the table the specified field is in&amp;#xA;mysql_fieldtable is an alias to mysql_field_table" ilk="function" name="mysql_fieldtable" returns="string" signature="mysql_fieldtable(resource result, int field_offset)" /&gt;
      &lt;scope doc="Returns the length of the specified field&amp;#xA;mysql_fieldlen is an alias to mysql_field_len" ilk="function" name="mysql_fieldlen" returns="int" signature="mysql_fieldlen(resource result, int field_offset)" /&gt;
      &lt;scope doc="Gets the type of the specified field in a result&amp;#xA;mysql_fieldtype is an alias to mysql_field_type" ilk="function" name="mysql_fieldtype" returns="string" signature="mysql_fieldtype(resource result, int field_offset)" /&gt;
      &lt;scope doc="Gets the flags associated with the specified field in a&amp;#xA;result&amp;#xA;mysql_fieldflags is an alias to mysql_field_flags" ilk="function" name="mysql_fieldflags" returns="string" signature="mysql_fieldflags(resource result, int field_offset)" /&gt;
      &lt;scope doc="Selects a MySQL database&amp;#xA;mysql_selectdb is an alias to mysql_select_db" ilk="function" name="mysql_selectdb" returns="bool" signature="mysql_selectdb(string database_name [, int link_identifier])" /&gt;
      &lt;scope doc="Create a MySQL database&amp;#xA;mysql_createdb is an alias to mysql_create_db" ilk="function" name="mysql_createdb" returns="bool" signature="mysql_createdb(string database_name [, int link_identifier])" /&gt;
      &lt;scope doc="Drops delete a MySQL database&amp;#xA;mysql_dropdb is an alias to mysql_drop_db" ilk="function" name="mysql_dropdb" returns="bool" signature="mysql_dropdb(string database_name [, int link_identifier])" /&gt;
      &lt;scope doc="Free result memory&amp;#xA;mysql_freeresult is an alias to mysql_free_result" ilk="function" name="mysql_freeresult" returns="bool" signature="mysql_freeresult(resource result)" /&gt;
      &lt;scope doc="Gets number of fields in a result&amp;#xA;mysql_numfields is an alias to mysql_num_fields" ilk="function" name="mysql_numfields" returns="int" signature="mysql_numfields(resource result)" /&gt;
      &lt;scope doc="Gets number of rows in a result&amp;#xA;mysql_numrows is an alias to mysql_num_rows" ilk="function" name="mysql_numrows" returns="int" signature="mysql_numrows(resource result)" /&gt;
      &lt;scope doc="List databases available on a MySQL server&amp;#xA;mysql_listdbs is an alias to mysql_list_dbs" ilk="function" name="mysql_listdbs" returns="resource" signature="mysql_listdbs([int link_identifier])" /&gt;
      &lt;scope doc="List tables in a MySQL database&amp;#xA;mysql_listtables is an alias to mysql_list_tables" ilk="function" name="mysql_listtables" returns="resource" signature="mysql_listtables(string database_name [, int link_identifier])" /&gt;
      &lt;scope doc="List MySQL result fields&amp;#xA;mysql_listfields is an alias to mysql_list_fields" ilk="function" name="mysql_listfields" returns="resource" signature="mysql_listfields(string database_name, string table_name [, int link_identifier])" /&gt;
      &lt;scope doc="Gets result data&amp;#xA;mysql_db_name is an alias to mysql_result" ilk="function" name="mysql_db_name" returns="mixed" signature="mysql_db_name(resource result, int row [, mixed field])" /&gt;
      &lt;scope doc="Gets result data&amp;#xA;mysql_dbname is an alias to mysql_result" ilk="function" name="mysql_dbname" returns="mixed" signature="mysql_dbname(resource result, int row [, mixed field])" /&gt;
      &lt;scope doc="Gets result data&amp;#xA;mysql_tablename is an alias to mysql_result" ilk="function" name="mysql_tablename" returns="mixed" signature="mysql_tablename(resource result, int row [, mixed field])" /&gt;
      &lt;scope doc="Gets result data&amp;#xA;mysql_table_name is an alias to mysql_result" ilk="function" name="mysql_table_name" returns="mixed" signature="mysql_table_name(resource result, int row [, mixed field])" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INTL_MAX_LOCALE_LEN" /&gt;
      &lt;variable citdl="string" ilk="constant" name="INTL_ICU_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="INTL_ICU_DATA_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GRAPHEME_EXTR_COUNT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GRAPHEME_EXTR_MAXBYTES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GRAPHEME_EXTR_MAXCHARS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ALLOW_UNASSIGNED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_USE_STD3_RULES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_CHECK_BIDI" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_CHECK_CONTEXTJ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_NONTRANSITIONAL_TO_ASCII" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_NONTRANSITIONAL_TO_UNICODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INTL_IDNA_VARIANT_2003" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INTL_IDNA_VARIANT_UTS46" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_EMPTY_LABEL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_LABEL_TOO_LONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_DOMAIN_NAME_TOO_LONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_LEADING_HYPHEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_TRAILING_HYPHEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_HYPHEN_3_4" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_LEADING_COMBINING_MARK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_DISALLOWED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_PUNYCODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_LABEL_HAS_DOT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_INVALID_ACE_LABEL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_BIDI" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IDNA_ERROR_CONTEXTJ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSPELL_FAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSPELL_NORMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSPELL_BAD_SPELLERS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSPELL_RUN_TOGETHER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_IPC_NOWAIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_EAGAIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_ENOMSG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_NOERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_EXCEPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_NOENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_DTDLOAD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_DTDATTR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_DTDVALID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_NOERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_NOWARNING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_NOBLANKS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_XINCLUDE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_NSCLEAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_NOCDATA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_NONET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_PEDANTIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_COMPACT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_NOXMLDECL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_PARSEHUGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_NOEMPTYTAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_HTML_NOIMPLIED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_HTML_NODEFDTD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_ERR_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_ERR_WARNING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_ERR_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXML_ERR_FATAL" /&gt;
      &lt;variable citdl="string" ilk="constant" name="LIBXML_DOTTED_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="LIBXML_LOADED_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GMP_ROUND_ZERO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GMP_ROUND_PLUSINF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GMP_ROUND_MINUSINF" /&gt;
      &lt;variable citdl="string" ilk="constant" name="GMP_MPIR_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="GMP_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_PATTERN_ORDER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_SET_ORDER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_OFFSET_CAPTURE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_SPLIT_NO_EMPTY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_SPLIT_DELIM_CAPTURE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_SPLIT_OFFSET_CAPTURE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_GREP_INVERT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_NO_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_INTERNAL_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_BACKTRACK_LIMIT_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_RECURSION_LIMIT_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_BAD_UTF8_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PREG_BAD_UTF8_OFFSET_ERROR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PCRE_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_OID_OUTPUT_SUFFIX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_OID_OUTPUT_MODULE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_OID_OUTPUT_FULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_OID_OUTPUT_NUMERIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_OID_OUTPUT_UCD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_OID_OUTPUT_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_VALUE_LIBRARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_VALUE_PLAIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_VALUE_OBJECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_BIT_STR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_OCTET_STR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_OPAQUE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_NULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_OBJECT_ID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_IPADDRESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_COUNTER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_UNSIGNED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_TIMETICKS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_UINTEGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_INTEGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SNMP_COUNTER64" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_CLONE_AUTO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_CLONE_NEVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_CLONE_ALWAYS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_SECPREF_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_SECPREF_READ_FILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_SECPREF_WRITE_FILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_SECPREF_CREATE_DIRECTORY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_SECPREF_READ_NETWORK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_SECPREF_WRITE_NETWORK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSL_SECPREF_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBXSLT_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LIBEXSLT_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="LIBXSLT_DOTTED_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="LIBEXSLT_DOTTED_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSSQL_ASSOC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSSQL_NUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSSQL_BOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLTEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLVARCHAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLCHAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLINT1" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLINT2" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLINT4" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLBIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLFLT4" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLFLT8" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLFLTN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="WNOHANG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="WUNTRACED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIG_IGN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIG_DFL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIG_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGHUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGINT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGQUIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGILL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGTRAP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGABRT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGIOT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGBUS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGFPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGKILL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGUSR1" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGSEGV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGUSR2" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGPIPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGALRM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGTERM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGSTKFLT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGCLD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGCHLD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGCONT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGSTOP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGTSTP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGTTIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGTTOU" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGURG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGXCPU" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGXFSZ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGVTALRM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGPROF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGWINCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGPOLL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGIO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGPWR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGSYS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIGBABY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PRIO_PGRP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PRIO_USER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PRIO_PROCESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIG_BLOCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIG_UNBLOCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SIG_SETMASK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SI_USER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SI_NOINFO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SI_KERNEL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SI_QUEUE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SI_TIMER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SI_MESGQ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SI_ASYNCIO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SI_SIGIO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SI_TKILL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CLD_EXITED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CLD_KILLED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CLD_DUMPED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CLD_TRAPPED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CLD_STOPPED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CLD_CONTINUED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TRAP_BRKPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TRAP_TRACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POLL_IN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POLL_OUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POLL_MSG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POLL_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POLL_PRI" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POLL_HUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ILL_ILLOPC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ILL_ILLOPN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ILL_ILLADR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ILL_ILLTRP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ILL_PRVOPC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ILL_PRVREG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ILL_COPROC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ILL_BADSTK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FPE_INTDIV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FPE_INTOVF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FPE_FLTDIV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FPE_FLTOVF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FPE_FLTUND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FPE_FLTRES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FPE_FLTINV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FPE_FLTSUB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SEGV_MAPERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SEGV_ACCERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="BUS_ADRALN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="BUS_ADRERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="BUS_OBJERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PCNTL_" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EINTR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EBADF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EACCES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EINVAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EMFILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EWOULDBLOCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EINPROGRESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EALREADY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOTSOCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EDESTADDRREQ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EMSGSIZE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EPROTOTYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOPROTOOPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EPROTONOSUPPORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ESOCKTNOSUPPORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EOPNOTSUPP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EPFNOSUPPORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EAFNOSUPPORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EADDRINUSE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EADDRNOTAVAIL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENETDOWN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENETUNREACH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENETRESET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ECONNABORTED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ECONNRESET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOBUFS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EISCONN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOTCONN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ESHUTDOWN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ETOOMANYREFS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ETIMEDOUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ECONNREFUSED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ELOOP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENAMETOOLONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EHOSTDOWN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EHOSTUNREACH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOTEMPTY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EPROCLIM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EUSERS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EDQUOT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ESTALE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EREMOTE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EDISCON" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_SYSNOTREADY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_VERNOTSUPPORTED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_NOTINITIALISED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_HOST_NOT_FOUND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_TRY_AGAIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_NO_RECOVERY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_NO_DATA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_NO_ADDRESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="AF_UNIX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="AF_INET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="AF_INET6" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCK_STREAM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCK_DGRAM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCK_RAW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCK_SEQPACKET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCK_RDM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_OOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_WAITALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_CTRUNC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_TRUNC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_PEEK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_DONTROUTE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_EOR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_EOF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_CONFIRM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_ERRQUEUE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_NOSIGNAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_DONTWAIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_MORE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_WAITFORONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MSG_CMSG_CLOEXEC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_DEBUG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_REUSEADDR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_REUSEPORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_KEEPALIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_DONTROUTE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_LINGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_BROADCAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_OOBINLINE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_SNDBUF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_RCVBUF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_SNDLOWAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_RCVLOWAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_SNDTIMEO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_RCVTIMEO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_TYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_FAMILY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_BINDTODEVICE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOL_SOCKET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOMAXCONN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TCP_NODELAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_NORMAL_READ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_BINARY_READ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCAST_JOIN_GROUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCAST_LEAVE_GROUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCAST_BLOCK_SOURCE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCAST_UNBLOCK_SOURCE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCAST_JOIN_SOURCE_GROUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCAST_LEAVE_SOURCE_GROUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IP_MULTICAST_IF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IP_MULTICAST_TTL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IP_MULTICAST_LOOP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_MULTICAST_IF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_MULTICAST_HOPS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_MULTICAST_LOOP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPPROTO_IP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPPROTO_IPV6" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOL_TCP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOL_UDP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_UNICAST_HOPS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EPERM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EIO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENXIO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_E2BIG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EAGAIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOMEM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOTBLK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EBUSY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EEXIST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EXDEV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENODEV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOTDIR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EISDIR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENFILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOTTY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOSPC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ESPIPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EROFS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EMLINK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EPIPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOLCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOSYS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOMSG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EIDRM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ECHRNG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EL2NSYNC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EL3HLT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EL3RST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ELNRNG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EUNATCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOCSI" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EL2HLT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EBADE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EBADR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EXFULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOANO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EBADRQC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EBADSLT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOSTR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENODATA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ETIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOSR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENONET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOLINK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EADV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ESRMNT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ECOMM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EPROTO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EMULTIHOP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EBADMSG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOTUNIQ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EBADFD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EREMCHG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ERESTART" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ESTRPIPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EISNAM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EREMOTEIO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_ENOMEDIUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOCKET_EMEDIUMTYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_RECVPKTINFO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_PKTINFO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_RECVHOPLIMIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_HOPLIMIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_RECVRTHDR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_RECVHOPOPTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_RECVDSTOPTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_RECVTCLASS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_TCLASS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_RTHDR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_HOPOPTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IPV6_DSTOPTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SCM_RIGHTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SCM_CREDENTIALS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_PASSCRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_REQUIRE_ONCE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_REQUIRE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_EVAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_INCLUDE_ONCE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_INCLUDE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_LOGICAL_OR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_LOGICAL_XOR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_LOGICAL_AND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_PRINT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_SR_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_SL_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_XOR_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_OR_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_AND_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_MOD_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CONCAT_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DIV_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_MUL_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_MINUS_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_PLUS_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_BOOLEAN_OR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_BOOLEAN_AND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_IS_NOT_IDENTICAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_IS_IDENTICAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_IS_NOT_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_IS_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_IS_GREATER_OR_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_IS_SMALLER_OR_EQUAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_SR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_SL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_INSTANCEOF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_UNSET_CAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_BOOL_CAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_OBJECT_CAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ARRAY_CAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_STRING_CAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DOUBLE_CAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_INT_CAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DEC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_INC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CLONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_NEW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_EXIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_IF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ELSEIF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ELSE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ENDIF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_LNUMBER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DNUMBER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_STRING_VARNAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_VARIABLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_NUM_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_INLINE_HTML" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CHARACTER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_BAD_CHARACTER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ENCAPSED_AND_WHITESPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CONSTANT_ENCAPSED_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ECHO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_WHILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ENDWHILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_FOR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ENDFOR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_FOREACH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ENDFOREACH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DECLARE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ENDDECLARE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_AS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_SWITCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ENDSWITCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CASE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_BREAK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CONTINUE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_GOTO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_FUNCTION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CONST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_RETURN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_YIELD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_TRY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CATCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_FINALLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_THROW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_USE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_INSTEADOF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_GLOBAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_PUBLIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_PROTECTED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_PRIVATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_FINAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ABSTRACT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_STATIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_VAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_UNSET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ISSET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_EMPTY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_HALT_COMPILER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CLASS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_TRAIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_INTERFACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_EXTENDS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_IMPLEMENTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_OBJECT_OPERATOR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DOUBLE_ARROW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_LIST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_ARRAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CALLABLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CLASS_C" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_TRAIT_C" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_METHOD_C" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_FUNC_C" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_LINE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_FILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_COMMENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DOC_COMMENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_OPEN_TAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_OPEN_TAG_WITH_ECHO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CLOSE_TAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_WHITESPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_START_HEREDOC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_END_HEREDOC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DOLLAR_OPEN_CURLY_BRACES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_CURLY_OPEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_PAAMAYIM_NEKUDOTAYIM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_NAMESPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_NS_C" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DIR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_NS_SEPARATOR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="T_DOUBLE_COLON" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_ASCII" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_TEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_BINARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_IMAGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_AUTORESUME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_TIMEOUT_SEC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_AUTOSEEK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_FAILED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_FINISHED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FTP_MOREDATA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_DEREF_NEVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_DEREF_SEARCHING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_DEREF_FINDING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_DEREF_ALWAYS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_DEREF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_SIZELIMIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_TIMELIMIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_NETWORK_TIMEOUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_PROTOCOL_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_ERROR_NUMBER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_REFERRALS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_RESTART" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_HOST_NAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_ERROR_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_MATCHED_DN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_SERVER_CONTROLS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_CLIENT_CONTROLS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_DEBUG_LEVEL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_X_SASL_MECH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_X_SASL_REALM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_X_SASL_AUTHCID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LDAP_OPT_X_SASL_AUTHZID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GSLC_SSL_NO_AUTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GSLC_SSL_ONEWAY_AUTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GSLC_SSL_TWOWAY_AUTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MB_OVERLOAD_MAIL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MB_OVERLOAD_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MB_OVERLOAD_REGEX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MB_CASE_UPPER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MB_CASE_LOWER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MB_CASE_TITLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_HEX_TAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_HEX_AMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_HEX_APOS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_HEX_QUOT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_FORCE_OBJECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_NUMERIC_CHECK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_UNESCAPED_SLASHES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_PRETTY_PRINT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_UNESCAPED_UNICODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_PARTIAL_OUTPUT_ON_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_ERROR_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_ERROR_DEPTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_ERROR_STATE_MISMATCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_ERROR_CTRL_CHAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_ERROR_SYNTAX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_ERROR_UTF8" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_ERROR_RECURSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_ERROR_INF_OR_NAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_ERROR_UNSUPPORTED_TYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_OBJECT_AS_ARRAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="JSON_BIGINT_AS_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCRYPT_ENCRYPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCRYPT_DECRYPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCRYPT_DEV_RANDOM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCRYPT_DEV_URANDOM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MCRYPT_RAND" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POSIX_F_OK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POSIX_X_OK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POSIX_W_OK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POSIX_R_OK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POSIX_S_IFREG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POSIX_S_IFCHR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POSIX_S_IFBLK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POSIX_S_IFIFO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="POSIX_S_IFSOCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_SESSION_DISABLED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_SESSION_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_SESSION_ACTIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_NO_MEMORY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_SYNTAX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_NO_ELEMENTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_INVALID_TOKEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_UNCLOSED_TOKEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_PARTIAL_CHAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_TAG_MISMATCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_DUPLICATE_ATTRIBUTE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_JUNK_AFTER_DOC_ELEMENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_PARAM_ENTITY_REF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_UNDEFINED_ENTITY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_RECURSIVE_ENTITY_REF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_ASYNC_ENTITY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_BAD_CHAR_REF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_BINARY_ENTITY_REF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_MISPLACED_XML_PI" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_UNKNOWN_ENCODING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_INCORRECT_ENCODING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_UNCLOSED_CDATA_SECTION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ERROR_EXTERNAL_ENTITY_HANDLING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_OPTION_CASE_FOLDING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_OPTION_TARGET_ENCODING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_OPTION_SKIP_TAGSTART" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_OPTION_SKIP_WHITE" /&gt;
      &lt;variable citdl="string" ilk="constant" name="XML_SAX_IMPL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INPUT_POST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INPUT_GET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INPUT_COOKIE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INPUT_ENV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INPUT_SERVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INPUT_SESSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INPUT_REQUEST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_REQUIRE_SCALAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_REQUIRE_ARRAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FORCE_ARRAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_NULL_ON_FAILURE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_VALIDATE_INT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_VALIDATE_BOOLEAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_VALIDATE_FLOAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_VALIDATE_REGEXP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_VALIDATE_URL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_VALIDATE_EMAIL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_VALIDATE_IP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_VALIDATE_MAC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_UNSAFE_RAW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_STRIPPED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_ENCODED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_SPECIAL_CHARS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_FULL_SPECIAL_CHARS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_EMAIL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_URL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_NUMBER_INT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_NUMBER_FLOAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_SANITIZE_MAGIC_QUOTES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_CALLBACK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_ALLOW_OCTAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_ALLOW_HEX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_STRIP_LOW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_STRIP_HIGH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_STRIP_BACKTICK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_ENCODE_LOW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_ENCODE_HIGH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_ENCODE_AMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_NO_ENCODE_QUOTES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_EMPTY_STRING_NULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_ALLOW_FRACTION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_ALLOW_THOUSAND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_ALLOW_SCIENTIFIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_SCHEME_REQUIRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_HOST_REQUIRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_PATH_REQUIRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_QUERY_REQUIRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_IPV4" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_IPV6" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_NO_RES_RANGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILTER_FLAG_NO_PRIV_RANGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="NIL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAP_OPENTIMEOUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAP_READTIMEOUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAP_WRITETIMEOUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAP_CLOSETIMEOUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OP_DEBUG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OP_READONLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OP_ANONYMOUS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OP_SHORTCACHE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OP_SILENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OP_PROTOTYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OP_HALFOPEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OP_EXPUNGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OP_SECURE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CL_EXPUNGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FT_UID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FT_PEEK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FT_NOT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FT_INTERNAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FT_PREFETCHTEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ST_UID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ST_SILENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ST_SET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CP_UID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CP_MOVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SE_UID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SE_FREE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SE_NOPREFETCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_FREE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SO_NOSERVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SA_MESSAGES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SA_RECENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SA_UNSEEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SA_UIDNEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SA_UIDVALIDITY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SA_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LATT_NOINFERIORS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LATT_NOSELECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LATT_MARKED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LATT_UNMARKED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LATT_REFERRAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LATT_HASCHILDREN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LATT_HASNOCHILDREN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORTDATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORTARRIVAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORTFROM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORTSUBJECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORTTO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORTCC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORTSIZE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TYPETEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TYPEMULTIPART" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TYPEMESSAGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TYPEAPPLICATION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TYPEAUDIO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TYPEIMAGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TYPEVIDEO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TYPEMODEL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TYPEOTHER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENC7BIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENC8BIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENCBINARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENCBASE64" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENCQUOTEDPRINTABLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENCOTHER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAP_GC_ELT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAP_GC_ENV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAP_GC_TEXTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HASH_HMAC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_GIF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_JPG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_JPEG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_PNG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_WBMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_XPM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_COLOR_TILED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_COLOR_STYLED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_COLOR_BRUSHED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_COLOR_STYLEDBRUSHED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_COLOR_TRANSPARENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_ARC_ROUNDED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_ARC_PIE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_ARC_CHORD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_ARC_NOFILL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_ARC_EDGED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_GD2_RAW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_GD2_COMPRESSED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FLIP_HORIZONTAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FLIP_VERTICAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FLIP_BOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_EFFECT_REPLACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_EFFECT_ALPHABLEND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_EFFECT_NORMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_EFFECT_OVERLAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_CROP_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_CROP_TRANSPARENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_CROP_BLACK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_CROP_WHITE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_CROP_SIDES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_CROP_THRESHOLD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_BELL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_BESSEL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_BILINEAR_FIXED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_BICUBIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_BICUBIC_FIXED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_BLACKMAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_BOX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_BSPLINE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_CATMULLROM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_GAUSSIAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_GENERALIZED_CUBIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_HERMITE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_HAMMING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_HANNING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_MITCHELL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_POWER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_QUADRATIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_SINC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_NEAREST_NEIGHBOUR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_WEIGHTED4" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_TRIANGLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_AFFINE_TRANSLATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_AFFINE_SCALE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_AFFINE_ROTATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_AFFINE_SHEAR_HORIZONTAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_AFFINE_SHEAR_VERTICAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GD_BUNDLED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_NEGATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_GRAYSCALE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_BRIGHTNESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_CONTRAST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_COLORIZE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_EDGEDETECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_GAUSSIAN_BLUR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_SELECTIVE_BLUR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_EMBOSS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_MEAN_REMOVAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_SMOOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMG_FILTER_PIXELATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GD_MAJOR_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GD_MINOR_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GD_RELEASE_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PNG_NO_FILTER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PNG_FILTER_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PNG_FILTER_SUB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PNG_FILTER_UP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PNG_FILTER_AVG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PNG_FILTER_PAETH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PNG_ALL_FILTERS" /&gt;
      &lt;variable citdl="string" ilk="constant" name="GD_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="GD_EXTRA_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="READLINE_LIB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CRYPT_SALT_LENGTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CRYPT_STD_DES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CRYPT_EXT_DES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CRYPT_MD5" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CRYPT_BLOWFISH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CRYPT_SHA256" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CRYPT_SHA512" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_EMERG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_ALERT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_CRIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_WARNING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_NOTICE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_INFO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_DEBUG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_KERN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_USER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_MAIL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_DAEMON" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_AUTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_SYSLOG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_LPR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_NEWS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_UUCP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_CRON" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_AUTHPRIV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_LOCAL0" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_LOCAL1" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_LOCAL2" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_LOCAL3" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_LOCAL4" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_LOCAL5" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_LOCAL6" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_LOCAL7" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_PID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_CONS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_ODELAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_NDELAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_NOWAIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOG_PERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STR_PAD_LEFT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STR_PAD_RIGHT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STR_PAD_BOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PATHINFO_DIRNAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PATHINFO_BASENAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PATHINFO_EXTENSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PATHINFO_FILENAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CHAR_MAX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LC_CTYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LC_NUMERIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LC_TIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LC_COLLATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LC_MONETARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LC_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LC_MESSAGES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SEEK_SET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SEEK_CUR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SEEK_END" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOCK_SH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOCK_EX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOCK_UN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="LOCK_NB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_CONNECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_AUTH_REQUIRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_AUTH_RESULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_MIME_TYPE_IS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_FILE_SIZE_IS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_REDIRECTED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_PROGRESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_FAILURE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_COMPLETED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_RESOLVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_SEVERITY_INFO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_SEVERITY_WARN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_NOTIFY_SEVERITY_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_FILTER_READ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_FILTER_WRITE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_FILTER_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CLIENT_PERSISTENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CLIENT_ASYNC_CONNECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CLIENT_CONNECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv2_CLIENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv3_CLIENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv23_CLIENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CRYPTO_METHOD_TLS_CLIENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv2_SERVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv3_SERVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv23_SERVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CRYPTO_METHOD_TLS_SERVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SHUT_RD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SHUT_WR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SHUT_RDWR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_PF_INET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_PF_INET6" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_PF_UNIX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_IPPROTO_IP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_IPPROTO_TCP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_IPPROTO_UDP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_IPPROTO_ICMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_IPPROTO_RAW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SOCK_STREAM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SOCK_DGRAM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SOCK_RAW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SOCK_SEQPACKET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SOCK_RDM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_PEEK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_OOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SERVER_BIND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_SERVER_LISTEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILE_USE_INCLUDE_PATH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILE_IGNORE_NEW_LINES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILE_SKIP_EMPTY_LINES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILE_APPEND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILE_NO_DEFAULT_CONTEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILE_TEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILE_BINARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FNM_NOESCAPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FNM_PATHNAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FNM_PERIOD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FNM_CASEFOLD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_A" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_NS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_CNAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_SOA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_PTR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_HINFO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_MX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_TXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_SRV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_NAPTR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_AAAA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_A6" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_ANY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DNS_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSFS_PASS_ON" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSFS_FEED_ME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSFS_ERR_FATAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSFS_FLAG_NORMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSFS_FLAG_FLUSH_INC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PSFS_FLAG_FLUSH_CLOSE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="EXTR_OVERWRITE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="EXTR_SKIP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="EXTR_PREFIX_SAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="EXTR_PREFIX_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="EXTR_PREFIX_INVALID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="EXTR_PREFIX_IF_EXISTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="EXTR_IF_EXISTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="EXTR_REFS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORT_ASC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORT_DESC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORT_REGULAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORT_NUMERIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORT_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORT_LOCALE_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORT_NATURAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SORT_FLAG_CASE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CASE_LOWER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CASE_UPPER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="COUNT_NORMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="COUNT_RECURSIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ASSERT_ACTIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ASSERT_CALLBACK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ASSERT_BAIL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ASSERT_WARNING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ASSERT_QUIET_EVAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CONNECTION_ABORTED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CONNECTION_NORMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CONNECTION_TIMEOUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INI_USER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INI_PERDIR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INI_SYSTEM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INI_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INI_SCANNER_NORMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INI_SCANNER_RAW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_URL_SCHEME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_URL_HOST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_URL_PORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_URL_USER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_URL_PASS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_URL_PATH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_URL_QUERY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_URL_FRAGMENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_QUERY_RFC1738" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_QUERY_RFC3986" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_ROUND_HALF_UP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_ROUND_HALF_DOWN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_ROUND_HALF_EVEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PHP_ROUND_HALF_ODD" /&gt;
      &lt;variable citdl="float" ilk="constant" name="INF" /&gt;
      &lt;variable citdl="float" ilk="constant" name="NAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SCANDIR_SORT_ASCENDING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SCANDIR_SORT_DESCENDING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SCANDIR_SORT_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GLOB_BRACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GLOB_MARK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GLOB_NOSORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GLOB_NOCHECK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GLOB_NOESCAPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GLOB_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GLOB_ONLYDIR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="GLOB_AVAILABLE_FLAGS" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DIRECTORY_SEPARATOR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PATH_SEPARATOR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PASSWORD_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PASSWORD_BCRYPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PASSWORD_BCRYPT_DEFAULT_COST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_GIF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_JPEG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_PNG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_SWF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_PSD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_BMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_TIFF_II" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_TIFF_MM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_JPC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_JP2" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_JPX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_JB2" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_SWC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_IFF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_WBMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_JPEG2000" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_XBM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_ICO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_UNKNOWN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IMAGETYPE_COUNT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTML_SPECIALCHARS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTML_ENTITIES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_COMPAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_QUOTES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_NOQUOTES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_IGNORE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_SUBSTITUTE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_DISALLOWED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_HTML401" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_XML1" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_XHTML" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENT_HTML5" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INFO_GENERAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INFO_CREDITS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INFO_CONFIGURATION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INFO_MODULES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INFO_ENVIRONMENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INFO_VARIABLES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INFO_LICENSE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="INFO_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CREDITS_GROUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CREDITS_GENERAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CREDITS_SAPI" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CREDITS_MODULES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CREDITS_DOCS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CREDITS_FULLPAGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CREDITS_QA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CREDITS_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_BKP_IGNORE_CHECKSUMS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_BKP_IGNORE_LIMBO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_BKP_METADATA_ONLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_BKP_NO_GARBAGE_COLLECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_BKP_OLD_DESCRIPTIONS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_BKP_NON_TRANSPORTABLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_BKP_CONVERT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RES_DEACTIVATE_IDX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RES_NO_SHADOW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RES_NO_VALIDITY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RES_ONE_AT_A_TIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RES_REPLACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RES_CREATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RES_USE_ALL_SPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_PAGE_BUFFERS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_SWEEP_INTERVAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_SHUTDOWN_DB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_DENY_NEW_TRANSACTIONS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_DENY_NEW_ATTACHMENTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_RESERVE_SPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_RES_USE_FULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_RES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_WRITE_MODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_WM_ASYNC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_WM_SYNC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_ACCESS_MODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_AM_READONLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_AM_READWRITE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_SET_SQL_DIALECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_ACTIVATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_PRP_DB_ONLINE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RPR_CHECK_DB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RPR_IGNORE_CHECKSUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RPR_KILL_SHADOWS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RPR_MEND_DB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RPR_VALIDATE_DB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RPR_FULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_RPR_SWEEP_DB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_STS_DATA_PAGES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_STS_DB_LOG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_STS_HDR_PAGES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_STS_IDX_PAGES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_STS_SYS_RELATIONS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_SVC_SERVER_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_SVC_IMPLEMENTATION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_SVC_GET_ENV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_SVC_GET_ENV_LOCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_SVC_GET_ENV_MSG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_SVC_USER_DBPATH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_SVC_SVR_DB_INFO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_SVC_GET_USERS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_CREATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_TEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_FETCH_BLOBS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_FETCH_ARRAYS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_UNIXTIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_WRITE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_READ" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_COMMITTED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_CONSISTENCY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_CONCURRENCY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_REC_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_REC_NO_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_NOWAIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="IBASE_WAIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ICONV_MIME_DECODE_STRICT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ICONV_MIME_DECODE_CONTINUE_ON_ERROR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="ICONV_IMPL" /&gt;
      &lt;variable citdl="string" ilk="constant" name="ICONV_VERSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ELEMENT_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_TEXT_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_CDATA_SECTION_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ENTITY_REF_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ENTITY_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_PI_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_COMMENT_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_DOCUMENT_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_DOCUMENT_TYPE_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_DOCUMENT_FRAG_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_NOTATION_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_HTML_DOCUMENT_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_DTD_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ELEMENT_DECL_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_DECL_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ENTITY_DECL_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_NAMESPACE_DECL_NODE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_GLOBAL_NAMESPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_LOCAL_NAMESPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_CDATA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_ID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_IDREF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_IDREFS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_ENTITY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_NMTOKEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_NMTOKENS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_ENUMERATION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XML_ATTRIBUTE_NOTATION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_PHP_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_INDEX_SIZE_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOMSTRING_SIZE_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_HIERARCHY_REQUEST_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_WRONG_DOCUMENT_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_INVALID_CHARACTER_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_NO_DATA_ALLOWED_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_NO_MODIFICATION_ALLOWED_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_NOT_FOUND_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_NOT_SUPPORTED_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_INUSE_ATTRIBUTE_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_INVALID_STATE_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_SYNTAX_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_INVALID_MODIFICATION_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_NAMESPACE_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_INVALID_ACCESS_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DOM_VALIDATION_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENCHANT_MYSPELL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ENCHANT_ISPELL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQL_ASSOC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQL_NUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQL_BOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQL_CLIENT_COMPRESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQL_CLIENT_SSL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQL_CLIENT_INTERACTIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQL_CLIENT_IGNORE_SPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TIDY_TAG_" /&gt;
      &lt;variable citdl="int" ilk="constant" name="TIDY_NODETYPE_" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_SYSOPER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_SYSDBA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_CRED_EXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_DESCRIBE_ONLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_COMMIT_ON_SUCCESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_NO_AUTO_COMMIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_EXACT_FETCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_SEEK_SET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_SEEK_CUR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_SEEK_END" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_LOB_BUFFER_FREE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_BFILEE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_CFILEE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_CLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_BLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_RDD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_INT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_NUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_RSET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_AFC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_CHR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_VCS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_AVC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_STR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_LVC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_FLT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_UIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_LNG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_LBI" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_BIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_ODT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_BDOUBLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_BFLOAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_NTY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLT_NTY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_BFILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_CFILEE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_CLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_BLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_ROWID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_CURSOR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_BIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_INT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_B_NUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_FETCHSTATEMENT_BY_COLUMN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_FETCHSTATEMENT_BY_ROW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_ASSOC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_NUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_BOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_RETURN_NULLS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_RETURN_LOBS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_DTYPE_FILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_DTYPE_LOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_DTYPE_ROWID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_D_FILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_D_LOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_D_ROWID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_TEMP_CLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OCI_TEMP_BLOB" /&gt;
      &lt;variable citdl="string" ilk="constant" name="OCI_SYSDATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ODBC_BINMODE_PASSTHRU" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ODBC_BINMODE_RETURN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ODBC_BINMODE_CONVERT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_ODBC_CURSORS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CUR_USE_DRIVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CUR_USE_IF_NEEDED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CUR_USE_ODBC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CONCURRENCY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CONCUR_READ_ONLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CONCUR_LOCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CONCUR_ROWVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CONCUR_VALUES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CURSOR_TYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CURSOR_FORWARD_ONLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CURSOR_KEYSET_DRIVEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CURSOR_DYNAMIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CURSOR_STATIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_KEYSET_SIZE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_FETCH_FIRST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_FETCH_NEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_CHAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_VARCHAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_LONGVARCHAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_DECIMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_NUMERIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_BIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_TINYINT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_SMALLINT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_INTEGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_BIGINT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_REAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_FLOAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_DOUBLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_BINARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_VARBINARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_LONGVARBINARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_DATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_TIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_TIMESTAMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_TYPE_DATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_TYPE_TIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_TYPE_TIMESTAMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_BEST_ROWID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_ROWVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_SCOPE_CURROW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_SCOPE_TRANSACTION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_SCOPE_SESSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_NO_NULLS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_NULLABLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_INDEX_UNIQUE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_INDEX_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_ENSURE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQL_QUICK" /&gt;
      &lt;variable citdl="string" ilk="constant" name="ODBC_TYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FORCE_GZIP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FORCE_DEFLATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ZLIB_ENCODING_RAW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ZLIB_ENCODING_GZIP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="ZLIB_ENCODING_DEFLATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_ASSOC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_NUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_BOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_INTEGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_FLOAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_TEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_BLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_NULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_OPEN_READONLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_OPEN_READWRITE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SQLITE3_OPEN_CREATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_SYMLINK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_MIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_MIME_TYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_MIME_ENCODING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_COMPRESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_DEVICES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_CONTINUE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_PRESERVE_ATIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FILEINFO_RAW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_1_1" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_1_2" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_PERSISTENCE_SESSION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_PERSISTENCE_REQUEST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_FUNCTIONS_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_ENCODED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_LITERAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_RPC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_DOCUMENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_ACTOR_NEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_ACTOR_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_ACTOR_UNLIMATERECEIVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_COMPRESSION_ACCEPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_COMPRESSION_GZIP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_COMPRESSION_DEFLATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_AUTHENTICATION_BASIC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_AUTHENTICATION_DIGEST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="UNKNOWN_TYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_BOOLEAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_DECIMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_FLOAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_DOUBLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_DURATION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_DATETIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_TIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_DATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_GYEARMONTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_GYEAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_GMONTHDAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_GDAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_GMONTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_HEXBINARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_BASE64BINARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_ANYURI" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_QNAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_NOTATION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_NORMALIZEDSTRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_TOKEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_LANGUAGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_NMTOKEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_NAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_NCNAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_ID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_IDREF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_IDREFS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_ENTITY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_ENTITIES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_INTEGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_NONPOSITIVEINTEGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_NEGATIVEINTEGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_LONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_INT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_SHORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_BYTE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_NONNEGATIVEINTEGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_UNSIGNEDLONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_UNSIGNEDINT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_UNSIGNEDSHORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_UNSIGNEDBYTE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_POSITIVEINTEGER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_NMTOKENS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_ANYTYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_ANYXML" /&gt;
      &lt;variable citdl="int" ilk="constant" name="APACHE_MAP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_ENC_OBJECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_ENC_ARRAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="XSD_1999_TIMEINSTANT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_SINGLE_ELEMENT_ARRAYS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_WAIT_ONE_WAY_CALLS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_USE_XSI_ARRAY_TYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="WSDL_CACHE_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="WSDL_CACHE_DISK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="WSDL_CACHE_MEMORY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="WSDL_CACHE_BOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_SSL_METHOD_TLS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_SSL_METHOD_SSLv2" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_SSL_METHOD_SSLv3" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SOAP_SSL_METHOD_SSLv23" /&gt;
      &lt;variable citdl="string" ilk="constant" name="XSD_NAMESPACE" /&gt;
      &lt;variable citdl="string" ilk="constant" name="XSD_1999_NAMESPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SUNFUNCS_RET_TIMESTAMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SUNFUNCS_RET_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SUNFUNCS_RET_DOUBLE" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_ATOM" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_COOKIE" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_ISO8601" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC822" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC850" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC1036" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC1123" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC2822" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC3339" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RSS" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_W3C" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_GREGORIAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_JULIAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_JEWISH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_FRENCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_NUM_CALS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_DOW_DAYNO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_DOW_SHORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_DOW_LONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_MONTH_GREGORIAN_SHORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_MONTH_GREGORIAN_LONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_MONTH_JULIAN_SHORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_MONTH_JULIAN_LONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_MONTH_JEWISH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_MONTH_FRENCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_EASTER_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_EASTER_ROMAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_EASTER_ALWAYS_GREGORIAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_EASTER_ALWAYS_JULIAN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_JEWISH_ADD_ALAFIM_GERESH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_JEWISH_ADD_ALAFIM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="CAL_JEWISH_ADD_GERESHAYIM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="EXIF_USE_MBSTRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_VERSION_NUMBER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="X509_PURPOSE_SSL_CLIENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="X509_PURPOSE_SSL_SERVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="X509_PURPOSE_NS_SSL_SERVER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="X509_PURPOSE_SMIME_SIGN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="X509_PURPOSE_SMIME_ENCRYPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="X509_PURPOSE_CRL_SIGN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="X509_PURPOSE_ANY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_SHA1" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_MD5" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_MD4" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_MD2" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_DSS1" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_SHA224" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_SHA256" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_SHA384" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_SHA512" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ALGO_RMD160" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PKCS7_DETACHED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PKCS7_TEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PKCS7_NOINTERN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PKCS7_NOVERIFY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PKCS7_NOCHAIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PKCS7_NOCERTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PKCS7_NOATTR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PKCS7_BINARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PKCS7_NOSIGS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_PKCS1_PADDING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_SSLV23_PADDING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_NO_PADDING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_PKCS1_OAEP_PADDING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_CIPHER_RC2_40" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_CIPHER_RC2_128" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_CIPHER_RC2_64" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_CIPHER_DES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_CIPHER_3DES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_CIPHER_AES_128_CBC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_CIPHER_AES_192_CBC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_CIPHER_AES_256_CBC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_KEYTYPE_RSA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_KEYTYPE_DSA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_KEYTYPE_DH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_KEYTYPE_EC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_RAW_DATA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_ZERO_PADDING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OPENSSL_TLSEXT_SERVER_NAME" /&gt;
      &lt;variable citdl="string" ilk="constant" name="OPENSSL_VERSION_TEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_OPT_SSL_VERIFY_SERVER_CERT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_READ_DEFAULT_GROUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_READ_DEFAULT_FILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_OPT_CONNECT_TIMEOUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_OPT_LOCAL_INFILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_INIT_COMMAND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_OPT_NET_CMD_BUFFER_SIZE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_OPT_NET_READ_BUFFER_SIZE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_OPT_INT_AND_FLOAT_NATIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_SERVER_PUBLIC_KEY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CLIENT_SSL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CLIENT_COMPRESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CLIENT_INTERACTIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CLIENT_IGNORE_SPACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CLIENT_NO_SCHEMA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CLIENT_FOUND_ROWS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_STORE_RESULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_USE_RESULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_ASYNC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_ASSOC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_NUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_BOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_STMT_ATTR_CURSOR_TYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CURSOR_TYPE_NO_CURSOR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CURSOR_TYPE_READ_ONLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CURSOR_TYPE_FOR_UPDATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_CURSOR_TYPE_SCROLLABLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_STMT_ATTR_PREFETCH_ROWS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_NOT_NULL_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_PRI_KEY_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_UNIQUE_KEY_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_MULTIPLE_KEY_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_BLOB_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_UNSIGNED_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_ZEROFILL_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_AUTO_INCREMENT_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TIMESTAMP_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_SET_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_NUM_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_PART_KEY_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_GROUP_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_ENUM_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_BINARY_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_NO_DEFAULT_VALUE_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_ON_UPDATE_NOW_FLAG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_DECIMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_TINY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_SHORT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_LONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_FLOAT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_DOUBLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_NULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_TIMESTAMP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_LONGLONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_INT24" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_DATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_TIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_DATETIME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_YEAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_NEWDATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_ENUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_SET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_TINY_BLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_MEDIUM_BLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_LONG_BLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_BLOB" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_VAR_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_CHAR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_INTERVAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_GEOMETRY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_NEWDECIMAL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TYPE_BIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_SET_CHARSET_NAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_SET_CHARSET_DIR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_NO_DATA" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_DATA_TRUNCATED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REPORT_INDEX" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REPORT_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REPORT_STRICT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REPORT_ALL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REPORT_OFF" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_DEBUG_TRACE_ENABLED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_SERVER_QUERY_NO_GOOD_INDEX_USED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_SERVER_QUERY_NO_INDEX_USED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_SERVER_QUERY_WAS_SLOW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_SERVER_PS_OUT_PARAMS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REFRESH_GRANT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REFRESH_LOG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REFRESH_TABLES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REFRESH_HOSTS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REFRESH_STATUS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REFRESH_THREADS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REFRESH_SLAVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REFRESH_MASTER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_REFRESH_BACKUP_LOG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_OPT_CAN_HANDLE_EXPIRED_PASSWORDS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TRANS_START_WITH_CONSISTENT_SNAPSHOT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TRANS_START_READ_WRITE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TRANS_START_READ_ONLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TRANS_COR_AND_CHAIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TRANS_COR_AND_NO_CHAIN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TRANS_COR_RELEASE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="MYSQLI_TRANS_COR_NO_RELEASE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_CONNECT_FORCE_NEW" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_ASSOC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_NUM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_BOTH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_CONNECTION_BAD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_CONNECTION_OK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_TRANSACTION_IDLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_TRANSACTION_ACTIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_TRANSACTION_INTRANS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_TRANSACTION_INERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_TRANSACTION_UNKNOWN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_ERRORS_TERSE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_ERRORS_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_ERRORS_VERBOSE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_SEEK_SET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_SEEK_CUR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_SEEK_END" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_STATUS_LONG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_STATUS_STRING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_EMPTY_QUERY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_COMMAND_OK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_TUPLES_OK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_COPY_OUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_COPY_IN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_BAD_RESPONSE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_NONFATAL_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_FATAL_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_SEVERITY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_SQLSTATE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_MESSAGE_PRIMARY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_MESSAGE_DETAIL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_MESSAGE_HINT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_STATEMENT_POSITION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_INTERNAL_POSITION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_INTERNAL_QUERY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_CONTEXT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_SOURCE_FILE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_SOURCE_LINE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DIAG_SOURCE_FUNCTION" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_CONV_IGNORE_DEFAULT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_CONV_FORCE_NULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_CONV_IGNORE_NOT_NULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DML_NO_CONV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DML_EXEC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DML_ASYNC" /&gt;
      &lt;variable citdl="int" ilk="constant" name="PGSQL_DML_STRING" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PGSQL_LIBPQ_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PGSQL_LIBPQ_VERSION_STR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_USE_PATH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_IGNORE_URL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_REPORT_ERRORS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_MUST_SEEK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_URL_STAT_LINK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_URL_STAT_QUIET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_MKDIR_RECURSIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_IS_URL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_OPTION_BLOCKING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_OPTION_READ_TIMEOUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_OPTION_READ_BUFFER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_OPTION_WRITE_BUFFER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_BUFFER_NONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_BUFFER_LINE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_BUFFER_FULL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CAST_AS_STREAM" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_CAST_FOR_SELECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_META_TOUCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_META_OWNER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_META_OWNER_NAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_META_GROUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_META_GROUP_NAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="STREAM_META_ACCESS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="OK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DECLINED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="FORBIDDEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="AUTH_REQUIRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="DONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SERVER_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="REDIRECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="BAD_REQUEST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="NOT_FOUND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_CONTINUE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_SWITCHING_PROTOCOLS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_PROCESSING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_OK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_CREATED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_ACCEPTED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_NON_AUTHORITATIVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_NO_CONTENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_RESET_CONTENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_PARTIAL_CONTENT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_MULTI_STATUS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_MULTIPLE_CHOICES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_MOVED_PERMANENTLY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_MOVED_TEMPORARILY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_SEE_OTHER" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_NOT_MODIFIED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_USE_PROXY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_TEMPORARY_REDIRECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_BAD_REQUEST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_UNAUTHORIZED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_PAYMENT_REQUIRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_FORBIDDEN" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_NOT_FOUND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_METHOD_NOT_ALLOWED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_NOT_ACCEPTABLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_PROXY_AUTHENTICATION_REQUIRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_REQUEST_TIME_OUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_CONFLICT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_GONE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_LENGTH_REQUIRED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_PRECONDITION_FAILED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_REQUEST_ENTITY_TOO_LARGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_REQUEST_URI_TOO_LARGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_UNSUPPORTED_MEDIA_TYPE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_RANGE_NOT_SATISFIABLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_EXPECTATION_FAILED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_UNPROCESSABLE_ENTITY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_LOCKED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_FAILED_DEPENDENCY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_INTERNAL_SERVER_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_NOT_IMPLEMENTED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_BAD_GATEWAY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_SERVICE_UNAVAILABLE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_GATEWAY_TIME_OUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_VERSION_NOT_SUPPORTED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_VARIANT_ALSO_VARIES" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_INSUFFICIENT_STORAGE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="HTTP_NOT_EXTENDED" /&gt;
      &lt;variable citdl="int" ilk="constant" name="APLOG_EMERG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="APLOG_ALERT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="APLOG_CRIT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="APLOG_ERR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="APLOG_WARNING" /&gt;
      &lt;variable citdl="int" ilk="constant" name="APLOG_NOTICE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="APLOG_INFO" /&gt;
      &lt;variable citdl="int" ilk="constant" name="APLOG_DEBUG" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_GET" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_PUT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_POST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_DELETE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_CONNECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_OPTIONS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_TRACE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_PATCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_PROPFIND" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_PROPPATCH" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_MKCOL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_COPY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_MOVE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_LOCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_UNLOCK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="M_INVALID" /&gt;
      &lt;variable citdl="int" ilk="constant" name="REQUEST_NO_BODY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="REQUEST_CHUNKED_ERROR" /&gt;
      &lt;variable citdl="int" ilk="constant" name="REQUEST_CHUNKED_DECHUNK" /&gt;
      &lt;variable citdl="int" ilk="constant" name="REQUEST_CHUNKED_PASS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="REMOTE_HOST" /&gt;
      &lt;variable citdl="int" ilk="constant" name="REMOTE_NAME" /&gt;
      &lt;variable citdl="int" ilk="constant" name="REMOTE_NOLOOKUP" /&gt;
      &lt;variable citdl="int" ilk="constant" name="REMOTE_DOUBLE_REV" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIS_CONTINUE" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIS_REJECT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIS_DISCARD" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIS_ACCEPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIS_TEMPFAIL" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIF_ADDHDRS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIF_CHGHDRS" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIF_CHGBODY" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIF_ADDRCPT" /&gt;
      &lt;variable citdl="int" ilk="constant" name="SMFIF_DELRCPT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_RECOVERABLE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_PARSE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_NOTICE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_STRICT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_DEPRECATED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_CORE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_CORE_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_COMPILE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_COMPILE_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_USER_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_USER_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_USER_NOTICE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_USER_DEPRECATED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="E_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DEBUG_BACKTRACE_PROVIDE_OBJECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DEBUG_BACKTRACE_IGNORE_ARGS" /&gt;
      &lt;variable citdl="boolean" ilk="constant" name="TRUE" /&gt;
      &lt;variable citdl="boolean" ilk="constant" name="FALSE" /&gt;
      &lt;variable citdl="NULL" ilk="constant" name="NULL" /&gt;
      &lt;variable citdl="boolean" ilk="constant" name="ZEND_THREAD_SAFE" /&gt;
      &lt;variable citdl="boolean" ilk="constant" name="ZEND_DEBUG_BUILD" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_VERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_MAJOR_VERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_MINOR_VERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_RELEASE_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_EXTRA_VERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_VERSION_ID" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_ZTS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_DEBUG" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_OS" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_SAPI" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DEFAULT_INCLUDE_PATH" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PEAR_INSTALL_DIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PEAR_EXTENSION_DIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_EXTENSION_DIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_PREFIX" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_BINDIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_MANDIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_LIBDIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_DATADIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_SYSCONFDIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_LOCALSTATEDIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_CONFIG_FILE_PATH" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_CONFIG_FILE_SCAN_DIR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_SHLIB_SUFFIX" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_EOL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_MAXPATHLEN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_INT_MAX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_INT_SIZE" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PHP_BINARY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_START" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_WRITE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_FLUSH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_CLEAN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_FINAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_CONT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_END" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_CLEANABLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_FLUSHABLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_REMOVABLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_STDFLAGS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_STARTED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_DISABLED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="UPLOAD_ERR_OK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="UPLOAD_ERR_INI_SIZE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="UPLOAD_ERR_FORM_SIZE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="UPLOAD_ERR_PARTIAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="UPLOAD_ERR_NO_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="UPLOAD_ERR_NO_TMP_DIR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="UPLOAD_ERR_CANT_WRITE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="UPLOAD_ERR_EXTENSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_ATOM" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_COOKIE" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_ISO8601" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC822" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC850" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC1036" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC1123" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC2822" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RFC3339" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_RSS" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DATE_W3C" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SUNFUNCS_RET_TIMESTAMP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SUNFUNCS_RET_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SUNFUNCS_RET_DOUBLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="LIBXML_DOTTED_VERSION" /&gt;
      &lt;variable citdl="string" ilk="constant" name="LIBXML_LOADED_VERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_NOENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_DTDLOAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_DTDATTR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_DTDVALID" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_NOERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_NOWARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_NOBLANKS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_XINCLUDE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_NSCLEAN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_NOCDATA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_NONET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_PEDANTIC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_COMPACT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_NOXMLDECL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_PARSEHUGE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_NOEMPTYTAG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_HTML_NOIMPLIED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_HTML_NODEFDTD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_ERR_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_ERR_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_ERR_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LIBXML_ERR_FATAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_PATTERN_ORDER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_SET_ORDER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_OFFSET_CAPTURE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_SPLIT_NO_EMPTY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_SPLIT_DELIM_CAPTURE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_SPLIT_OFFSET_CAPTURE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_GREP_INVERT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_NO_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_INTERNAL_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_BACKTRACK_LIMIT_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_RECURSION_LIMIT_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_BAD_UTF8_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PREG_BAD_UTF8_OFFSET_ERROR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PCRE_VERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_ASSOC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_NUM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_BOTH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_INTEGER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_FLOAT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_TEXT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_BLOB" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_NULL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_OPEN_READONLY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_OPEN_READWRITE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SQLITE3_OPEN_CREATE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ELEMENT_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_TEXT_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_CDATA_SECTION_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ENTITY_REF_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ENTITY_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_PI_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_COMMENT_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_DOCUMENT_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_DOCUMENT_TYPE_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_DOCUMENT_FRAG_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_NOTATION_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_HTML_DOCUMENT_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_DTD_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ELEMENT_DECL_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_DECL_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ENTITY_DECL_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_NAMESPACE_DECL_NODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_LOCAL_NAMESPACE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_CDATA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_ID" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_IDREF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_IDREFS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_ENTITY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_NMTOKEN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_NMTOKENS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_ENUMERATION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_NOTATION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_PHP_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_INDEX_SIZE_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOMSTRING_SIZE_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_HIERARCHY_REQUEST_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_WRONG_DOCUMENT_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_INVALID_CHARACTER_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_NO_DATA_ALLOWED_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_NO_MODIFICATION_ALLOWED_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_NOT_FOUND_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_NOT_SUPPORTED_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_INUSE_ATTRIBUTE_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_INVALID_STATE_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_SYNTAX_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_INVALID_MODIFICATION_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_NAMESPACE_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_INVALID_ACCESS_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DOM_VALIDATION_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILEINFO_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILEINFO_SYMLINK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILEINFO_MIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILEINFO_MIME_TYPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILEINFO_MIME_ENCODING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILEINFO_DEVICES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILEINFO_CONTINUE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILEINFO_PRESERVE_ATIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILEINFO_RAW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INPUT_POST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INPUT_GET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INPUT_COOKIE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INPUT_ENV" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INPUT_SERVER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INPUT_SESSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INPUT_REQUEST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_REQUIRE_SCALAR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_REQUIRE_ARRAY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FORCE_ARRAY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_NULL_ON_FAILURE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_INT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_BOOLEAN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_FLOAT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_REGEXP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_URL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_EMAIL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_IP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_MAC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_DEFAULT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_UNSAFE_RAW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_STRIPPED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_ENCODED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_SPECIAL_CHARS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_FULL_SPECIAL_CHARS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_EMAIL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_URL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_NUMBER_INT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_NUMBER_FLOAT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_MAGIC_QUOTES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_CALLBACK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_OCTAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_HEX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_STRIP_LOW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_STRIP_HIGH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_STRIP_BACKTICK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_ENCODE_LOW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_ENCODE_HIGH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_ENCODE_AMP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_NO_ENCODE_QUOTES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_EMPTY_STRING_NULL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_FRACTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_THOUSAND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_SCIENTIFIC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_SCHEME_REQUIRED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_HOST_REQUIRED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_PATH_REQUIRED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_QUERY_REQUIRED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_IPV4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_IPV6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_NO_RES_RANGE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILTER_FLAG_NO_PRIV_RANGE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="HASH_HMAC" /&gt;
      &lt;variable citdl="string" ilk="constant" name="ICONV_IMPL" /&gt;
      &lt;variable citdl="string" ilk="constant" name="ICONV_VERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ICONV_MIME_DECODE_STRICT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ICONV_MIME_DECODE_CONTINUE_ON_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_HEX_TAG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_HEX_AMP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_HEX_APOS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_HEX_QUOT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_FORCE_OBJECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_NUMERIC_CHECK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_UNESCAPED_SLASHES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_PRETTY_PRINT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_UNESCAPED_UNICODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_PARTIAL_OUTPUT_ON_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_ERROR_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_ERROR_DEPTH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_ERROR_STATE_MISMATCH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_ERROR_CTRL_CHAR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_ERROR_SYNTAX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_ERROR_UTF8" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_ERROR_RECURSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_ERROR_INF_OR_NAN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_ERROR_UNSUPPORTED_TYPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_OBJECT_AS_ARRAY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="JSON_BIGINT_AS_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_SESSION_DISABLED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_SESSION_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_SESSION_ACTIVE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="POSIX_F_OK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="POSIX_X_OK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="POSIX_W_OK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="POSIX_R_OK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="POSIX_S_IFREG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="POSIX_S_IFCHR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="POSIX_S_IFBLK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="POSIX_S_IFIFO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="POSIX_S_IFSOCK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CONNECTION_ABORTED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CONNECTION_NORMAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CONNECTION_TIMEOUT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INI_USER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INI_PERDIR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INI_SYSTEM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INI_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INI_SCANNER_NORMAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INI_SCANNER_RAW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_URL_SCHEME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_URL_HOST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_URL_PORT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_URL_USER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_URL_PASS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_URL_PATH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_URL_QUERY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_URL_FRAGMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_QUERY_RFC1738" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_QUERY_RFC3986" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_E" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_LOG2E" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_LOG10E" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_LN2" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_LN10" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_PI" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_PI_2" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_PI_4" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_1_PI" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_2_PI" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_SQRTPI" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_2_SQRTPI" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_LNPI" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_EULER" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_SQRT2" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_SQRT1_2" /&gt;
      &lt;variable citdl="double" ilk="constant" name="M_SQRT3" /&gt;
      &lt;variable citdl="double" ilk="constant" name="INF" /&gt;
      &lt;variable citdl="double" ilk="constant" name="NAN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_ROUND_HALF_UP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_ROUND_HALF_DOWN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_ROUND_HALF_EVEN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PHP_ROUND_HALF_ODD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INFO_GENERAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INFO_CREDITS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INFO_CONFIGURATION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INFO_MODULES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INFO_ENVIRONMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INFO_VARIABLES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INFO_LICENSE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="INFO_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CREDITS_GROUP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CREDITS_GENERAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CREDITS_SAPI" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CREDITS_MODULES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CREDITS_DOCS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CREDITS_FULLPAGE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CREDITS_QA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CREDITS_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="HTML_SPECIALCHARS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="HTML_ENTITIES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_COMPAT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_QUOTES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_NOQUOTES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_IGNORE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_SUBSTITUTE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_DISALLOWED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_HTML401" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_XML1" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_XHTML" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ENT_HTML5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STR_PAD_LEFT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STR_PAD_RIGHT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STR_PAD_BOTH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PATHINFO_DIRNAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PATHINFO_BASENAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PATHINFO_EXTENSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PATHINFO_FILENAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CHAR_MAX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LC_CTYPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LC_NUMERIC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LC_TIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LC_COLLATE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LC_MONETARY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LC_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LC_MESSAGES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SEEK_SET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SEEK_CUR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SEEK_END" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOCK_SH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOCK_EX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOCK_UN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOCK_NB" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_CONNECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_AUTH_REQUIRED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_AUTH_RESULT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_MIME_TYPE_IS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_FILE_SIZE_IS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_REDIRECTED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_PROGRESS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_FAILURE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_COMPLETED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_RESOLVE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_SEVERITY_INFO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_SEVERITY_WARN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_SEVERITY_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_FILTER_READ" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_FILTER_WRITE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_FILTER_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CLIENT_PERSISTENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CLIENT_ASYNC_CONNECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CLIENT_CONNECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv2_CLIENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv3_CLIENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv23_CLIENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_TLS_CLIENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv2_SERVER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv3_SERVER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv23_SERVER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_TLS_SERVER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SHUT_RD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SHUT_WR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SHUT_RDWR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_PF_INET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_PF_INET6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_PF_UNIX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_IP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_TCP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_UDP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_ICMP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_RAW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SOCK_STREAM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SOCK_DGRAM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SOCK_RAW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SOCK_SEQPACKET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SOCK_RDM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_PEEK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_OOB" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SERVER_BIND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_SERVER_LISTEN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILE_USE_INCLUDE_PATH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILE_IGNORE_NEW_LINES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILE_SKIP_EMPTY_LINES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILE_APPEND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILE_NO_DEFAULT_CONTEXT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILE_TEXT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FILE_BINARY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FNM_NOESCAPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FNM_PATHNAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FNM_PERIOD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="FNM_CASEFOLD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PSFS_PASS_ON" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PSFS_FEED_ME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PSFS_ERR_FATAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PSFS_FLAG_NORMAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PSFS_FLAG_FLUSH_INC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PSFS_FLAG_FLUSH_CLOSE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PASSWORD_DEFAULT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PASSWORD_BCRYPT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PASSWORD_BCRYPT_DEFAULT_COST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABDAY_1" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABDAY_2" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABDAY_3" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABDAY_4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABDAY_5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABDAY_6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABDAY_7" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DAY_1" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DAY_2" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DAY_3" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DAY_4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DAY_5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DAY_6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DAY_7" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_1" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_2" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_3" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_7" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_8" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_9" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_10" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_11" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ABMON_12" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_1" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_2" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_3" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_7" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_8" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_9" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_10" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_11" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MON_12" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="AM_STR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PM_STR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="D_T_FMT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="D_FMT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_FMT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_FMT_AMPM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ERA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ERA_D_T_FMT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ERA_D_FMT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ERA_T_FMT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ALT_DIGITS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CRNCYSTR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="RADIXCHAR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="THOUSEP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="YESEXPR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="NOEXPR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CODESET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CRYPT_SALT_LENGTH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CRYPT_STD_DES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CRYPT_EXT_DES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CRYPT_MD5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CRYPT_BLOWFISH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CRYPT_SHA256" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CRYPT_SHA512" /&gt;
      &lt;variable citdl="string" ilk="constant" name="DIRECTORY_SEPARATOR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="PATH_SEPARATOR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SCANDIR_SORT_ASCENDING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SCANDIR_SORT_DESCENDING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SCANDIR_SORT_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="GLOB_BRACE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="GLOB_MARK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="GLOB_NOSORT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="GLOB_NOCHECK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="GLOB_NOESCAPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="GLOB_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="GLOB_ONLYDIR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="GLOB_AVAILABLE_FLAGS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_EMERG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_ALERT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_CRIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_ERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_NOTICE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_INFO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_DEBUG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_KERN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_USER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_MAIL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_DAEMON" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_AUTH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_SYSLOG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_LPR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_NEWS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_UUCP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_CRON" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_AUTHPRIV" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_LOCAL0" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_LOCAL1" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_LOCAL2" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_LOCAL3" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_LOCAL4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_LOCAL5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_LOCAL6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_LOCAL7" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_PID" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_CONS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_ODELAY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_NDELAY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_NOWAIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="LOG_PERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="EXTR_OVERWRITE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="EXTR_SKIP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="EXTR_PREFIX_SAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="EXTR_PREFIX_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="EXTR_PREFIX_INVALID" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="EXTR_PREFIX_IF_EXISTS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="EXTR_IF_EXISTS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="EXTR_REFS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SORT_ASC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SORT_DESC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SORT_REGULAR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SORT_NUMERIC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SORT_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SORT_LOCALE_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SORT_NATURAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SORT_FLAG_CASE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CASE_LOWER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CASE_UPPER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="COUNT_NORMAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="COUNT_RECURSIVE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ASSERT_ACTIVE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ASSERT_CALLBACK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ASSERT_BAIL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ASSERT_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ASSERT_QUIET_EVAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_USE_PATH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_IGNORE_URL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_REPORT_ERRORS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_MUST_SEEK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_URL_STAT_LINK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_URL_STAT_QUIET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_MKDIR_RECURSIVE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_IS_URL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_OPTION_BLOCKING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_OPTION_READ_TIMEOUT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_OPTION_READ_BUFFER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_OPTION_WRITE_BUFFER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_BUFFER_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_BUFFER_LINE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_BUFFER_FULL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CAST_AS_STREAM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_CAST_FOR_SELECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_META_TOUCH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_META_OWNER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_META_OWNER_NAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_META_GROUP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_META_GROUP_NAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="STREAM_META_ACCESS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_GIF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_JPEG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_PNG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_SWF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_PSD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_BMP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_TIFF_II" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_TIFF_MM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_JPC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_JP2" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_JPX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_JB2" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_IFF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_WBMP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_JPEG2000" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_XBM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_ICO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_UNKNOWN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="IMAGETYPE_COUNT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_A" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_NS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_CNAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_SOA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_PTR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_HINFO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_MX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_TXT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_SRV" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_NAPTR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_AAAA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_A6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_ANY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="DNS_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_REQUIRE_ONCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_REQUIRE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_EVAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_INCLUDE_ONCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_INCLUDE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_LOGICAL_OR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_LOGICAL_XOR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_LOGICAL_AND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_PRINT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_SR_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_SL_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_XOR_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_OR_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_AND_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_MOD_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CONCAT_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DIV_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_MUL_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_MINUS_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_PLUS_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_BOOLEAN_OR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_BOOLEAN_AND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_IS_NOT_IDENTICAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_IS_IDENTICAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_IS_NOT_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_IS_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_IS_GREATER_OR_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_IS_SMALLER_OR_EQUAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_SR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_SL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_INSTANCEOF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_UNSET_CAST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_BOOL_CAST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_OBJECT_CAST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ARRAY_CAST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_STRING_CAST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DOUBLE_CAST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_INT_CAST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DEC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_INC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CLONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_NEW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_EXIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_IF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ELSEIF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ELSE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ENDIF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_LNUMBER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DNUMBER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_STRING_VARNAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_VARIABLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_NUM_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_INLINE_HTML" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CHARACTER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_BAD_CHARACTER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ENCAPSED_AND_WHITESPACE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CONSTANT_ENCAPSED_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ECHO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_WHILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ENDWHILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_FOR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ENDFOR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_FOREACH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ENDFOREACH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DECLARE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ENDDECLARE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_AS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_SWITCH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ENDSWITCH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CASE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DEFAULT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_BREAK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CONTINUE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_GOTO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_FUNCTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CONST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_RETURN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_YIELD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_TRY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CATCH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_FINALLY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_THROW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_USE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_INSTEADOF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_GLOBAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_PUBLIC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_PROTECTED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_PRIVATE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_FINAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ABSTRACT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_STATIC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_VAR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_UNSET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ISSET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_EMPTY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_HALT_COMPILER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CLASS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_TRAIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_INTERFACE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_EXTENDS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_IMPLEMENTS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_OBJECT_OPERATOR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DOUBLE_ARROW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_LIST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_ARRAY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CALLABLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CLASS_C" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_TRAIT_C" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_METHOD_C" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_FUNC_C" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_LINE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_COMMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DOC_COMMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_OPEN_TAG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_OPEN_TAG_WITH_ECHO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CLOSE_TAG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_WHITESPACE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_START_HEREDOC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_END_HEREDOC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DOLLAR_OPEN_CURLY_BRACES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_CURLY_OPEN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_PAAMAYIM_NEKUDOTAYIM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_NAMESPACE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_NS_C" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DIR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_NS_SEPARATOR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="T_DOUBLE_COLON" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_NO_MEMORY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_SYNTAX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_NO_ELEMENTS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_INVALID_TOKEN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_UNCLOSED_TOKEN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_PARTIAL_CHAR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_TAG_MISMATCH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_DUPLICATE_ATTRIBUTE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_JUNK_AFTER_DOC_ELEMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_PARAM_ENTITY_REF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_UNDEFINED_ENTITY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_RECURSIVE_ENTITY_REF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_ASYNC_ENTITY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_BAD_CHAR_REF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_BINARY_ENTITY_REF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_MISPLACED_XML_PI" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_UNKNOWN_ENCODING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_INCORRECT_ENCODING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_UNCLOSED_CDATA_SECTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_ERROR_EXTERNAL_ENTITY_HANDLING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_OPTION_CASE_FOLDING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_OPTION_TARGET_ENCODING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_OPTION_SKIP_TAGSTART" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="XML_OPTION_SKIP_WHITE" /&gt;
      &lt;variable citdl="string" ilk="constant" name="XML_SAX_IMPL" /&gt;
      &lt;variable citdl="resource" ilk="constant" name="STDIN" /&gt;
      &lt;variable citdl="resource" ilk="constant" name="STDOUT" /&gt;
      &lt;variable citdl="resource" ilk="constant" name="STDERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SERVICES_JSON_SLICE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SERVICES_JSON_IN_STR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SERVICES_JSON_IN_ARR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SERVICES_JSON_IN_OBJ" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SERVICES_JSON_IN_CMT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SERVICES_JSON_LOOSE_TYPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="SERVICES_JSON_SUPPRESS_ERRORS" /&gt;
      &lt;variable citdl="string" ilk="constant" name="__LINE__" /&gt;
      &lt;variable citdl="string" ilk="constant" name="__FILE__" /&gt;
      &lt;variable citdl="string" ilk="constant" name="__FUNCTION__" /&gt;
      &lt;variable citdl="string" ilk="constant" name="__CLASS__" /&gt;
      &lt;variable citdl="string" ilk="constant" name="__METHOD__" /&gt;
      &lt;variable citdl="array" name="_COOKIE" /&gt;
      &lt;variable citdl="array" name="_ENV" /&gt;
      &lt;variable citdl="array" name="_FILES" /&gt;
      &lt;variable citdl="array" name="_GET" /&gt;
      &lt;variable citdl="array" name="_POST" /&gt;
      &lt;variable citdl="array" name="_REQUEST" /&gt;
      &lt;variable citdl="array" name="_SERVER"&gt;
        &lt;variable citdl="string" name="HTTP_HOST" /&gt;
        &lt;variable citdl="string" name="HTTP_USER_AGENT" /&gt;
        &lt;variable citdl="string" name="HTTP_ACCEPT" /&gt;
        &lt;variable citdl="string" name="HTTP_ACCEPT_LANGUAGE" /&gt;
        &lt;variable citdl="string" name="HTTP_ACCEPT_ENCODING" /&gt;
        &lt;variable citdl="string" name="HTTP_ACCEPT_CHARSET" /&gt;
        &lt;variable citdl="string" name="HTTP_KEEP_ALIVE" /&gt;
        &lt;variable citdl="string" name="HTTP_CONNECTION" /&gt;
        &lt;variable citdl="string" name="HTTP_COOKIE" /&gt;
        &lt;variable citdl="string" name="HTTP_CACHE_CONTROL" /&gt;
        &lt;variable citdl="string" name="PATH" /&gt;
        &lt;variable citdl="string" name="SERVER_SIGNATURE" /&gt;
        &lt;variable citdl="string" name="SERVER_SOFTWARE" /&gt;
        &lt;variable citdl="string" name="SERVER_NAME" /&gt;
        &lt;variable citdl="string" name="SERVER_ADDR" /&gt;
        &lt;variable citdl="string" name="SERVER_PORT" /&gt;
        &lt;variable citdl="string" name="REMOTE_ADDR" /&gt;
        &lt;variable citdl="string" name="DOCUMENT_ROOT" /&gt;
        &lt;variable citdl="string" name="SERVER_ADMIN" /&gt;
        &lt;variable citdl="string" name="SCRIPT_FILENAME" /&gt;
        &lt;variable citdl="string" name="REMOTE_PORT" /&gt;
        &lt;variable citdl="string" name="GATEWAY_INTERFACE" /&gt;
        &lt;variable citdl="string" name="SERVER_PROTOCOL" /&gt;
        &lt;variable citdl="string" name="REQUEST_METHOD" /&gt;
        &lt;variable citdl="string" name="QUERY_STRING" /&gt;
        &lt;variable citdl="string" name="REQUEST_URI" /&gt;
        &lt;variable citdl="string" name="SCRIPT_NAME" /&gt;
        &lt;variable citdl="string" name="PHP_SELF" /&gt;
        &lt;variable citdl="string" name="REQUEST_TIME" /&gt;
        &lt;variable citdl="string" name="argv" /&gt;
        &lt;variable citdl="string" name="argc" /&gt;
      &lt;/variable&gt;
      &lt;variable citdl="array" name="_SESSION" /&gt;
      &lt;variable citdl="array" name="HTTP_COOKIE_VARS" /&gt;
      &lt;variable citdl="array" name="HTTP_ENV_VARS" /&gt;
      &lt;variable citdl="array" name="HTTP_GET_VARS" /&gt;
      &lt;variable citdl="array" name="HTTP_POST_FILES" /&gt;
      &lt;variable citdl="array" name="HTTP_POST_VARS" /&gt;
      &lt;variable citdl="array" name="HTTP_SERVER_VARS" /&gt;
      &lt;variable citdl="array" name="HTTP_SESSION_VARS" /&gt;
      &lt;variable citdl="array" name="GLOBALS" /&gt;
      &lt;scope ilk="interface" line="486" lineend="506" name="ArrayAccess" signature="ArrayAccess"&gt;
        &lt;scope doc="@param $offset to modify&amp;#xA;@param $value new value" ilk="function" line="491" lineend="491" name="offsetSet" signature="offsetSet($offset, $value)"&gt;
          &lt;variable ilk="argument" line="491" name="offset" /&gt;
          &lt;variable ilk="argument" line="491" name="value" /&gt;
        &lt;/scope&gt;
        &lt;scope doc="@param $offset to retrieve&amp;#xA;@return value at given offset" ilk="function" line="496" lineend="496" name="offsetGet" returns="value" signature="value offsetGet($offset)"&gt;
          &lt;variable ilk="argument" line="496" name="offset" /&gt;
        &lt;/scope&gt;
        &lt;scope doc="@param $offset to delete" ilk="function" line="500" lineend="500" name="offsetUnset" signature="offsetUnset($offset)"&gt;
          &lt;variable ilk="argument" line="500" name="offset" /&gt;
        &lt;/scope&gt;
        &lt;scope doc="@param $offset to check&amp;#xA;@return whether the offset exists." ilk="function" line="505" lineend="505" name="offsetExists" returns="whether" signature="whether offsetExists($offset)"&gt;
          &lt;variable ilk="argument" line="505" name="offset" /&gt;
        &lt;/scope&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="LogicException" doc="@ingroup SPL&amp;#xA;@brief Exception thrown when a function call was illegal.&amp;#xA;@since PHP 5.1" ilk="class" line="361" lineend="363" name="BadFunctionCallException" /&gt;
      &lt;scope classrefs="BadFunctionCallException" doc="@ingroup SPL&amp;#xA;@brief Exception thrown when a method call was illegal.&amp;#xA;@since PHP 5.1" ilk="class" line="369" lineend="371" name="BadMethodCallException" /&gt;
      &lt;scope ilk="interface" line="576" lineend="581" name="Countable" signature="Countable"&gt;
        &lt;scope doc="@return the number the global function count() should show" ilk="function" line="580" lineend="580" name="count" returns="the" signature="the count()" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="LogicException" doc="@ingroup SPL&amp;#xA;@brief Exception that denotes a value not in the valid domain was used.&amp;#xA;@since PHP 5.1&amp;#xA;&amp;#xA;This kind of exception should be used to inform about domain erors in&amp;#xA;mathematical sense.&amp;#xA;&amp;#xA;@see RangeException" ilk="class" line="382" lineend="384" name="DomainException" /&gt;
      &lt;scope classrefs="LogicException" doc="@ingroup SPL&amp;#xA;@brief Exception that denotes invalid arguments were passed.&amp;#xA;@since PHP 5.1&amp;#xA;&amp;#xA;@see UnexpectedValueException" ilk="class" line="392" lineend="394" name="InvalidArgumentException" /&gt;
      &lt;scope ilk="interface" interfacerefs="Traversable" line="549" lineend="570" name="Iterator" signature="Iterator extends Traversable"&gt;
        &lt;scope doc="Rewind the Iterator to the first element." ilk="function" line="553" lineend="553" name="rewind" signature="rewind()" /&gt;
        &lt;scope doc="Return the current element." ilk="function" line="557" lineend="557" name="current" signature="current()" /&gt;
        &lt;scope doc="Return the key of the current element." ilk="function" line="561" lineend="561" name="key" signature="key()" /&gt;
        &lt;scope doc="Move forward to next element." ilk="function" line="565" lineend="565" name="next" signature="next()" /&gt;
        &lt;scope doc="Check if there is a current element after calls to rewind() or next()." ilk="function" line="569" lineend="569" name="valid" signature="valid()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="interface" interfacerefs="Traversable" line="533" lineend="538" name="IteratorAggregate" signature="IteratorAggregate extends Traversable"&gt;
        &lt;scope doc="@return an Iterator for the implementing object." ilk="function" line="537" lineend="537" name="getIterator" returns="an" signature="an getIterator()" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="LogicException" doc="@ingroup SPL&amp;#xA;@brief Exception thrown when a parameter exceeds the allowed length.&amp;#xA;@since PHP 5.1&amp;#xA;&amp;#xA;This can be used for strings length, array size, file size, number of&amp;#xA;elements read from an Iterator and so on." ilk="class" line="403" lineend="405" name="LengthException" /&gt;
      &lt;scope classrefs="Exception" doc="@ingroup SPL&amp;#xA;@brief Exception that represents error in the program logic.&amp;#xA;@since PHP 5.1&amp;#xA;&amp;#xA;This kind of exceptions should directly leed to a fix in your code." ilk="class" line="353" lineend="355" name="LogicException" /&gt;
      &lt;scope classrefs="RuntimeException" doc="@ingroup SPL&amp;#xA;@brief Exception thrown when an illegal index was requested.&amp;#xA;@since PHP 5.1&amp;#xA;&amp;#xA;This represents errors that cannot be detected at compile time.&amp;#xA;&amp;#xA;@see OutOfRangeException" ilk="class" line="435" lineend="437" name="OutOfBoundsException" /&gt;
      &lt;scope classrefs="LogicException" doc="@ingroup SPL&amp;#xA;@brief Exception thrown when an illegal index was requested.&amp;#xA;@since PHP 5.1&amp;#xA;&amp;#xA;This represents errors that should be detected at compile time.&amp;#xA;&amp;#xA;@see OutOfBoundsException" ilk="class" line="415" lineend="417" name="OutOfRangeException" /&gt;
      &lt;scope classrefs="RuntimeException" doc="@ingroup SPL&amp;#xA;@brief Exception thrown to indicate arithmetic/buffer overflow.&amp;#xA;@since PHP 5.1" ilk="class" line="443" lineend="445" name="OverflowException" /&gt;
      &lt;scope classrefs="RuntimeException" doc="@ingroup SPL&amp;#xA;@brief Exception thrown to indicate range errors during program execution.&amp;#xA;@since PHP 5.1&amp;#xA;&amp;#xA;Normally this means there was an arithmetic error other than under/overflow.&amp;#xA;This is the runtime version of DomainException.&amp;#xA;&amp;#xA;@see DomainException" ilk="class" line="456" lineend="458" name="RangeException" /&gt;
      &lt;scope classrefs="Exception" doc="@ingroup SPL&amp;#xA;@brief Exception thrown for errors that are only detectable at runtime.&amp;#xA;@since PHP 5.1" ilk="class" line="423" lineend="425" name="RuntimeException" /&gt;
      &lt;scope ilk="interface" line="595" lineend="608" name="Serializable" signature="Serializable"&gt;
        &lt;scope doc="@return string representation of the instance" ilk="function" line="600" lineend="600" name="serialize" returns="string" signature="string serialize()" /&gt;
        &lt;scope doc="@note This is a constructor&amp;#xA;&amp;#xA;@param $serialized data read from stream to construct the instance" ilk="function" line="607" lineend="607" name="unserialize" signature="unserialize($serialized)"&gt;
          &lt;variable ilk="argument" line="607" name="serialized" /&gt;
        &lt;/scope&gt;
      &lt;/scope&gt;
      &lt;scope ilk="interface" line="1134" lineend="1140" name="SplObserver" signature="SplObserver"&gt;
        &lt;scope doc="Called from the subject (i.e. when it&amp;apos;s value has changed).&amp;#xA;@param $subject the callee" ilk="function" line="1139" lineend="1139" name="update" signature="update(SplSubject $subject)"&gt;
          &lt;variable citdl="SplSubject" ilk="argument" line="1139" name="subject" /&gt;
        &lt;/scope&gt;
      &lt;/scope&gt;
      &lt;scope ilk="interface" line="1147" lineend="1161" name="SplSubject" signature="SplSubject"&gt;
        &lt;scope doc="@param $observer new observer to attach" ilk="function" line="1151" lineend="1151" name="attach" signature="attach(SplObserver $observer)"&gt;
          &lt;variable citdl="SplObserver" ilk="argument" line="1151" name="observer" /&gt;
        &lt;/scope&gt;
        &lt;scope doc="@param $observer existing observer to detach&amp;#xA;@note a non attached observer shouldn&amp;apos;t result in a warning or similar" ilk="function" line="1156" lineend="1156" name="detach" signature="detach(SplObserver $observer)"&gt;
          &lt;variable citdl="SplObserver" ilk="argument" line="1156" name="observer" /&gt;
        &lt;/scope&gt;
        &lt;scope doc="Notify all observers" ilk="function" line="1160" lineend="1160" name="notify" signature="notify()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="interface" line="523" lineend="525" name="Traversable" signature="Traversable" /&gt;
      &lt;scope classrefs="RuntimeException" doc="@ingroup SPL&amp;#xA;@brief Exception thrown to indicate arithmetic/buffer underflow.&amp;#xA;@since PHP 5.1" ilk="class" line="464" lineend="466" name="UnderflowException" /&gt;
      &lt;scope classrefs="RuntimeException" doc="@ingroup SPL&amp;#xA;@brief Exception thrown to indicate an unexpected value.&amp;#xA;@since PHP 5.1&amp;#xA;&amp;#xA;Typically this happens when a function calls another function and espects&amp;#xA;the return value to be of a certain type or value not including arithmetic&amp;#xA;or buffer related errors.&amp;#xA;&amp;#xA;@see InvalidArgumentException" ilk="class" line="478" lineend="480" name="UnexpectedValueException" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLAUTH_ANY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLAUTH_ANYSAFE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLAUTH_BASIC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLAUTH_DIGEST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLAUTH_GSSNEGOTIATE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLAUTH_NTLM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLCLOSEPOLICY_CALLBACK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLCLOSEPOLICY_LEAST_RECENTLY_USED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLCLOSEPOLICY_LEAST_TRAFFIC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLCLOSEPOLICY_OLDEST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLCLOSEPOLICY_SLOWEST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_ABORTED_BY_CALLBACK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_BAD_CALLING_ORDER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_BAD_CONTENT_ENCODING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_BAD_FUNCTION_ARGUMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_BAD_PASSWORD_ENTERED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_COULDNT_CONNECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_COULDNT_RESOLVE_HOST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_COULDNT_RESOLVE_PROXY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FAILED_INIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FILESIZE_EXCEEDED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FILE_COULDNT_READ_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_ACCESS_DENIED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_BAD_DOWNLOAD_RESUME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_CANT_GET_HOST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_CANT_RECONNECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_COULDNT_GET_SIZE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_COULDNT_RETR_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_COULDNT_SET_ASCII" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_COULDNT_SET_BINARY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_COULDNT_STOR_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_COULDNT_USE_REST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_PORT_FAILED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_QUOTE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_SSL_FAILED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_USER_PASSWORD_INCORRECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_WEIRD_227_FORMAT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_WEIRD_PASS_REPLY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_WEIRD_PASV_REPLY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_WEIRD_SERVER_REPLY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_WEIRD_USER_REPLY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FTP_WRITE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_FUNCTION_NOT_FOUND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_GOT_NOTHING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_HTTP_NOT_FOUND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_HTTP_PORT_FAILED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_HTTP_POST_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_HTTP_RANGE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_LDAP_CANNOT_BIND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_LDAP_INVALID_URL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_LDAP_SEARCH_FAILED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_LIBRARY_NOT_FOUND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_MALFORMAT_USER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_OBSOLETE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_OK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_OPERATION_TIMEOUTED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_OUT_OF_MEMORY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_PARTIAL_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_READ_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_RECV_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SEND_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SHARE_IN_USE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SSH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SSL_CACERT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SSL_CERTPROBLEM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SSL_CIPHER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SSL_CONNECT_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SSL_ENGINE_NOTFOUND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SSL_ENGINE_SETFAILED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_SSL_PEER_CERTIFICATE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_TELNET_OPTION_SYNTAX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_TOO_MANY_REDIRECTS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_UNKNOWN_TELNET_OPTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_UNSUPPORTED_PROTOCOL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_URL_MALFORMAT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_URL_MALFORMAT_USER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLE_WRITE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPAUTH_DEFAULT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPAUTH_SSL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPAUTH_TLS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPMETHOD_MULTICWD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPMETHOD_NOCWD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPMETHOD_SINGLECWD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPSSL_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPSSL_CONTROL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPSSL_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLFTPSSL_TRY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_CERTINFO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_CONNECT_TIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_CONTENT_LENGTH_DOWNLOAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_CONTENT_LENGTH_UPLOAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_CONTENT_TYPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_EFFECTIVE_URL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_FILETIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_HEADER_OUT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_HEADER_SIZE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_HTTP_CODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_NAMELOOKUP_TIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_PRETRANSFER_TIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_PRIVATE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_REDIRECT_COUNT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_REDIRECT_TIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_REDIRECT_URL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_REQUEST_SIZE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_SIZE_DOWNLOAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_SIZE_UPLOAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_SPEED_DOWNLOAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_SPEED_UPLOAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_SSL_VERIFYRESULT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_STARTTRANSFER_TIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLINFO_TOTAL_TIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLMSG_DONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLM_BAD_EASY_HANDLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLM_BAD_HANDLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLM_CALL_MULTI_PERFORM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLM_INTERNAL_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLM_OK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLM_OUT_OF_MEMORY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_AUTOREFERER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_BINARYTRANSFER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_BUFFERSIZE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_CAINFO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_CAPATH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_CERTINFO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_CLOSEPOLICY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_CONNECTTIMEOUT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_CONNECTTIMEOUT_MS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_COOKIE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_COOKIEFILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_COOKIEJAR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_COOKIESESSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_CRLF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_CUSTOMREQUEST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_DNS_CACHE_TIMEOUT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_DNS_USE_GLOBAL_CACHE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_EGDSOCKET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_ENCODING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FAILONERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FILETIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FOLLOWLOCATION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FORBID_REUSE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FRESH_CONNECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTPAPPEND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTPLISTONLY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTPPORT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTPSSLAUTH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTP_CREATE_MISSING_DIRS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTP_FILEMETHOD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTP_SKIP_PASV_IP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTP_SSL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTP_USE_EPRT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_FTP_USE_EPSV" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_HEADER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_HEADERFUNCTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_HTTP200ALIASES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_HTTPAUTH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_HTTPGET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_HTTPHEADER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_HTTPPROXYTUNNEL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_HTTP_VERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_INFILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_INFILESIZE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_INTERFACE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_IPRESOLVE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_KEYPASSWD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_KRB4LEVEL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_LOW_SPEED_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_LOW_SPEED_TIME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_MAXCONNECTS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_MAXREDIRS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_MAX_RECV_SPEED_LARGE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_MAX_SEND_SPEED_LARGE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_NETRC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_NOBODY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_NOPROGRESS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_NOSIGNAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PORT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_POST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_POSTFIELDS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_POSTQUOTE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_POSTREDIR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PRIVATE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PROGRESSFUNCTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PROTOCOLS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PROXY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PROXYAUTH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PROXYPORT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PROXYTYPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PROXYUSERPWD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_PUT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_QUOTE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_RANDOM_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_RANGE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_READDATA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_READFUNCTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_REDIR_PROTOCOLS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_REFERER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_RESUME_FROM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_RETURNTRANSFER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSH_AUTH_TYPES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSH_HOST_PUBLIC_KEY_MD5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSH_PRIVATE_KEYFILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSH_PUBLIC_KEYFILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSLCERT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSLCERTPASSWD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSLCERTTYPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSLENGINE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSLENGINE_DEFAULT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSLKEY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSLKEYPASSWD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSLKEYTYPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSLVERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSL_CIPHER_LIST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSL_VERIFYHOST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_SSL_VERIFYPEER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_STDERR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_TCP_NODELAY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_TIMECONDITION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_TIMEOUT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_TIMEOUT_MS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_TIMEVALUE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_TRANSFERTEXT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_UNRESTRICTED_AUTH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_UPLOAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_URL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_USERAGENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_USERPWD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_VERBOSE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_WRITEFUNCTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLOPT_WRITEHEADER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_ALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_DICT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_FTP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_FTPS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_HTTP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_HTTPS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_LDAP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_LDAPS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_SCP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_SFTP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_TELNET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROTO_TFTP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROXY_HTTP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROXY_SOCKS4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLPROXY_SOCKS5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLSSH_AUTH_DEFAULT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLSSH_AUTH_HOST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLSSH_AUTH_KEYBOARD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLSSH_AUTH_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLSSH_AUTH_PASSWORD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLSSH_AUTH_PUBLICKEY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURLVERSION_NOW" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_HTTP_VERSION_1_0" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_HTTP_VERSION_1_1" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_HTTP_VERSION_NONE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_IPRESOLVE_V4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_IPRESOLVE_V6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_IPRESOLVE_WHATEVER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_NETRC_IGNORED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_NETRC_OPTIONAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_NETRC_REQUIRED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_TIMECOND_IFMODSINCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_TIMECOND_IFUNMODSINCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_TIMECOND_LASTMOD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_VERSION_IPV6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_VERSION_KERBEROS4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_VERSION_LIBZ" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="CURL_VERSION_SSL" /&gt;
      &lt;scope ilk="class" name="DOMConfiguration"&gt;
        &lt;scope ilk="function" name="setParameter" signature="setParameter()" /&gt;
        &lt;scope ilk="function" name="getParameter" signature="getParameter()" /&gt;
        &lt;scope ilk="function" name="canSetParameter" signature="canSetParameter()" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMNode" ilk="class" name="DOMDocumentType"&gt;
        &lt;scope ilk="function" name="insertBefore" signature="insertBefore()" /&gt;
        &lt;scope ilk="function" name="replaceChild" signature="replaceChild()" /&gt;
        &lt;scope ilk="function" name="removeChild" signature="removeChild()" /&gt;
        &lt;scope ilk="function" name="appendChild" signature="appendChild()" /&gt;
        &lt;scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" /&gt;
        &lt;scope ilk="function" name="cloneNode" signature="cloneNode()" /&gt;
        &lt;scope ilk="function" name="normalize" signature="normalize()" /&gt;
        &lt;scope ilk="function" name="isSupported" signature="isSupported()" /&gt;
        &lt;scope ilk="function" name="hasAttributes" signature="hasAttributes()" /&gt;
        &lt;scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" /&gt;
        &lt;scope ilk="function" name="isSameNode" signature="isSameNode()" /&gt;
        &lt;scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" /&gt;
        &lt;scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" /&gt;
        &lt;scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" /&gt;
        &lt;scope ilk="function" name="isEqualNode" signature="isEqualNode()" /&gt;
        &lt;scope ilk="function" name="getFeature" signature="getFeature()" /&gt;
        &lt;scope ilk="function" name="setUserData" signature="setUserData()" /&gt;
        &lt;scope ilk="function" name="getUserData" signature="getUserData()" /&gt;
        &lt;scope ilk="function" name="getNodePath" signature="getNodePath()" /&gt;
        &lt;scope ilk="function" name="getLineNo" signature="getLineNo()" /&gt;
        &lt;scope ilk="function" name="C14N" signature="C14N()" /&gt;
        &lt;scope ilk="function" name="C14NFile" signature="C14NFile()" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="DOMNode" ilk="class" name="DOMEntity"&gt;
        &lt;scope ilk="function" name="insertBefore" signature="insertBefore()" /&gt;
        &lt;scope ilk="function" name="replaceChild" signature="replaceChild()" /&gt;
        &lt;scope ilk="function" name="removeChild" signature="removeChild()" /&gt;
        &lt;scope ilk="function" name="appendChild" signature="appendChild()" /&gt;
        &lt;scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" /&gt;
        &lt;scope ilk="function" name="cloneNode" signature="cloneNode()" /&gt;
        &lt;scope ilk="function" name="normalize" signature="normalize()" /&gt;
        &lt;scope ilk="function" name="isSupported" signature="isSupported()" /&gt;
        &lt;scope ilk="function" name="hasAttributes" signature="hasAttributes()" /&gt;
        &lt;scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" /&gt;
        &lt;scope ilk="function" name="isSameNode" signature="isSameNode()" /&gt;
        &lt;scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" /&gt;
        &lt;scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" /&gt;
        &lt;scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" /&gt;
        &lt;scope ilk="function" name="isEqualNode" signature="isEqualNode()" /&gt;
        &lt;scope ilk="function" name="getFeature" signature="getFeature()" /&gt;
        &lt;scope ilk="function" name="setUserData" signature="setUserData()" /&gt;
        &lt;scope ilk="function" name="getUserData" signature="getUserData()" /&gt;
        &lt;scope ilk="function" name="getNodePath" signature="getNodePath()" /&gt;
        &lt;scope ilk="function" name="getLineNo" signature="getLineNo()" /&gt;
        &lt;scope ilk="function" name="C14N" signature="C14N()" /&gt;
        &lt;scope ilk="function" name="C14NFile" signature="C14NFile()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMErrorHandler"&gt;
        &lt;scope ilk="function" name="handleError" signature="handleError()" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="Exception" ilk="class" name="DOMException"&gt;
        &lt;scope ilk="function" name="__clone" signature="__clone()" /&gt;
        &lt;scope ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope ilk="function" name="getMessage" signature="getMessage()" /&gt;
        &lt;scope ilk="function" name="getCode" signature="getCode()" /&gt;
        &lt;scope ilk="function" name="getFile" signature="getFile()" /&gt;
        &lt;scope ilk="function" name="getLine" signature="getLine()" /&gt;
        &lt;scope ilk="function" name="getTrace" signature="getTrace()" /&gt;
        &lt;scope ilk="function" name="getPrevious" signature="getPrevious()" /&gt;
        &lt;scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" /&gt;
        &lt;scope ilk="function" name="__toString" signature="__toString()" /&gt;
        &lt;variable name="message" /&gt;
        &lt;variable name="code" /&gt;
        &lt;variable name="file" /&gt;
        &lt;variable name="line" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMLocator" /&gt;
      &lt;scope ilk="class" name="DOMNameList"&gt;
        &lt;scope ilk="function" name="getName" signature="getName()" /&gt;
        &lt;scope ilk="function" name="getNamespaceURI" signature="getNamespaceURI()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMNameSpaceNode" /&gt;
      &lt;scope ilk="class" name="DOMNodeList"&gt;
        &lt;scope ilk="function" name="item" signature="item()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMNotation" /&gt;
      &lt;scope ilk="class" name="DOMStringExtend"&gt;
        &lt;scope ilk="function" name="findOffset16" signature="findOffset16()" /&gt;
        &lt;scope ilk="function" name="findOffset32" signature="findOffset32()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMStringList"&gt;
        &lt;scope ilk="function" name="item" signature="item()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="DOMTypeinfo" /&gt;
      &lt;scope ilk="class" name="DOMUserDataHandler"&gt;
        &lt;scope ilk="function" name="handle" signature="handle()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="Directory"&gt;
        &lt;scope ilk="function" name="close" signature="close()" /&gt;
        &lt;scope ilk="function" name="rewind" signature="rewind()" /&gt;
        &lt;scope ilk="function" name="read" signature="read()" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="LibXMLError" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_3DES" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_ARCFOUR" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_ARCFOUR_IV" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_BLOWFISH" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_BLOWFISH_COMPAT" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_CAST_128" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_CAST_256" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_CRYPT" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_DES" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_ENIGNA" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_GOST" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_IDEA" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_LOKI97" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_MARS" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_MODE_CBC" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_MODE_CFB" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_MODE_ECB" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_MODE_NOFB" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_MODE_OFB" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_MODE_STREAM" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_PANAMA" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_RC2" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_RC6" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_RIJNDAEL_128" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_RIJNDAEL_192" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_RIJNDAEL_256" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_SAFER128" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_SAFER64" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_SAFERPLUS" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_SERPENT" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_SKIPJACK" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_THREEWAY" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_TRIPLEDES" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_TWOFISH" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_WAKE" /&gt;
      &lt;variable citdl="string" ilk="constant" name="MCRYPT_XTEA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_ADLER32" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_CRC32" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_CRC32B" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_FNV132" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_FNV164" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_FNV1A32" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_FNV1A64" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_GOST" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_HAVAL128" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_HAVAL160" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_HAVAL192" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_HAVAL224" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_HAVAL256" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_JOAAT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_MD2" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_MD4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_MD5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_RIPEMD128" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_RIPEMD160" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_RIPEMD256" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_RIPEMD320" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_SHA1" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_SHA224" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_SHA256" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_SHA384" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_SHA512" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_SNEFRU256" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_TIGER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_TIGER128" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_TIGER160" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="MHASH_WHIRLPOOL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_E2BIG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_EACCES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_EAGAIN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ECHILD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_EFAULT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_EINTR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_EINVAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_EIO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_EISDIR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ELIBBAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ELOOP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_EMFILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ENAMETOOLONG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ENFILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ENOENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ENOEXEC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ENOMEM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ENOTDIR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_EPERM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ESRCH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="PCNTL_ETXTBSY" /&gt;
      &lt;scope classrefs="RuntimeException" ilk="class" name="PDOException"&gt;
        &lt;scope ilk="function" name="__clone" signature="__clone()" /&gt;
        &lt;scope ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope ilk="function" name="getMessage" signature="getMessage()" /&gt;
        &lt;scope ilk="function" name="getCode" signature="getCode()" /&gt;
        &lt;scope ilk="function" name="getFile" signature="getFile()" /&gt;
        &lt;scope ilk="function" name="getLine" signature="getLine()" /&gt;
        &lt;scope ilk="function" name="getTrace" signature="getTrace()" /&gt;
        &lt;scope ilk="function" name="getPrevious" signature="getPrevious()" /&gt;
        &lt;scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" /&gt;
        &lt;scope ilk="function" name="__toString" signature="__toString()" /&gt;
        &lt;variable name="message" /&gt;
        &lt;variable name="code" /&gt;
        &lt;variable name="file" /&gt;
        &lt;variable name="line" /&gt;
        &lt;variable name="errorInfo" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="PDORow" /&gt;
      &lt;scope classrefs="RecursiveDirectoryIterator" ilk="class" name="PharData"&gt;
        &lt;scope ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope ilk="function" name="__destruct" signature="__destruct()" /&gt;
        &lt;scope ilk="function" name="addEmptyDir" signature="addEmptyDir()" /&gt;
        &lt;scope ilk="function" name="addFile" signature="addFile()" /&gt;
        &lt;scope ilk="function" name="addFromString" signature="addFromString()" /&gt;
        &lt;scope ilk="function" name="buildFromDirectory" signature="buildFromDirectory()" /&gt;
        &lt;scope ilk="function" name="buildFromIterator" signature="buildFromIterator()" /&gt;
        &lt;scope ilk="function" name="compressFiles" signature="compressFiles()" /&gt;
        &lt;scope ilk="function" name="decompressFiles" signature="decompressFiles()" /&gt;
        &lt;scope ilk="function" name="compress" signature="compress()" /&gt;
        &lt;scope ilk="function" name="decompress" signature="decompress()" /&gt;
        &lt;scope ilk="function" name="convertToExecutable" signature="convertToExecutable()" /&gt;
        &lt;scope ilk="function" name="convertToData" signature="convertToData()" /&gt;
        &lt;scope ilk="function" name="copy" signature="copy()" /&gt;
        &lt;scope ilk="function" name="count" signature="count()" /&gt;
        &lt;scope ilk="function" name="delete" signature="delete()" /&gt;
        &lt;scope ilk="function" name="delMetadata" signature="delMetadata()" /&gt;
        &lt;scope ilk="function" name="extractTo" signature="extractTo()" /&gt;
        &lt;scope ilk="function" name="getAlias" signature="getAlias()" /&gt;
        &lt;scope ilk="function" name="getPath" signature="getPath()" /&gt;
        &lt;scope ilk="function" name="getMetadata" signature="getMetadata()" /&gt;
        &lt;scope ilk="function" name="getModified" signature="getModified()" /&gt;
        &lt;scope ilk="function" name="getSignature" signature="getSignature()" /&gt;
        &lt;scope ilk="function" name="getStub" signature="getStub()" /&gt;
        &lt;scope ilk="function" name="getVersion" signature="getVersion()" /&gt;
        &lt;scope ilk="function" name="hasMetadata" signature="hasMetadata()" /&gt;
        &lt;scope ilk="function" name="isBuffering" signature="isBuffering()" /&gt;
        &lt;scope ilk="function" name="isCompressed" signature="isCompressed()" /&gt;
        &lt;scope ilk="function" name="isFileFormat" signature="isFileFormat()" /&gt;
        &lt;scope ilk="function" name="isWritable" signature="isWritable()" /&gt;
        &lt;scope ilk="function" name="offsetExists" signature="offsetExists()" /&gt;
        &lt;scope ilk="function" name="offsetGet" signature="offsetGet()" /&gt;
        &lt;scope ilk="function" name="offsetSet" signature="offsetSet()" /&gt;
        &lt;scope ilk="function" name="offsetUnset" signature="offsetUnset()" /&gt;
        &lt;scope ilk="function" name="setAlias" signature="setAlias()" /&gt;
        &lt;scope ilk="function" name="setDefaultStub" signature="setDefaultStub()" /&gt;
        &lt;scope ilk="function" name="setMetadata" signature="setMetadata()" /&gt;
        &lt;scope ilk="function" name="setSignatureAlgorithm" signature="setSignatureAlgorithm()" /&gt;
        &lt;scope ilk="function" name="setStub" signature="setStub()" /&gt;
        &lt;scope ilk="function" name="startBuffering" signature="startBuffering()" /&gt;
        &lt;scope ilk="function" name="stopBuffering" signature="stopBuffering()" /&gt;
        &lt;scope ilk="function" name="apiVersion" signature="apiVersion()" /&gt;
        &lt;scope ilk="function" name="canCompress" signature="canCompress()" /&gt;
        &lt;scope ilk="function" name="canWrite" signature="canWrite()" /&gt;
        &lt;scope ilk="function" name="createDefaultStub" signature="createDefaultStub()" /&gt;
        &lt;scope ilk="function" name="getSupportedCompression" signature="getSupportedCompression()" /&gt;
        &lt;scope ilk="function" name="getSupportedSignatures" signature="getSupportedSignatures()" /&gt;
        &lt;scope ilk="function" name="interceptFileFuncs" signature="interceptFileFuncs()" /&gt;
        &lt;scope ilk="function" name="isValidPharFilename" signature="isValidPharFilename()" /&gt;
        &lt;scope ilk="function" name="loadPhar" signature="loadPhar()" /&gt;
        &lt;scope ilk="function" name="mapPhar" signature="mapPhar()" /&gt;
        &lt;scope ilk="function" name="running" signature="running()" /&gt;
        &lt;scope ilk="function" name="mount" signature="mount()" /&gt;
        &lt;scope ilk="function" name="mungServer" signature="mungServer()" /&gt;
        &lt;scope ilk="function" name="unlinkArchive" signature="unlinkArchive()" /&gt;
        &lt;scope ilk="function" name="webPhar" signature="webPhar()" /&gt;
        &lt;scope ilk="function" name="hasChildren" signature="hasChildren()" /&gt;
        &lt;scope ilk="function" name="getChildren" signature="getChildren()" /&gt;
        &lt;scope ilk="function" name="getSubPath" signature="getSubPath()" /&gt;
        &lt;scope ilk="function" name="getSubPathname" signature="getSubPathname()" /&gt;
        &lt;scope ilk="function" name="rewind" signature="rewind()" /&gt;
        &lt;scope ilk="function" name="next" signature="next()" /&gt;
        &lt;scope ilk="function" name="key" signature="key()" /&gt;
        &lt;scope ilk="function" name="current" signature="current()" /&gt;
        &lt;scope ilk="function" name="getFlags" signature="getFlags()" /&gt;
        &lt;scope ilk="function" name="setFlags" signature="setFlags()" /&gt;
        &lt;scope ilk="function" name="getFilename" signature="getFilename()" /&gt;
        &lt;scope ilk="function" name="getBasename" signature="getBasename()" /&gt;
        &lt;scope ilk="function" name="isDot" signature="isDot()" /&gt;
        &lt;scope ilk="function" name="valid" signature="valid()" /&gt;
        &lt;scope ilk="function" name="seek" signature="seek()" /&gt;
        &lt;scope ilk="function" name="__toString" signature="__toString()" /&gt;
        &lt;scope ilk="function" name="getPathname" signature="getPathname()" /&gt;
        &lt;scope ilk="function" name="getPerms" signature="getPerms()" /&gt;
        &lt;scope ilk="function" name="getInode" signature="getInode()" /&gt;
        &lt;scope ilk="function" name="getSize" signature="getSize()" /&gt;
        &lt;scope ilk="function" name="getOwner" signature="getOwner()" /&gt;
        &lt;scope ilk="function" name="getGroup" signature="getGroup()" /&gt;
        &lt;scope ilk="function" name="getATime" signature="getATime()" /&gt;
        &lt;scope ilk="function" name="getMTime" signature="getMTime()" /&gt;
        &lt;scope ilk="function" name="getCTime" signature="getCTime()" /&gt;
        &lt;scope ilk="function" name="getType" signature="getType()" /&gt;
        &lt;scope ilk="function" name="isReadable" signature="isReadable()" /&gt;
        &lt;scope ilk="function" name="isExecutable" signature="isExecutable()" /&gt;
        &lt;scope ilk="function" name="isFile" signature="isFile()" /&gt;
        &lt;scope ilk="function" name="isDir" signature="isDir()" /&gt;
        &lt;scope ilk="function" name="isLink" signature="isLink()" /&gt;
        &lt;scope ilk="function" name="getLinkTarget" signature="getLinkTarget()" /&gt;
        &lt;scope ilk="function" name="getRealPath" signature="getRealPath()" /&gt;
        &lt;scope ilk="function" name="getFileInfo" signature="getFileInfo()" /&gt;
        &lt;scope ilk="function" name="getPathInfo" signature="getPathInfo()" /&gt;
        &lt;scope ilk="function" name="openFile" signature="openFile()" /&gt;
        &lt;scope ilk="function" name="setFileClass" signature="setFileClass()" /&gt;
        &lt;scope ilk="function" name="setInfoClass" signature="setInfoClass()" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="CURRENT_MODE_MASK" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="CURRENT_AS_PATHNAME" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="CURRENT_AS_FILEINFO" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="CURRENT_AS_SELF" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="KEY_MODE_MASK" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="KEY_AS_PATHNAME" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="KEY_AS_FILENAME" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="NEW_CURRENT_AND_KEY" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="SKIP_DOTS" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="UNIX_PATHS" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="Exception" ilk="class" name="PharException"&gt;
        &lt;scope ilk="function" name="__clone" signature="__clone()" /&gt;
        &lt;scope ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope ilk="function" name="getMessage" signature="getMessage()" /&gt;
        &lt;scope ilk="function" name="getCode" signature="getCode()" /&gt;
        &lt;scope ilk="function" name="getFile" signature="getFile()" /&gt;
        &lt;scope ilk="function" name="getLine" signature="getLine()" /&gt;
        &lt;scope ilk="function" name="getTrace" signature="getTrace()" /&gt;
        &lt;scope ilk="function" name="getPrevious" signature="getPrevious()" /&gt;
        &lt;scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" /&gt;
        &lt;scope ilk="function" name="__toString" signature="__toString()" /&gt;
        &lt;variable name="message" /&gt;
        &lt;variable name="code" /&gt;
        &lt;variable name="file" /&gt;
        &lt;variable name="line" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="Exception" ilk="class" name="ReflectionException"&gt;
        &lt;scope ilk="function" name="__clone" signature="__clone()" /&gt;
        &lt;scope ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope ilk="function" name="getMessage" signature="getMessage()" /&gt;
        &lt;scope ilk="function" name="getCode" signature="getCode()" /&gt;
        &lt;scope ilk="function" name="getFile" signature="getFile()" /&gt;
        &lt;scope ilk="function" name="getLine" signature="getLine()" /&gt;
        &lt;scope ilk="function" name="getTrace" signature="getTrace()" /&gt;
        &lt;scope ilk="function" name="getPrevious" signature="getPrevious()" /&gt;
        &lt;scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" /&gt;
        &lt;scope ilk="function" name="__toString" signature="__toString()" /&gt;
        &lt;variable name="message" /&gt;
        &lt;variable name="code" /&gt;
        &lt;variable name="file" /&gt;
        &lt;variable name="line" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="ReflectionFunctionAbstract"&gt;
        &lt;scope ilk="function" name="__clone" signature="__clone()" /&gt;
        &lt;scope ilk="function" name="__toString" signature="__toString()" /&gt;
        &lt;scope ilk="function" name="inNamespace" signature="inNamespace()" /&gt;
        &lt;scope ilk="function" name="isClosure" signature="isClosure()" /&gt;
        &lt;scope ilk="function" name="isDeprecated" signature="isDeprecated()" /&gt;
        &lt;scope ilk="function" name="isInternal" signature="isInternal()" /&gt;
        &lt;scope ilk="function" name="isUserDefined" signature="isUserDefined()" /&gt;
        &lt;scope ilk="function" name="getDocComment" signature="getDocComment()" /&gt;
        &lt;scope ilk="function" name="getEndLine" signature="getEndLine()" /&gt;
        &lt;scope ilk="function" name="getExtension" signature="getExtension()" /&gt;
        &lt;scope ilk="function" name="getExtensionName" signature="getExtensionName()" /&gt;
        &lt;scope ilk="function" name="getFileName" signature="getFileName()" /&gt;
        &lt;scope ilk="function" name="getName" signature="getName()" /&gt;
        &lt;scope ilk="function" name="getNamespaceName" signature="getNamespaceName()" /&gt;
        &lt;scope ilk="function" name="getNumberOfParameters" signature="getNumberOfParameters()" /&gt;
        &lt;scope ilk="function" name="getNumberOfRequiredParameters" signature="getNumberOfRequiredParameters()" /&gt;
        &lt;scope ilk="function" name="getParameters" signature="getParameters()" /&gt;
        &lt;scope ilk="function" name="getShortName" signature="getShortName()" /&gt;
        &lt;scope ilk="function" name="getStartLine" signature="getStartLine()" /&gt;
        &lt;scope ilk="function" name="getStaticVariables" signature="getStaticVariables()" /&gt;
        &lt;scope ilk="function" name="returnsReference" signature="returnsReference()" /&gt;
        &lt;variable name="name" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="SplDoublyLinkedList" ilk="class" name="SplQueue"&gt;
        &lt;scope ilk="function" name="enqueue" signature="enqueue()" /&gt;
        &lt;scope ilk="function" name="dequeue" signature="dequeue()" /&gt;
        &lt;scope ilk="function" name="pop" signature="pop()" /&gt;
        &lt;scope ilk="function" name="shift" signature="shift()" /&gt;
        &lt;scope ilk="function" name="push" signature="push()" /&gt;
        &lt;scope ilk="function" name="unshift" signature="unshift()" /&gt;
        &lt;scope ilk="function" name="top" signature="top()" /&gt;
        &lt;scope ilk="function" name="bottom" signature="bottom()" /&gt;
        &lt;scope ilk="function" name="count" signature="count()" /&gt;
        &lt;scope ilk="function" name="isEmpty" signature="isEmpty()" /&gt;
        &lt;scope ilk="function" name="setIteratorMode" signature="setIteratorMode()" /&gt;
        &lt;scope ilk="function" name="getIteratorMode" signature="getIteratorMode()" /&gt;
        &lt;scope ilk="function" name="offsetExists" signature="offsetExists()" /&gt;
        &lt;scope ilk="function" name="offsetGet" signature="offsetGet()" /&gt;
        &lt;scope ilk="function" name="offsetSet" signature="offsetSet()" /&gt;
        &lt;scope ilk="function" name="offsetUnset" signature="offsetUnset()" /&gt;
        &lt;scope ilk="function" name="rewind" signature="rewind()" /&gt;
        &lt;scope ilk="function" name="current" signature="current()" /&gt;
        &lt;scope ilk="function" name="key" signature="key()" /&gt;
        &lt;scope ilk="function" name="next" signature="next()" /&gt;
        &lt;scope ilk="function" name="prev" signature="prev()" /&gt;
        &lt;scope ilk="function" name="valid" signature="valid()" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="IT_MODE_LIFO" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="IT_MODE_FIFO" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="IT_MODE_DELETE" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="IT_MODE_KEEP" /&gt;
      &lt;/scope&gt;
      &lt;scope classrefs="SplDoublyLinkedList" ilk="class" name="SplStack"&gt;
        &lt;scope ilk="function" name="pop" signature="pop()" /&gt;
        &lt;scope ilk="function" name="shift" signature="shift()" /&gt;
        &lt;scope ilk="function" name="push" signature="push()" /&gt;
        &lt;scope ilk="function" name="unshift" signature="unshift()" /&gt;
        &lt;scope ilk="function" name="top" signature="top()" /&gt;
        &lt;scope ilk="function" name="bottom" signature="bottom()" /&gt;
        &lt;scope ilk="function" name="count" signature="count()" /&gt;
        &lt;scope ilk="function" name="isEmpty" signature="isEmpty()" /&gt;
        &lt;scope ilk="function" name="setIteratorMode" signature="setIteratorMode()" /&gt;
        &lt;scope ilk="function" name="getIteratorMode" signature="getIteratorMode()" /&gt;
        &lt;scope ilk="function" name="offsetExists" signature="offsetExists()" /&gt;
        &lt;scope ilk="function" name="offsetGet" signature="offsetGet()" /&gt;
        &lt;scope ilk="function" name="offsetSet" signature="offsetSet()" /&gt;
        &lt;scope ilk="function" name="offsetUnset" signature="offsetUnset()" /&gt;
        &lt;scope ilk="function" name="rewind" signature="rewind()" /&gt;
        &lt;scope ilk="function" name="current" signature="current()" /&gt;
        &lt;scope ilk="function" name="key" signature="key()" /&gt;
        &lt;scope ilk="function" name="next" signature="next()" /&gt;
        &lt;scope ilk="function" name="prev" signature="prev()" /&gt;
        &lt;scope ilk="function" name="valid" signature="valid()" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="IT_MODE_LIFO" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="IT_MODE_FIFO" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="IT_MODE_DELETE" /&gt;
        &lt;variable citdl="integer" ilk="constant" name="IT_MODE_KEEP" /&gt;
      &lt;/scope&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_ASP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_CDATA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_COMMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_DOCTYPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_END" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_JSTE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_PHP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_PROCINS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_ROOT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_SECTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_START" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_STARTEND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_TEXT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_NODETYPE_XMLDECL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_A" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_ABBR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_ACRONYM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_ADDRESS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_ALIGN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_APPLET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_AREA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_B" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BASE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BASEFONT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BDO" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BGSOUND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BIG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BLINK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BLOCKQUOTE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BODY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_BUTTON" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_CAPTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_CENTER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_CITE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_CODE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_COL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_COLGROUP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_COMMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_DD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_DEL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_DFN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_DIR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_DIV" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_DL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_DT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_EM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_EMBED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_FIELDSET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_FONT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_FORM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_FRAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_FRAMESET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_H1" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_H2" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_H3" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_H4" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_H5" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_H6" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_HEAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_HR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_HTML" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_I" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_IFRAME" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_ILAYER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_IMG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_INPUT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_INS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_ISINDEX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_KBD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_KEYGEN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_LABEL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_LAYER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_LEGEND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_LI" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_LINK" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_LISTING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_MAP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_MARQUEE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_MENU" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_META" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_MULTICOL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_NOBR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_NOEMBED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_NOFRAMES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_NOLAYER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_NOSAVE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_NOSCRIPT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_OBJECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_OL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_OPTGROUP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_OPTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_P" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_PARAM" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_PLAINTEXT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_PRE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_Q" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_RB" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_RBC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_RP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_RT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_RTC" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_RUBY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_S" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SAMP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SCRIPT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SELECT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SERVER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SERVLET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SMALL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SPACER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SPAN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_STRIKE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_STRONG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_STYLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SUB" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_SUP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_TABLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_TBODY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_TD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_TEXTAREA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_TFOOT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_TH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_THEAD" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_TITLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_TR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_TT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_U" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_UL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_UNKNOWN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_VAR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_WBR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="TIDY_TAG_XMP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ULOC_ACTUAL_LOCALE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="ULOC_VALID_LOCALE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_AMBIGUOUS_ALIAS_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BAD_VARIABLE_DEFINITION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_ASSIGN_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_ERROR_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_ERROR_START" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_HEX_DIGITS_EXPECTED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_INIT_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_INTERNAL_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_MALFORMED_RULE_TAG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_MISMATCHED_PAREN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_NEW_LINE_IN_QUOTED_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_RULE_EMPTY_SET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_RULE_SYNTAX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_SEMICOLON_EXPECTED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_UNCLOSED_SET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_UNDEFINED_VARIABLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_UNRECOGNIZED_OPTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BRK_VARIABLE_REDFINITION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_BUFFER_OVERFLOW_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_CE_NOT_FOUND_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_COLLATOR_VERSION_MISMATCH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_DIFFERENT_UCA_VERSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ENUM_OUT_OF_SYNC_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ERROR_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ERROR_WARNING_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ERROR_WARNING_START" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_FILE_ACCESS_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_FMT_PARSE_ERROR_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_FMT_PARSE_ERROR_START" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_ACE_PREFIX_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_CHECK_BIDI_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_ERROR_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_ERROR_START" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_LABEL_TOO_LONG_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_PROHIBITED_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_STD3_ASCII_RULES_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_UNASSIGNED_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_VERIFICATION_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_IDNA_ZERO_LENGTH_LABEL_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ILLEGAL_ARGUMENT_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ILLEGAL_CHARACTER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ILLEGAL_CHAR_FOUND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ILLEGAL_CHAR_IN_SEGMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ILLEGAL_ESCAPE_SEQUENCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ILLEGAL_PAD_POSITION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INDEX_OUTOFBOUNDS_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INTERNAL_PROGRAM_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INTERNAL_TRANSLITERATOR_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVALID_CHAR_FOUND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVALID_FORMAT_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVALID_FUNCTION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVALID_ID" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVALID_PROPERTY_PATTERN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVALID_RBT_SYNTAX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVALID_STATE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVALID_TABLE_FILE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVALID_TABLE_FORMAT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_INVARIANT_CONVERSION_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MALFORMED_EXPONENTIAL_PATTERN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MALFORMED_PRAGMA" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MALFORMED_RULE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MALFORMED_SET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MALFORMED_SYMBOL_REFERENCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MALFORMED_UNICODE_ESCAPE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MALFORMED_VARIABLE_DEFINITION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MALFORMED_VARIABLE_REFERENCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MEMORY_ALLOCATION_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MESSAGE_PARSE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MISMATCHED_SEGMENT_DELIMITERS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MISPLACED_ANCHOR_START" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MISPLACED_COMPOUND_FILTER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MISPLACED_CURSOR_OFFSET" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MISPLACED_QUANTIFIER" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MISSING_OPERATOR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MISSING_RESOURCE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MISSING_SEGMENT_CLOSE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_ANTE_CONTEXTS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_COMPOUND_FILTERS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_CURSORS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_DECIMAL_SEPARATORS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_DECIMAL_SEPERATORS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_EXPONENTIAL_SYMBOLS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_PAD_SPECIFIERS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_PERCENT_SYMBOLS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_PERMILL_SYMBOLS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_MULTIPLE_POST_CONTEXTS" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_NO_SPACE_AVAILABLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_NO_WRITE_PERMISSION" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_PARSE_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_PARSE_ERROR_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_PARSE_ERROR_START" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_PATTERN_SYNTAX_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_PRIMARY_TOO_LONG_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_BAD_ESCAPE_SEQUENCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_BAD_INTERVAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_ERROR_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_ERROR_START" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_INTERNAL_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_INVALID_BACK_REF" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_INVALID_FLAG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_INVALID_STATE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_LOOK_BEHIND_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_MAX_LT_MIN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_MISMATCHED_PAREN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_NUMBER_TOO_BIG" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_PROPERTY_SYNTAX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_RULE_SYNTAX" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_SET_CONTAINS_STRING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_REGEX_UNIMPLEMENTED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_RESOURCE_TYPE_MISMATCH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_RULE_MASK_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_SAFECLONE_ALLOCATED_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_SORT_KEY_TOO_SHORT_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_STANDARD_ERROR_LIMIT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_STATE_OLD_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_STATE_TOO_OLD_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_STRINGPREP_CHECK_BIDI_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_STRINGPREP_PROHIBITED_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_STRINGPREP_UNASSIGNED_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_STRING_NOT_TERMINATED_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_TOO_MANY_ALIASES_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_TRAILING_BACKSLASH" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_TRUNCATED_CHAR_FOUND" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNCLOSED_SEGMENT" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNDEFINED_SEGMENT_REFERENCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNDEFINED_VARIABLE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNEXPECTED_TOKEN" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNMATCHED_BRACES" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNQUOTED_SPECIAL" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNSUPPORTED_ATTRIBUTE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNSUPPORTED_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNSUPPORTED_ESCAPE_SEQUENCE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNSUPPORTED_PROPERTY" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_UNTERMINATED_QUOTE" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_USELESS_COLLATOR_ERROR" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_USING_DEFAULT_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_USING_FALLBACK_WARNING" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_VARIABLE_RANGE_EXHAUSTED" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_VARIABLE_RANGE_OVERLAP" /&gt;
      &lt;variable citdl="integer" ilk="constant" name="U_ZERO_ERROR" /&gt;
      &lt;scope ilk="class" name="XMLWriter"&gt;
        &lt;scope ilk="function" name="openUri" signature="openUri()" /&gt;
        &lt;scope doc="Creates a new XMLWriter using memory for string output." ilk="function" name="openMemory" signature="openMemory ( void  )" /&gt;
        &lt;scope doc="Toggles indentation on or off." ilk="function" name="setIndent" signature="setIndent ( bool $indent  )" /&gt;
        &lt;scope doc="Sets the string which will be used to indent each element/attribute of the resulting xml." ilk="function" name="setIndentString" signature="setIndentString ( string $indentString  )" /&gt;
        &lt;scope doc="Starts a comment." ilk="function" name="startComment" signature="startComment ( void  )" /&gt;
        &lt;scope doc="Ends the current comment." ilk="function" name="endComment" signature="endComment ( void  )" /&gt;
        &lt;scope doc="Starts an attribute." ilk="function" name="startAttribute" signature="startAttribute ( string $name  )" /&gt;
        &lt;scope doc="Ends the current attribute." ilk="function" name="endAttribute" signature="endAttribute ( void  )" /&gt;
        &lt;scope doc="Writes a full attribute." ilk="function" name="writeAttribute" signature="writeAttribute ( string $name  , string $value  )" /&gt;
        &lt;scope ilk="function" name="startAttributeNs" signature="startAttributeNs()" /&gt;
        &lt;scope ilk="function" name="writeAttributeNs" signature="writeAttributeNs()" /&gt;
        &lt;scope doc="Starts an element." ilk="function" name="startElement" signature="startElement ( string $name  )" /&gt;
        &lt;scope doc="Ends the current element." ilk="function" name="endElement" signature="endElement ( void  )" /&gt;
        &lt;scope doc="End the current xml element. Writes an end tag even if the element is empty." ilk="function" name="fullEndElement" signature="fullEndElement ( void  )" /&gt;
        &lt;scope ilk="function" name="startElementNs" signature="startElementNs()" /&gt;
        &lt;scope doc="Writes a full element tag." ilk="function" name="writeElement" signature="writeElement ( string $name  [, string $content ] )" /&gt;
        &lt;scope ilk="function" name="writeElementNs" signature="writeElementNs()" /&gt;
        &lt;scope ilk="function" name="startPi" signature="startPi()" /&gt;
        &lt;scope ilk="function" name="endPi" signature="endPi()" /&gt;
        &lt;scope ilk="function" name="writePi" signature="writePi()" /&gt;
        &lt;scope ilk="function" name="startCdata" signature="startCdata()" /&gt;
        &lt;scope ilk="function" name="endCdata" signature="endCdata()" /&gt;
        &lt;scope ilk="function" name="writeCdata" signature="writeCdata()" /&gt;
        &lt;scope doc="Writes a text." ilk="function" name="text" signature="text ( string $content  )" /&gt;
        &lt;scope doc="Writes a raw xml text." ilk="function" name="writeRaw" signature="writeRaw ( string $content  )" /&gt;
        &lt;scope doc="Starts a document." ilk="function" name="startDocument" signature="startDocument ([ string $version  [, string $encoding  [, string $standalone ]]] )" /&gt;
        &lt;scope doc="Ends the current document." ilk="function" name="endDocument" signature="endDocument ( void  )" /&gt;
        &lt;scope doc="Writes a full comment." ilk="function" name="writeComment" signature="writeComment ( string $content  )" /&gt;
        &lt;scope ilk="function" name="startDtd" signature="startDtd()" /&gt;
        &lt;scope ilk="function" name="endDtd" signature="endDtd()" /&gt;
        &lt;scope ilk="function" name="writeDtd" signature="writeDtd()" /&gt;
        &lt;scope ilk="function" name="startDtdElement" signature="startDtdElement()" /&gt;
        &lt;scope ilk="function" name="endDtdElement" signature="endDtdElement()" /&gt;
        &lt;scope ilk="function" name="writeDtdElement" signature="writeDtdElement()" /&gt;
        &lt;scope ilk="function" name="startDtdAttlist" signature="startDtdAttlist()" /&gt;
        &lt;scope ilk="function" name="endDtdAttlist" signature="endDtdAttlist()" /&gt;
        &lt;scope ilk="function" name="writeDtdAttlist" signature="writeDtdAttlist()" /&gt;
        &lt;scope ilk="function" name="startDtdEntity" signature="startDtdEntity()" /&gt;
        &lt;scope ilk="function" name="endDtdEntity" signature="endDtdEntity()" /&gt;
        &lt;scope ilk="function" name="writeDtdEntity" signature="writeDtdEntity()" /&gt;
        &lt;scope doc="Returns the current buffer." ilk="function" name="outputMemory" signature="outputMemory ([ bool $flush ] )" /&gt;
        &lt;scope doc="Flushes the current buffer." ilk="function" name="flush" signature="flush ([ bool $empty ] )" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="__PHP_Incomplete_Class" /&gt;
      &lt;scope doc="Add files matching the glob pattern See php&amp;apos;s glob for&amp;#xA;the pattern syntax" ilk="function" name="addGlob" returns="bool" signature="addGlob(string pattern[,int flags [, array options]])" src="php_zip.c" /&gt;
      &lt;scope doc="Add files matching the pcre pattern See php&amp;apos;s pcre for&amp;#xA;the pattern syntax" ilk="function" name="addPattern" returns="bool" signature="addPattern(string pattern[, string path [, array options]])" src="php_zip.c" /&gt;
      &lt;scope ilk="function" name="filter_id" signature="filter_id( filtername )" /&gt;
      &lt;scope ilk="function" name="filter_list" signature="filter_list()" /&gt;
      &lt;scope ilk="function" name="forward_static_call_array" signature="forward_static_call_array( function_name, parameters )" /&gt;
      &lt;scope doc="Returns the error code of the last json decode" ilk="function" name="json_last_error" returns="int" signature="json_last_error()" src="json.c" /&gt;
      &lt;scope ilk="function" name="lchown" signature="lchown( filename, user )" /&gt;
      &lt;scope ilk="class" name="mysqli"&gt;
        &lt;scope doc="Turns on or off auto-commit mode on queries for the database connection." ilk="function" name="autocommit" signature="autocommit ( bool $mode  )" /&gt;
        &lt;scope ilk="function" name="change_user" signature="change_user()" /&gt;
        &lt;scope ilk="function" name="character_set_name" signature="character_set_name()" /&gt;
        &lt;scope ilk="function" name="client_encoding" signature="client_encoding()" /&gt;
        &lt;scope doc="Closes a previously opened database connection." ilk="function" name="close" signature="close ( void  )" /&gt;
        &lt;scope doc="Commits the current transaction for the database connection." ilk="function" name="commit" signature="commit ( void  )" /&gt;
        &lt;scope ilk="function" name="connect" signature="connect()" /&gt;
        &lt;scope ilk="function" name="dump_debug_info" signature="dump_debug_info()" /&gt;
        &lt;scope doc="Performs debugging operations using the Fred Fish debugging library." ilk="function" name="debug" signature="debug ( string $message  )" /&gt;
        &lt;scope ilk="function" name="get_charset" signature="get_charset()" /&gt;
        &lt;scope ilk="function" name="get_client_info" signature="get_client_info()" /&gt;
        &lt;scope ilk="function" name="get_server_info" signature="get_server_info()" /&gt;
        &lt;scope ilk="function" name="get_warnings" signature="get_warnings()" /&gt;
        &lt;scope ilk="function" name="init" signature="init()" /&gt;
        &lt;scope doc="This function is used to ask the server to kill a MySQL thread specified by the processid parameter. This value must be retrieved by calling the mysqli_thread_id() function." ilk="function" name="kill" signature="kill ( int $processid  )" /&gt;
        &lt;scope ilk="function" name="set_local_infile_default" signature="set_local_infile_default()" /&gt;
        &lt;scope ilk="function" name="set_local_infile_handler" signature="set_local_infile_handler()" /&gt;
        &lt;scope ilk="function" name="multi_query" signature="multi_query()" /&gt;
        &lt;scope ilk="function" name="mysqli" signature="mysqli()" /&gt;
        &lt;scope ilk="function" name="more_results" signature="more_results()" /&gt;
        &lt;scope ilk="function" name="next_result" signature="next_result()" /&gt;
        &lt;scope doc="Used to set extra connect options and affect behavior for a connection." ilk="function" name="options" signature="options ( int $option  , mixed $value  )" /&gt;
        &lt;scope doc="Checks whether the connection to the server is working. If it has gone down, and global option mysqli.reconnect is enabled an automatic reconnection is attempted." ilk="function" name="ping" signature="ping ( void  )" /&gt;
        &lt;scope doc="Prepares the SQL query pointed to by the null-terminated string query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement." ilk="function" name="prepare" signature="prepare ( string $query  )" /&gt;
        &lt;scope doc="Performs a query against the database." ilk="function" name="query" signature="query ( string $query  [, int $resultmode ] )" /&gt;
        &lt;scope ilk="function" name="real_connect" signature="real_connect()" /&gt;
        &lt;scope ilk="function" name="real_escape_string" signature="real_escape_string()" /&gt;
        &lt;scope ilk="function" name="escape_string" signature="escape_string()" /&gt;
        &lt;scope ilk="function" name="real_query" signature="real_query()" /&gt;
        &lt;scope doc="Rollbacks the current transaction for the database." ilk="function" name="rollback" signature="rollback ( void  )" /&gt;
        &lt;scope ilk="function" name="select_db" signature="select_db()" /&gt;
        &lt;scope ilk="function" name="set_charset" signature="set_charset()" /&gt;
        &lt;scope ilk="function" name="set_opt" signature="set_opt()" /&gt;
        &lt;scope ilk="function" name="ssl_set" signature="ssl_set()" /&gt;
        &lt;scope doc="mysqli_stat() returns a string containing information similar to that provided by the &amp;amp;#039;mysqladmin status&amp;amp;#039; command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables." ilk="function" name="stat" signature="stat ( void  )" /&gt;
        &lt;scope ilk="function" name="stmt_init" signature="stmt_init()" /&gt;
        &lt;scope ilk="function" name="store_result" signature="store_result()" /&gt;
        &lt;scope ilk="function" name="thread_safe" signature="thread_safe()" /&gt;
        &lt;scope ilk="function" name="use_result" signature="use_result()" /&gt;
        &lt;scope ilk="function" name="refresh" signature="refresh()" /&gt;
        &lt;variable name="affected_rows" /&gt;
        &lt;variable name="client_info" /&gt;
        &lt;variable name="client_version" /&gt;
        &lt;variable name="connect_errno" /&gt;
        &lt;variable name="connect_error" /&gt;
        &lt;variable name="errno" /&gt;
        &lt;variable name="error" /&gt;
        &lt;variable name="field_count" /&gt;
        &lt;variable name="host_info" /&gt;
        &lt;variable name="info" /&gt;
        &lt;variable name="insert_id" /&gt;
        &lt;variable name="server_info" /&gt;
        &lt;variable name="server_version" /&gt;
        &lt;variable name="sqlstate" /&gt;
        &lt;variable name="protocol_version" /&gt;
        &lt;variable name="thread_id" /&gt;
        &lt;variable name="warning_count" /&gt;
      &lt;/scope&gt;
      &lt;scope doc="U Returns statistics about the zval cache" ilk="function" name="mysqli_cache_stats" returns="array" signature="mysqli_cache_stats(void)" src="mysqli_nonapi.c" /&gt;
      &lt;scope ilk="function" name="mysqli_client_encoding" signature="mysqli_client_encoding()" /&gt;
      &lt;scope ilk="class" name="mysqli_driver"&gt;
        &lt;variable name="client_info" /&gt;
        &lt;variable name="client_version" /&gt;
        &lt;variable name="driver_version" /&gt;
        &lt;variable name="embedded" /&gt;
        &lt;variable name="reconnect" /&gt;
        &lt;variable name="report_mode" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="function" name="mysqli_escape_string" signature="mysqli_escape_string()" /&gt;
      &lt;scope ilk="function" name="mysqli_execute" signature="mysqli_execute()" /&gt;
      &lt;scope ilk="function" name="mysqli_fetch_array" signature="mysqli_fetch_array()" /&gt;
      &lt;scope ilk="function" name="mysqli_fetch_assoc" signature="mysqli_fetch_assoc()" /&gt;
      &lt;scope ilk="function" name="mysqli_fetch_field" signature="mysqli_fetch_field()" /&gt;
      &lt;scope ilk="function" name="mysqli_fetch_field_direct" signature="mysqli_fetch_field_direct()" /&gt;
      &lt;scope ilk="function" name="mysqli_fetch_fields" signature="mysqli_fetch_fields()" /&gt;
      &lt;scope ilk="function" name="mysqli_fetch_lengths" signature="mysqli_fetch_lengths()" /&gt;
      &lt;scope ilk="function" name="mysqli_fetch_object" signature="mysqli_fetch_object()" /&gt;
      &lt;scope ilk="function" name="mysqli_fetch_row" signature="mysqli_fetch_row()" /&gt;
      &lt;scope ilk="function" name="mysqli_get_host_info" signature="mysqli_get_host_info()" /&gt;
      &lt;scope ilk="function" name="mysqli_get_metadata" signature="mysqli_get_metadata()" /&gt;
      &lt;scope ilk="class" name="mysqli_result"&gt;
        &lt;scope ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope doc="Frees the memory associated with the result." ilk="function" name="close" signature="close ( void  )" /&gt;
        &lt;scope doc="Frees the memory associated with the result." ilk="function" name="free" signature="free ( void  )" /&gt;
        &lt;scope ilk="function" name="data_seek" signature="data_seek()" /&gt;
        &lt;scope ilk="function" name="fetch_field" signature="fetch_field()" /&gt;
        &lt;scope ilk="function" name="fetch_fields" signature="fetch_fields()" /&gt;
        &lt;scope ilk="function" name="fetch_field_direct" signature="fetch_field_direct()" /&gt;
        &lt;scope ilk="function" name="fetch_array" signature="fetch_array()" /&gt;
        &lt;scope ilk="function" name="fetch_assoc" signature="fetch_assoc()" /&gt;
        &lt;scope ilk="function" name="fetch_object" signature="fetch_object()" /&gt;
        &lt;scope ilk="function" name="fetch_row" signature="fetch_row()" /&gt;
        &lt;scope ilk="function" name="field_seek" signature="field_seek()" /&gt;
        &lt;scope ilk="function" name="free_result" signature="free_result()" /&gt;
        &lt;variable name="current_field" /&gt;
        &lt;variable name="field_count" /&gt;
        &lt;variable name="lengths" /&gt;
        &lt;variable name="num_rows" /&gt;
        &lt;variable name="type" /&gt;
      &lt;/scope&gt;
      &lt;scope doc="unsets user defined handler for load local infile&amp;#xA;command" ilk="function" name="mysqli_set_local_infile_default" returns="void" signature="mysqli_set_local_infile_default(object link)" src="mysqli_api.c" /&gt;
      &lt;scope doc="Set callback functions for LOAD DATA LOCAL INFILE" ilk="function" name="mysqli_set_local_infile_handler" returns="bool" signature="mysqli_set_local_infile_handler(object link, callback read_func)" src="mysqli_api.c" /&gt;
      &lt;scope ilk="function" name="mysqli_set_opt" signature="mysqli_set_opt()" /&gt;
      &lt;scope classrefs="RuntimeException" ilk="class" name="mysqli_sql_exception"&gt;
        &lt;scope ilk="function" name="__clone" signature="__clone()" /&gt;
        &lt;scope ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope ilk="function" name="getMessage" signature="getMessage()" /&gt;
        &lt;scope ilk="function" name="getCode" signature="getCode()" /&gt;
        &lt;scope ilk="function" name="getFile" signature="getFile()" /&gt;
        &lt;scope ilk="function" name="getLine" signature="getLine()" /&gt;
        &lt;scope ilk="function" name="getTrace" signature="getTrace()" /&gt;
        &lt;scope ilk="function" name="getPrevious" signature="getPrevious()" /&gt;
        &lt;scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" /&gt;
        &lt;scope ilk="function" name="__toString" signature="__toString()" /&gt;
        &lt;variable name="message" /&gt;
        &lt;variable name="code" /&gt;
        &lt;variable name="file" /&gt;
        &lt;variable name="line" /&gt;
        &lt;variable name="sqlstate" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="mysqli_stmt"&gt;
        &lt;scope ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope ilk="function" name="attr_get" signature="attr_get()" /&gt;
        &lt;scope ilk="function" name="attr_set" signature="attr_set()" /&gt;
        &lt;scope ilk="function" name="bind_param" signature="bind_param()" /&gt;
        &lt;scope ilk="function" name="bind_result" signature="bind_result()" /&gt;
        &lt;scope doc="Closes a prepared statement. mysqli_stmt_close() also deallocates the statement handle. If the current statement has pending or unread results, this function cancels them so that the next query can be executed." ilk="function" name="close" signature="close ( void  )" /&gt;
        &lt;scope ilk="function" name="data_seek" signature="data_seek()" /&gt;
        &lt;scope doc="Executes a query that has been previously prepared using the mysqli_prepare() function. When executed any parameter markers which exist will automatically be replaced with the appropiate data." ilk="function" name="execute" signature="execute ( void  )" /&gt;
        &lt;scope doc="Fetch the result from a prepared statement into the variables bound by mysqli_stmt_bind_result()." ilk="function" name="fetch" signature="fetch ( void  )" /&gt;
        &lt;scope ilk="function" name="get_warnings" signature="get_warnings()" /&gt;
        &lt;scope ilk="function" name="result_metadata" signature="result_metadata()" /&gt;
        &lt;scope ilk="function" name="num_rows" signature="num_rows()" /&gt;
        &lt;scope ilk="function" name="send_long_data" signature="send_long_data()" /&gt;
        &lt;scope ilk="function" name="stmt" signature="stmt()" /&gt;
        &lt;scope ilk="function" name="free_result" signature="free_result()" /&gt;
        &lt;scope doc="Resets a prepared statement on client and server to state after prepare." ilk="function" name="reset" signature="reset ( void  )" /&gt;
        &lt;scope doc="Prepares the SQL query pointed to by the null-terminated string query." ilk="function" name="prepare" signature="prepare ( string $query  )" /&gt;
        &lt;scope ilk="function" name="store_result" signature="store_result()" /&gt;
        &lt;variable name="affected_rows" /&gt;
        &lt;variable name="insert_id" /&gt;
        &lt;variable name="num_rows" /&gt;
        &lt;variable name="param_count" /&gt;
        &lt;variable name="field_count" /&gt;
        &lt;variable name="errno" /&gt;
        &lt;variable name="error" /&gt;
        &lt;variable name="sqlstate" /&gt;
        &lt;variable name="id" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="mysqli_warning"&gt;
        &lt;scope ilk="function" name="__construct" signature="__construct()" /&gt;
        &lt;scope ilk="function" name="next" signature="next()" /&gt;
        &lt;variable name="message" /&gt;
        &lt;variable name="sqlstate" /&gt;
        &lt;variable name="errno" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="function" name="mysqli_warning_count" signature="mysqli_warning_count()" /&gt;
      &lt;scope doc="Returns str in output buffer converted to the iconv&amp;#xA;output encoding character set" ilk="function" name="ob_iconv_handler" returns="string" signature="ob_iconv_handler(string contents, int status)" src="iconv.c" /&gt;
      &lt;scope ilk="function" name="pg_clientencoding" signature="pg_clientencoding( [ connection ] )" /&gt;
      &lt;scope ilk="function" name="pg_cmdtuples" signature="pg_cmdtuples( result )" /&gt;
      &lt;scope ilk="function" name="pg_errormessage" signature="pg_errormessage( [ connection ] )" /&gt;
      &lt;scope ilk="function" name="pg_exec" signature="pg_exec( [ connection ], [ query ] )" /&gt;
      &lt;scope ilk="function" name="pg_fieldisnull" signature="pg_fieldisnull( result, [ row ], [ field_name_or_number ] )" /&gt;
      &lt;scope ilk="function" name="pg_fieldname" signature="pg_fieldname( result, field_number )" /&gt;
      &lt;scope ilk="function" name="pg_fieldnum" signature="pg_fieldnum( result, field_name )" /&gt;
      &lt;scope ilk="function" name="pg_fieldprtlen" signature="pg_fieldprtlen( result, [ row ], [ field_name_or_number ] )" /&gt;
      &lt;scope ilk="function" name="pg_fieldsize" signature="pg_fieldsize( result, field_number )" /&gt;
      &lt;scope ilk="function" name="pg_fieldtype" signature="pg_fieldtype( result, field_number )" /&gt;
      &lt;scope ilk="function" name="pg_freeresult" signature="pg_freeresult( result )" /&gt;
      &lt;scope ilk="function" name="pg_getlastoid" signature="pg_getlastoid( result )" /&gt;
      &lt;scope ilk="function" name="pg_loclose" signature="pg_loclose( large_object )" /&gt;
      &lt;scope ilk="function" name="pg_locreate" signature="pg_locreate( [ connection ], [ large_object_id ] )" /&gt;
      &lt;scope ilk="function" name="pg_loexport" signature="pg_loexport( [ connection ], [ objoid ], [ filename ] )" /&gt;
      &lt;scope ilk="function" name="pg_loimport" signature="pg_loimport( [ connection ], [ filename ], [ large_object_oid ] )" /&gt;
      &lt;scope ilk="function" name="pg_loopen" signature="pg_loopen( [ connection ], [ large_object_oid ], [ mode ] )" /&gt;
      &lt;scope ilk="function" name="pg_loread" signature="pg_loread( large_object, [ len ] )" /&gt;
      &lt;scope ilk="function" name="pg_loreadall" signature="pg_loreadall( large_object )" /&gt;
      &lt;scope ilk="function" name="pg_lounlink" signature="pg_lounlink( [ connection ], [ large_object_oid ] )" /&gt;
      &lt;scope ilk="function" name="pg_lowrite" signature="pg_lowrite( large_object, buf, [ len ] )" /&gt;
      &lt;scope ilk="function" name="pg_numfields" signature="pg_numfields( result )" /&gt;
      &lt;scope ilk="function" name="pg_numrows" signature="pg_numrows( result )" /&gt;
      &lt;scope ilk="function" name="pg_result" signature="pg_result( connection )" /&gt;
      &lt;scope ilk="function" name="pg_setclientencoding" signature="pg_setclientencoding( [ connection ], [ encoding ] )" /&gt;
      &lt;scope doc="Generic SNMPv object fetcher From here is passed on the&amp;#xA;the common internal object fetcher st SNMP CMD GET snmp" ilk="function" name="php_snmpv3" returns="void" signature="php_snmpv3(INTERNAL_FUNCTION_PARAMETERS, int st)" src="snmp.c" /&gt;
      &lt;scope ilk="class" name="php_user_filter"&gt;
        &lt;scope ilk="function" name="filter" signature="filter()" /&gt;
        &lt;scope ilk="function" name="onCreate" signature="onCreate()" /&gt;
        &lt;scope ilk="function" name="onClose" signature="onClose()" /&gt;
        &lt;variable name="filtername" /&gt;
        &lt;variable name="params" /&gt;
      &lt;/scope&gt;
      &lt;scope ilk="class" name="stdClass" /&gt;
      &lt;scope doc="force an xdebug breakpoint here." ilk="function" name="xdebug_break" signature="xdebug_break()" /&gt;
    &lt;/scope&gt;
  &lt;/file&gt;
&lt;/codeintel&gt;
</pre></body></html>